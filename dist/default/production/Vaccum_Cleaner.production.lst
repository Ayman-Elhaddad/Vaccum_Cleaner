

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Tue Jan 14 20:04:00 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    12                           	dabs	1,0x7E,2
    13  0000                     
    14                           ; Version 2.10
    15                           ; Generated 31/07/2019 GMT
    16                           ; 
    17                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC16F877A Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     	;# 
    49  0001                     	;# 
    50  0002                     	;# 
    51  0003                     	;# 
    52  0004                     	;# 
    53  0005                     	;# 
    54  0006                     	;# 
    55  0007                     	;# 
    56  0008                     	;# 
    57  0009                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000D                     	;# 
    62  000E                     	;# 
    63  000E                     	;# 
    64  000F                     	;# 
    65  0010                     	;# 
    66  0011                     	;# 
    67  0012                     	;# 
    68  0013                     	;# 
    69  0014                     	;# 
    70  0015                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001B                     	;# 
    78  001B                     	;# 
    79  001C                     	;# 
    80  001D                     	;# 
    81  001E                     	;# 
    82  001F                     	;# 
    83  0081                     	;# 
    84  0085                     	;# 
    85  0086                     	;# 
    86  0087                     	;# 
    87  0088                     	;# 
    88  0089                     	;# 
    89  008C                     	;# 
    90  008D                     	;# 
    91  008E                     	;# 
    92  0091                     	;# 
    93  0092                     	;# 
    94  0093                     	;# 
    95  0094                     	;# 
    96  0098                     	;# 
    97  0099                     	;# 
    98  009C                     	;# 
    99  009D                     	;# 
   100  009E                     	;# 
   101  009F                     	;# 
   102  010C                     	;# 
   103  010D                     	;# 
   104  010E                     	;# 
   105  010F                     	;# 
   106  018C                     	;# 
   107  018D                     	;# 
   108  0000                     	;# 
   109  0001                     	;# 
   110  0002                     	;# 
   111  0003                     	;# 
   112  0004                     	;# 
   113  0005                     	;# 
   114  0006                     	;# 
   115  0007                     	;# 
   116  0008                     	;# 
   117  0009                     	;# 
   118  000A                     	;# 
   119  000B                     	;# 
   120  000C                     	;# 
   121  000D                     	;# 
   122  000E                     	;# 
   123  000E                     	;# 
   124  000F                     	;# 
   125  0010                     	;# 
   126  0011                     	;# 
   127  0012                     	;# 
   128  0013                     	;# 
   129  0014                     	;# 
   130  0015                     	;# 
   131  0015                     	;# 
   132  0016                     	;# 
   133  0017                     	;# 
   134  0018                     	;# 
   135  0019                     	;# 
   136  001A                     	;# 
   137  001B                     	;# 
   138  001B                     	;# 
   139  001C                     	;# 
   140  001D                     	;# 
   141  001E                     	;# 
   142  001F                     	;# 
   143  0081                     	;# 
   144  0085                     	;# 
   145  0086                     	;# 
   146  0087                     	;# 
   147  0088                     	;# 
   148  0089                     	;# 
   149  008C                     	;# 
   150  008D                     	;# 
   151  008E                     	;# 
   152  0091                     	;# 
   153  0092                     	;# 
   154  0093                     	;# 
   155  0094                     	;# 
   156  0098                     	;# 
   157  0099                     	;# 
   158  009C                     	;# 
   159  009D                     	;# 
   160  009E                     	;# 
   161  009F                     	;# 
   162  010C                     	;# 
   163  010D                     	;# 
   164  010E                     	;# 
   165  010F                     	;# 
   166  018C                     	;# 
   167  018D                     	;# 
   168  0000                     	;# 
   169  0001                     	;# 
   170  0002                     	;# 
   171  0003                     	;# 
   172  0004                     	;# 
   173  0005                     	;# 
   174  0006                     	;# 
   175  0007                     	;# 
   176  0008                     	;# 
   177  0009                     	;# 
   178  000A                     	;# 
   179  000B                     	;# 
   180  000C                     	;# 
   181  000D                     	;# 
   182  000E                     	;# 
   183  000E                     	;# 
   184  000F                     	;# 
   185  0010                     	;# 
   186  0011                     	;# 
   187  0012                     	;# 
   188  0013                     	;# 
   189  0014                     	;# 
   190  0015                     	;# 
   191  0015                     	;# 
   192  0016                     	;# 
   193  0017                     	;# 
   194  0018                     	;# 
   195  0019                     	;# 
   196  001A                     	;# 
   197  001B                     	;# 
   198  001B                     	;# 
   199  001C                     	;# 
   200  001D                     	;# 
   201  001E                     	;# 
   202  001F                     	;# 
   203  0081                     	;# 
   204  0085                     	;# 
   205  0086                     	;# 
   206  0087                     	;# 
   207  0088                     	;# 
   208  0089                     	;# 
   209  008C                     	;# 
   210  008D                     	;# 
   211  008E                     	;# 
   212  0091                     	;# 
   213  0092                     	;# 
   214  0093                     	;# 
   215  0094                     	;# 
   216  0098                     	;# 
   217  0099                     	;# 
   218  009C                     	;# 
   219  009D                     	;# 
   220  009E                     	;# 
   221  009F                     	;# 
   222  010C                     	;# 
   223  010D                     	;# 
   224  010E                     	;# 
   225  010F                     	;# 
   226  018C                     	;# 
   227  018D                     	;# 
   228  0006                     _PORTB	set	6
   229  0086                     _TRISB	set	134
   230                           
   231                           ; #config settings
   232  0000                     
   233                           	psect	cinit
   234  07EF                     start_initialization:	
   235  07EF                     __initialization:	
   236                           
   237                           ; Clear objects allocated to COMMON
   238  07EF  01FA               	clrf	__pbssCOMMON& (0+127)
   239  07F0  01FB               	clrf	(__pbssCOMMON+1)& (0+127)
   240                           
   241                           ; Clear objects allocated to BANK0
   242  07F1  1283               	bcf	3,5	;RP0=0, select bank0
   243  07F2  1303               	bcf	3,6	;RP1=0, select bank0
   244  07F3  01A0               	clrf	__pbssBANK0& (0+127)
   245  07F4  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   246  07F5  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   247  07F6  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   248  07F7  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   249  07F8  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   250  07F9  01A6               	clrf	(__pbssBANK0+6)& (0+127)
   251  07FA  01A7               	clrf	(__pbssBANK0+7)& (0+127)
   252  07FB  01A8               	clrf	(__pbssBANK0+8)& (0+127)
   253  07FC                     end_of_initialization:	
   254                           ;End of C runtime variable initialization code
   255                           
   256  07FC                     __end_of__initialization:	
   257  07FC  0183               	clrf	3
   258  07FD  120A  118A  2E5B   	ljmp	_main	;jump to C main() function
   259                           
   260                           	psect	bssCOMMON
   261  007A                     __pbssCOMMON:	
   262  007A                     SW_Update@SW_counter:	
   263  007A                     	ds	2
   264                           
   265                           	psect	bssBANK0
   266  0020                     __pbssBANK0:	
   267  0020                     _SWs_Info:	
   268  0020                     	ds	9
   269                           
   270                           	psect	cstackCOMMON
   271  0070                     __pcstackCOMMON:	
   272  0070                     ?_SW_Update:	
   273  0070                     ?_SW_GetState:	
   274                           ; 1 bytes @ 0x0
   275                           
   276  0070                     ?___bmul:	
   277                           ; 1 bytes @ 0x0
   278                           
   279  0070                     ?_main:	
   280                           ; 1 bytes @ 0x0
   281                           
   282  0070                     ___bmul@multiplicand:	
   283                           ; 2 bytes @ 0x0
   284                           
   285                           
   286                           ; 1 bytes @ 0x0
   287  0070                     	ds	1
   288  0071                     ??___bmul:	
   289                           
   290                           ; 1 bytes @ 0x1
   291  0071                     	ds	1
   292  0072                     ___bmul@product:	
   293                           
   294                           ; 1 bytes @ 0x2
   295  0072                     	ds	1
   296  0073                     ___bmul@multiplier:	
   297                           
   298                           ; 1 bytes @ 0x3
   299  0073                     	ds	1
   300  0074                     ??_SW_Update:	
   301  0074                     ??_SW_GetState:	
   302                           ; 1 bytes @ 0x4
   303                           
   304                           
   305                           ; 1 bytes @ 0x4
   306  0074                     	ds	1
   307  0075                     SW_GetState@sw:	
   308                           
   309                           ; 1 bytes @ 0x5
   310  0075                     	ds	2
   311  0077                     SW_Update@index:	
   312                           
   313                           ; 1 bytes @ 0x7
   314  0077                     	ds	1
   315  0078                     ??_main:	
   316                           
   317                           ; 1 bytes @ 0x8
   318  0078                     	ds	2
   319                           
   320                           	psect	maintext
   321  065B                     __pmaintext:	
   322 ;;
   323 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   324 ;;
   325 ;; *************** function _main *****************
   326 ;; Defined at:
   327 ;;		line 11 in file "vaccum.c"
   328 ;; Parameters:    Size  Location     Type
   329 ;;		None
   330 ;; Auto vars:     Size  Location     Type
   331 ;;		None
   332 ;; Return value:  Size  Location     Type
   333 ;;                  2   14[None  ] int 
   334 ;; Registers used:
   335 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   336 ;; Tracked objects:
   337 ;;		On entry : B00/0
   338 ;;		On exit  : 0/0
   339 ;;		Unchanged: 0/0
   340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   341 ;;      Params:         0       0       0       0       0
   342 ;;      Locals:         0       0       0       0       0
   343 ;;      Temps:          2       0       0       0       0
   344 ;;      Totals:         2       0       0       0       0
   345 ;;Total ram usage:        2 bytes
   346 ;; Hardware stack levels required when called:    2
   347 ;; This function calls:
   348 ;;		_SW_GetState
   349 ;;		_SW_Update
   350 ;; This function is called by:
   351 ;;		Startup code after reset
   352 ;; This function uses a non-reentrant model
   353 ;;
   354                           
   355                           
   356                           ;psect for function _main
   357  065B                     _main:	
   358  065B                     l862:	
   359                           ;incstack = 0
   360                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   361                           
   362                           
   363                           ;vaccum.c: 14:     ((((TRISB))) = (((TRISB)) & (~(1 << ((3)))))|((0) << ((3))));
   364  065B  1683               	bsf	3,5	;RP0=1, select bank1
   365  065C  1303               	bcf	3,6	;RP1=0, select bank1
   366  065D  0806               	movf	6,w	;volatile
   367  065E  39F7               	andlw	247
   368  065F  0086               	movwf	6	;volatile
   369  0660                     l864:	
   370                           
   371                           ;vaccum.c: 17:     {;vaccum.c: 18:         _delay((unsigned long)((1)*(80000000/4000.0))
      +                          );
   372  0660  301A               	movlw	26
   373  0661  00F9               	movwf	??_main+1
   374  0662  30F8               	movlw	248
   375  0663  00F8               	movwf	??_main
   376  0664                     u337:	
   377  0664  0BF8               	decfsz	??_main,f
   378  0665  2E64               	goto	u337
   379  0666  0BF9               	decfsz	??_main+1,f
   380  0667  2E64               	goto	u337
   381  0668  0000               	nop
   382  0669                     l866:	
   383                           
   384                           ;vaccum.c: 19:         SW_Update();
   385  0669  120A  118A  2688  120A  118A  	fcall	_SW_Update
   386  066E                     l868:	
   387                           
   388                           ;vaccum.c: 20:         ((((PORTB))) = (((PORTB)) & (~(1 << ((3)))))|(1 << ((3))));
   389  066E  1283               	bcf	3,5	;RP0=0, select bank0
   390  066F  1303               	bcf	3,6	;RP1=0, select bank0
   391  0670  0806               	movf	6,w	;volatile
   392  0671  39F7               	andlw	247
   393  0672  3808               	iorlw	8
   394  0673  0086               	movwf	6	;volatile
   395  0674                     l870:	
   396                           
   397                           ;vaccum.c: 22:         if( SW_GetState(SW_PRESURE) == SW_PRESSED )
   398  0674  3002               	movlw	2
   399  0675  120A  118A  2636  120A  118A  	fcall	_SW_GetState
   400  067A  3A02               	xorlw	2
   401  067B  1D03               	skipz
   402  067C  2E7E               	goto	u311
   403  067D  2E7F               	goto	u310
   404  067E                     u311:	
   405  067E  2E60               	goto	l864
   406  067F                     u310:	
   407  067F                     l872:	
   408                           
   409                           ;vaccum.c: 24:         {;vaccum.c: 27:           ((((PORTB))) = (((PORTB)) & (~(1 << ((3
      +                          )))))|(0 << ((3))));
   410  067F  1283               	bcf	3,5	;RP0=0, select bank0
   411  0680  1303               	bcf	3,6	;RP1=0, select bank0
   412  0681  0806               	movf	6,w	;volatile
   413  0682  39F7               	andlw	247
   414  0683  0086               	movwf	6	;volatile
   415  0684  2E60               	goto	l864
   416  0685  120A  118A  2800   	ljmp	start
   417  0688                     __end_of_main:	
   418                           
   419                           	psect	text1
   420  0688                     __ptext1:	
   421 ;; *************** function _SW_Update *****************
   422 ;; Defined at:
   423 ;;		line 74 in file "SW.c"
   424 ;; Parameters:    Size  Location     Type
   425 ;;		None
   426 ;; Auto vars:     Size  Location     Type
   427 ;;  index           1    7[COMMON] unsigned char 
   428 ;; Return value:  Size  Location     Type
   429 ;;                  1    wreg      void 
   430 ;; Registers used:
   431 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   432 ;; Tracked objects:
   433 ;;		On entry : 0/0
   434 ;;		On exit  : 0/0
   435 ;;		Unchanged: 0/0
   436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   437 ;;      Params:         0       0       0       0       0
   438 ;;      Locals:         1       0       0       0       0
   439 ;;      Temps:          3       0       0       0       0
   440 ;;      Totals:         4       0       0       0       0
   441 ;;Total ram usage:        4 bytes
   442 ;; Hardware stack levels used:    1
   443 ;; Hardware stack levels required when called:    1
   444 ;; This function calls:
   445 ;;		___bmul
   446 ;; This function is called by:
   447 ;;		_main
   448 ;; This function uses a non-reentrant model
   449 ;;
   450                           
   451                           
   452                           ;psect for function _SW_Update
   453  0688                     _SW_Update:	
   454  0688                     l798:	
   455                           ;incstack = 0
   456                           ; Regs used in _SW_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   457                           
   458  0688                     l800:	
   459                           
   460                           ;SW.c: 80:     SW_counter += (5);
   461  0688  3005               	movlw	5
   462  0689  07FA               	addwf	SW_Update@SW_counter,f
   463  068A  1803               	skipnc
   464  068B  0AFB               	incf	SW_Update@SW_counter+1,f
   465  068C  3000               	movlw	0
   466  068D  07FB               	addwf	SW_Update@SW_counter+1,f
   467  068E                     l802:	
   468                           
   469                           ;SW.c: 82:     if (SW_counter != (20)){
   470  068E  3014               	movlw	20
   471  068F  067A               	xorwf	SW_Update@SW_counter,w
   472  0690  047B               	iorwf	SW_Update@SW_counter+1,w
   473  0691  1903               	btfsc	3,2
   474  0692  2E94               	goto	u191
   475  0693  2E95               	goto	u190
   476  0694                     u191:	
   477  0694  2E96               	goto	l806
   478  0695                     u190:	
   479  0695  2FEE               	goto	l39
   480  0696                     l806:	
   481                           
   482                           ;SW.c: 86:     SW_counter = 0;
   483  0696  01FA               	clrf	SW_Update@SW_counter
   484  0697  01FB               	clrf	SW_Update@SW_counter+1
   485                           
   486                           ;SW.c: 89:     for (index = SW_PLUS; index < (3); index++)
   487  0698  01F7               	clrf	SW_Update@index
   488  0699                     l812:	
   489                           
   490                           ;SW.c: 90:     {;SW.c: 93:         SWs_Info[index].sw_samples[0] = SWs_Info[index].sw_sa
      +                          mples[1];
   491  0699  3003               	movlw	3
   492  069A  00F4               	movwf	??_SW_Update
   493  069B  0874               	movf	??_SW_Update,w
   494  069C  00F0               	movwf	___bmul@multiplicand
   495  069D  0877               	movf	SW_Update@index,w
   496  069E  120A  118A  2646  120A  118A  	fcall	___bmul
   497  06A3  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
   498  06A4  0084               	movwf	4
   499  06A5  1383               	bcf	3,7	;select IRP bank0
   500  06A6  0800               	movf	0,w
   501  06A7  00F5               	movwf	??_SW_Update+1
   502  06A8  3003               	movlw	3
   503  06A9  00F6               	movwf	??_SW_Update+2
   504  06AA  0876               	movf	??_SW_Update+2,w
   505  06AB  00F0               	movwf	___bmul@multiplicand
   506  06AC  0877               	movf	SW_Update@index,w
   507  06AD  120A  118A  2646  120A  118A  	fcall	___bmul
   508  06B2  3E20               	addlw	(low (_SWs_Info| 0))& (0+255)
   509  06B3  0084               	movwf	4
   510  06B4  0875               	movf	??_SW_Update+1,w
   511  06B5  1383               	bcf	3,7	;select IRP bank0
   512  06B6  0080               	movwf	0
   513  06B7                     l814:	
   514                           
   515                           ;SW.c: 95:         if (index == SW_PLUS)
   516  06B7  0877               	movf	SW_Update@index,w
   517  06B8  1D03               	btfss	3,2
   518  06B9  2EBB               	goto	u201
   519  06BA  2EBC               	goto	u200
   520  06BB                     u201:	
   521  06BB  2ED1               	goto	l818
   522  06BC                     u200:	
   523  06BC                     l816:	
   524                           
   525                           ;SW.c: 96:         {;SW.c: 97:             SWs_Info[index].sw_samples[1] = (((((PORTB)))
      +                           & (1 << ((0)))) >> (((0))));
   526  06BC  1283               	bcf	3,5	;RP0=0, select bank0
   527  06BD  1303               	bcf	3,6	;RP1=0, select bank0
   528  06BE  0806               	movf	6,w	;volatile
   529  06BF  3901               	andlw	1
   530  06C0  00F4               	movwf	??_SW_Update
   531  06C1  3003               	movlw	3
   532  06C2  00F5               	movwf	??_SW_Update+1
   533  06C3  0875               	movf	??_SW_Update+1,w
   534  06C4  00F0               	movwf	___bmul@multiplicand
   535  06C5  0877               	movf	SW_Update@index,w
   536  06C6  120A  118A  2646  120A  118A  	fcall	___bmul
   537  06CB  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
   538  06CC  0084               	movwf	4
   539  06CD  0874               	movf	??_SW_Update,w
   540  06CE  1383               	bcf	3,7	;select IRP bank0
   541  06CF  0080               	movwf	0
   542                           
   543                           ;SW.c: 98:         } else if (index == SW_MINUS)
   544  06D0  2FC1               	goto	l848
   545  06D1                     l818:	
   546  06D1  0377               	decf	SW_Update@index,w
   547  06D2  1D03               	btfss	3,2
   548  06D3  2ED5               	goto	u211
   549  06D4  2ED6               	goto	u210
   550  06D5                     u211:	
   551  06D5  2EEE               	goto	l822
   552  06D6                     u210:	
   553  06D6                     l820:	
   554                           
   555                           ;SW.c: 99:         {;SW.c: 100:             SWs_Info[index].sw_samples[1] = (((((PORTB))
      +                          ) & (1 << ((1)))) >> (((1))));
   556  06D6  1283               	bcf	3,5	;RP0=0, select bank0
   557  06D7  1303               	bcf	3,6	;RP1=0, select bank0
   558  06D8  0806               	movf	6,w	;volatile
   559  06D9  00F4               	movwf	??_SW_Update
   560  06DA  1003               	clrc
   561  06DB  0C74               	rrf	??_SW_Update,w
   562  06DC  3901               	andlw	1
   563  06DD  00F5               	movwf	??_SW_Update+1
   564  06DE  3003               	movlw	3
   565  06DF  00F6               	movwf	??_SW_Update+2
   566  06E0  0876               	movf	??_SW_Update+2,w
   567  06E1  00F0               	movwf	___bmul@multiplicand
   568  06E2  0877               	movf	SW_Update@index,w
   569  06E3  120A  118A  2646  120A  118A  	fcall	___bmul
   570  06E8  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
   571  06E9  0084               	movwf	4
   572  06EA  0875               	movf	??_SW_Update+1,w
   573  06EB  1383               	bcf	3,7	;select IRP bank0
   574  06EC  0080               	movwf	0
   575                           
   576                           ;SW.c: 101:         } else if (index == SW_PRESURE)
   577  06ED  2FC1               	goto	l848
   578  06EE                     l822:	
   579  06EE  3002               	movlw	2
   580  06EF  0677               	xorwf	SW_Update@index,w
   581  06F0  1D03               	btfss	3,2
   582  06F1  2EF3               	goto	u221
   583  06F2  2EF4               	goto	u220
   584  06F3                     u221:	
   585  06F3  2F11               	goto	l43
   586  06F4                     u220:	
   587  06F4                     l824:	
   588                           
   589                           ;SW.c: 102:         {;SW.c: 103:             SWs_Info[index].sw_samples[1] = (((((PORTB)
      +                          )) & (1 << ((2)))) >> (((2))));
   590  06F4  1283               	bcf	3,5	;RP0=0, select bank0
   591  06F5  1303               	bcf	3,6	;RP1=0, select bank0
   592  06F6  0806               	movf	6,w	;volatile
   593  06F7  00F4               	movwf	??_SW_Update
   594  06F8  3002               	movlw	2
   595  06F9                     u235:	
   596  06F9  1003               	clrc
   597  06FA  0CF4               	rrf	??_SW_Update,f
   598  06FB  3EFF               	addlw	-1
   599  06FC  1D03               	skipz
   600  06FD  2EF9               	goto	u235
   601  06FE  0874               	movf	??_SW_Update,w
   602  06FF  3901               	andlw	1
   603  0700  00F5               	movwf	??_SW_Update+1
   604  0701  3003               	movlw	3
   605  0702  00F6               	movwf	??_SW_Update+2
   606  0703  0876               	movf	??_SW_Update+2,w
   607  0704  00F0               	movwf	___bmul@multiplicand
   608  0705  0877               	movf	SW_Update@index,w
   609  0706  120A  118A  2646  120A  118A  	fcall	___bmul
   610  070B  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
   611  070C  0084               	movwf	4
   612  070D  0875               	movf	??_SW_Update+1,w
   613  070E  1383               	bcf	3,7	;select IRP bank0
   614  070F  0080               	movwf	0
   615                           
   616                           ;SW.c: 104:         } else
   617  0710  2FC1               	goto	l848
   618  0711                     l43:	
   619                           
   620                           ;SW.c: 112:         switch(SWs_Info[index].sw_state)
   621  0711  2FC1               	goto	l848
   622  0712                     l826:	
   623                           
   624                           ;SW.c: 117:                 if ((SWs_Info[index].sw_samples[0] == (0)) &&
   625  0712  3003               	movlw	3
   626  0713  00F4               	movwf	??_SW_Update
   627  0714  0874               	movf	??_SW_Update,w
   628  0715  00F0               	movwf	___bmul@multiplicand
   629  0716  0877               	movf	SW_Update@index,w
   630  0717  120A  118A  2646  120A  118A  	fcall	___bmul
   631  071C  3E20               	addlw	(low (_SWs_Info| 0))& (0+255)
   632  071D  0084               	movwf	4
   633  071E  1383               	bcf	3,7	;select IRP bank0
   634  071F  0800               	movf	0,w
   635  0720  1D03               	btfss	3,2
   636  0721  2F23               	goto	u241
   637  0722  2F24               	goto	u240
   638  0723                     u241:	
   639  0723  2FE4               	goto	l850
   640  0724                     u240:	
   641  0724                     l828:	
   642  0724  3003               	movlw	3
   643  0725  00F4               	movwf	??_SW_Update
   644  0726  0874               	movf	??_SW_Update,w
   645  0727  00F0               	movwf	___bmul@multiplicand
   646  0728  0877               	movf	SW_Update@index,w
   647  0729  120A  118A  2646  120A  118A  	fcall	___bmul
   648  072E  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
   649  072F  0084               	movwf	4
   650  0730  1383               	bcf	3,7	;select IRP bank0
   651  0731  0800               	movf	0,w
   652  0732  1D03               	btfss	3,2
   653  0733  2F35               	goto	u251
   654  0734  2F36               	goto	u250
   655  0735                     u251:	
   656  0735  2FE4               	goto	l850
   657  0736                     u250:	
   658  0736                     l830:	
   659                           
   660                           ;SW.c: 119:                 {;SW.c: 120:                     SWs_Info[index].sw_state = 
      +                          SW_PRE_PRESSED;
   661  0736  3003               	movlw	3
   662  0737  00F4               	movwf	??_SW_Update
   663  0738  0874               	movf	??_SW_Update,w
   664  0739  00F0               	movwf	___bmul@multiplicand
   665  073A  0877               	movf	SW_Update@index,w
   666  073B  120A  118A  2646  120A  118A  	fcall	___bmul
   667  0740  3E22               	addlw	(low ((_SWs_Info| 0+2)))& (0+255)
   668  0741  0084               	movwf	4
   669  0742  1383               	bcf	3,7	;select IRP bank0
   670  0743  0180               	clrf	0
   671  0744  0A80               	incf	0,f
   672                           
   673                           ;SW.c: 121:                 } else
   674  0745  2FE4               	goto	l850
   675  0746                     l832:	
   676                           
   677                           ;SW.c: 128:                 if (SWs_Info[index].sw_samples[1] == (0))
   678  0746  3003               	movlw	3
   679  0747  00F4               	movwf	??_SW_Update
   680  0748  0874               	movf	??_SW_Update,w
   681  0749  00F0               	movwf	___bmul@multiplicand
   682  074A  0877               	movf	SW_Update@index,w
   683  074B  120A  118A  2646  120A  118A  	fcall	___bmul
   684  0750  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
   685  0751  0084               	movwf	4
   686  0752  1383               	bcf	3,7	;select IRP bank0
   687  0753  0800               	movf	0,w
   688  0754  1D03               	btfss	3,2
   689  0755  2F57               	goto	u261
   690  0756  2F58               	goto	u260
   691  0757                     u261:	
   692  0757  2FE4               	goto	l850
   693  0758                     u260:	
   694  0758                     l834:	
   695                           
   696                           ;SW.c: 129:                 {;SW.c: 130:                     SWs_Info[index].sw_state = 
      +                          SW_PRESSED;
   697  0758  3002               	movlw	2
   698  0759  00F4               	movwf	??_SW_Update
   699  075A  3003               	movlw	3
   700  075B  00F5               	movwf	??_SW_Update+1
   701  075C  0875               	movf	??_SW_Update+1,w
   702  075D  00F0               	movwf	___bmul@multiplicand
   703  075E  0877               	movf	SW_Update@index,w
   704  075F  120A  118A  2646  120A  118A  	fcall	___bmul
   705  0764  3E22               	addlw	(low ((_SWs_Info| 0+2)))& (0+255)
   706  0765  0084               	movwf	4
   707  0766  0874               	movf	??_SW_Update,w
   708  0767  1383               	bcf	3,7	;select IRP bank0
   709  0768  0080               	movwf	0
   710                           
   711                           ;SW.c: 131:                 } else
   712  0769  2FE4               	goto	l850
   713  076A                     l836:	
   714                           
   715                           ;SW.c: 138:                 if ((SWs_Info[index].sw_samples[0] == (1)) &&
   716  076A  3003               	movlw	3
   717  076B  00F4               	movwf	??_SW_Update
   718  076C  0874               	movf	??_SW_Update,w
   719  076D  00F0               	movwf	___bmul@multiplicand
   720  076E  0877               	movf	SW_Update@index,w
   721  076F  120A  118A  2646  120A  118A  	fcall	___bmul
   722  0774  3E20               	addlw	(low (_SWs_Info| 0))& (0+255)
   723  0775  0084               	movwf	4
   724  0776  1383               	bcf	3,7	;select IRP bank0
   725  0777  0300               	decf	0,w
   726  0778  1D03               	btfss	3,2
   727  0779  2F7B               	goto	u271
   728  077A  2F7C               	goto	u270
   729  077B                     u271:	
   730  077B  2FE4               	goto	l850
   731  077C                     u270:	
   732  077C                     l838:	
   733  077C  3003               	movlw	3
   734  077D  00F4               	movwf	??_SW_Update
   735  077E  0874               	movf	??_SW_Update,w
   736  077F  00F0               	movwf	___bmul@multiplicand
   737  0780  0877               	movf	SW_Update@index,w
   738  0781  120A  118A  2646  120A  118A  	fcall	___bmul
   739  0786  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
   740  0787  0084               	movwf	4
   741  0788  1383               	bcf	3,7	;select IRP bank0
   742  0789  0300               	decf	0,w
   743  078A  1D03               	btfss	3,2
   744  078B  2F8D               	goto	u281
   745  078C  2F8E               	goto	u280
   746  078D                     u281:	
   747  078D  2FE4               	goto	l850
   748  078E                     u280:	
   749  078E                     l840:	
   750                           
   751                           ;SW.c: 140:                 {;SW.c: 141:                     SWs_Info[index].sw_state = 
      +                          SW_PRE_RELEASED;
   752  078E  3003               	movlw	3
   753  078F  00F4               	movwf	??_SW_Update
   754  0790  3003               	movlw	3
   755  0791  00F5               	movwf	??_SW_Update+1
   756  0792  0875               	movf	??_SW_Update+1,w
   757  0793  00F0               	movwf	___bmul@multiplicand
   758  0794  0877               	movf	SW_Update@index,w
   759  0795  120A  118A  2646  120A  118A  	fcall	___bmul
   760  079A  3E22               	addlw	(low ((_SWs_Info| 0+2)))& (0+255)
   761  079B  0084               	movwf	4
   762  079C  0874               	movf	??_SW_Update,w
   763  079D  1383               	bcf	3,7	;select IRP bank0
   764  079E  0080               	movwf	0
   765                           
   766                           ;SW.c: 142:                 }
   767  079F  2FE4               	goto	l850
   768  07A0                     l842:	
   769                           
   770                           ;SW.c: 150:                 if (SWs_Info[index].sw_samples[1] == (1))
   771  07A0  3003               	movlw	3
   772  07A1  00F4               	movwf	??_SW_Update
   773  07A2  0874               	movf	??_SW_Update,w
   774  07A3  00F0               	movwf	___bmul@multiplicand
   775  07A4  0877               	movf	SW_Update@index,w
   776  07A5  120A  118A  2646  120A  118A  	fcall	___bmul
   777  07AA  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
   778  07AB  0084               	movwf	4
   779  07AC  1383               	bcf	3,7	;select IRP bank0
   780  07AD  0300               	decf	0,w
   781  07AE  1D03               	btfss	3,2
   782  07AF  2FB1               	goto	u291
   783  07B0  2FB2               	goto	u290
   784  07B1                     u291:	
   785  07B1  2FE4               	goto	l850
   786  07B2                     u290:	
   787  07B2                     l844:	
   788                           
   789                           ;SW.c: 151:                 {;SW.c: 152:                     SWs_Info[index].sw_state = 
      +                          SW_RELEASED;
   790  07B2  3003               	movlw	3
   791  07B3  00F4               	movwf	??_SW_Update
   792  07B4  0874               	movf	??_SW_Update,w
   793  07B5  00F0               	movwf	___bmul@multiplicand
   794  07B6  0877               	movf	SW_Update@index,w
   795  07B7  120A  118A  2646  120A  118A  	fcall	___bmul
   796  07BC  3E22               	addlw	(low ((_SWs_Info| 0+2)))& (0+255)
   797  07BD  0084               	movwf	4
   798  07BE  1383               	bcf	3,7	;select IRP bank0
   799  07BF  0180               	clrf	0
   800                           
   801                           ;SW.c: 153:                 } else
   802  07C0  2FE4               	goto	l850
   803  07C1                     l848:	
   804  07C1  3003               	movlw	3
   805  07C2  00F4               	movwf	??_SW_Update
   806  07C3  0874               	movf	??_SW_Update,w
   807  07C4  00F0               	movwf	___bmul@multiplicand
   808  07C5  0877               	movf	SW_Update@index,w
   809  07C6  120A  118A  2646  120A  118A  	fcall	___bmul
   810  07CB  3E22               	addlw	(low ((_SWs_Info| 0+2)))& (0+255)
   811  07CC  0084               	movwf	4
   812  07CD  1383               	bcf	3,7	;select IRP bank0
   813  07CE  0800               	movf	0,w
   814  07CF  00F5               	movwf	??_SW_Update+1
   815  07D0  01F6               	clrf	??_SW_Update+2
   816                           
   817                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   818                           ; Switch size 1, requested type "simple"
   819                           ; Number of cases is 1, Range of values is 0 to 0
   820                           ; switch strategies available:
   821                           ; Name         Instructions Cycles
   822                           ; simple_byte            4     3 (average)
   823                           ; direct_byte           11     8 (fixed)
   824                           ; jumptable            260     6 (fixed)
   825                           ;	Chosen strategy is simple_byte
   826  07D1  0876               	movf	??_SW_Update+2,w
   827  07D2  3A00               	xorlw	0	; case 0
   828  07D3  1903               	skipnz
   829  07D4  2FD6               	goto	l914
   830  07D5  2FE4               	goto	l850
   831  07D6                     l914:	
   832                           
   833                           ; Switch size 1, requested type "simple"
   834                           ; Number of cases is 4, Range of values is 0 to 3
   835                           ; switch strategies available:
   836                           ; Name         Instructions Cycles
   837                           ; simple_byte           13     7 (average)
   838                           ; direct_byte           20     8 (fixed)
   839                           ; jumptable            260     6 (fixed)
   840                           ;	Chosen strategy is simple_byte
   841  07D6  0875               	movf	??_SW_Update+1,w
   842  07D7  3A00               	xorlw	0	; case 0
   843  07D8  1903               	skipnz
   844  07D9  2F12               	goto	l826
   845  07DA  3A01               	xorlw	1	; case 1
   846  07DB  1903               	skipnz
   847  07DC  2F46               	goto	l832
   848  07DD  3A03               	xorlw	3	; case 2
   849  07DE  1903               	skipnz
   850  07DF  2F6A               	goto	l836
   851  07E0  3A01               	xorlw	1	; case 3
   852  07E1  1903               	skipnz
   853  07E2  2FA0               	goto	l842
   854  07E3  2FE4               	goto	l850
   855  07E4                     l850:	
   856                           
   857                           ;SW.c: 163:     }
   858  07E4  3001               	movlw	1
   859  07E5  00F4               	movwf	??_SW_Update
   860  07E6  0874               	movf	??_SW_Update,w
   861  07E7  07F7               	addwf	SW_Update@index,f
   862  07E8                     l852:	
   863  07E8  3003               	movlw	3
   864  07E9  0277               	subwf	SW_Update@index,w
   865  07EA  1C03               	skipc
   866  07EB  2FED               	goto	u301
   867  07EC  2FEE               	goto	u300
   868  07ED                     u301:	
   869  07ED  2E99               	goto	l812
   870  07EE                     u300:	
   871  07EE                     l39:	
   872  07EE  0008               	return
   873  07EF                     __end_of_SW_Update:	
   874                           
   875                           	psect	text2
   876  0636                     __ptext2:	
   877 ;; *************** function _SW_GetState *****************
   878 ;; Defined at:
   879 ;;		line 61 in file "SW.c"
   880 ;; Parameters:    Size  Location     Type
   881 ;;  sw              1    wreg     enum E852
   882 ;; Auto vars:     Size  Location     Type
   883 ;;  sw              1    5[COMMON] enum E852
   884 ;; Return value:  Size  Location     Type
   885 ;;                  1    wreg      enum E1038
   886 ;; Registers used:
   887 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   888 ;; Tracked objects:
   889 ;;		On entry : 0/0
   890 ;;		On exit  : 0/0
   891 ;;		Unchanged: 0/0
   892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   893 ;;      Params:         0       0       0       0       0
   894 ;;      Locals:         1       0       0       0       0
   895 ;;      Temps:          1       0       0       0       0
   896 ;;      Totals:         2       0       0       0       0
   897 ;;Total ram usage:        2 bytes
   898 ;; Hardware stack levels used:    1
   899 ;; Hardware stack levels required when called:    1
   900 ;; This function calls:
   901 ;;		___bmul
   902 ;; This function is called by:
   903 ;;		_main
   904 ;; This function uses a non-reentrant model
   905 ;;
   906                           
   907                           
   908                           ;psect for function _SW_GetState
   909  0636                     _SW_GetState:	
   910                           
   911                           ;incstack = 0
   912                           ; Regs used in _SW_GetState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   913                           ;SW_GetState@sw stored from wreg
   914  0636  00F5               	movwf	SW_GetState@sw
   915  0637                     l858:	
   916                           
   917                           ;SW.c: 61: tSW_State SW_GetState(tSW sw);SW.c: 62: {;SW.c: 65:     return SWs_Info[sw].s
      +                          w_state;
   918  0637  3003               	movlw	3
   919  0638  00F4               	movwf	??_SW_GetState
   920  0639  0874               	movf	??_SW_GetState,w
   921  063A  00F0               	movwf	___bmul@multiplicand
   922  063B  0875               	movf	SW_GetState@sw,w
   923  063C  120A  118A  2646  120A  118A  	fcall	___bmul
   924  0641  3E22               	addlw	(low ((_SWs_Info| 0+2)))& (0+255)
   925  0642  0084               	movwf	4
   926  0643  1383               	bcf	3,7	;select IRP bank0
   927  0644  0800               	movf	0,w
   928  0645                     l33:	
   929  0645  0008               	return
   930  0646                     __end_of_SW_GetState:	
   931                           
   932                           	psect	text3
   933  0646                     __ptext3:	
   934 ;; *************** function ___bmul *****************
   935 ;; Defined at:
   936 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c"
   937 ;; Parameters:    Size  Location     Type
   938 ;;  multiplier      1    wreg     unsigned char 
   939 ;;  multiplicand    1    0[COMMON] unsigned char 
   940 ;; Auto vars:     Size  Location     Type
   941 ;;  multiplier      1    3[COMMON] unsigned char 
   942 ;;  product         1    2[COMMON] unsigned char 
   943 ;; Return value:  Size  Location     Type
   944 ;;                  1    wreg      unsigned char 
   945 ;; Registers used:
   946 ;;		wreg, status,2, status,0
   947 ;; Tracked objects:
   948 ;;		On entry : 0/0
   949 ;;		On exit  : 0/0
   950 ;;		Unchanged: 0/0
   951 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   952 ;;      Params:         1       0       0       0       0
   953 ;;      Locals:         2       0       0       0       0
   954 ;;      Temps:          1       0       0       0       0
   955 ;;      Totals:         4       0       0       0       0
   956 ;;Total ram usage:        4 bytes
   957 ;; Hardware stack levels used:    1
   958 ;; This function calls:
   959 ;;		Nothing
   960 ;; This function is called by:
   961 ;;		_SW_GetState
   962 ;;		_SW_Update
   963 ;;		_SW_Init
   964 ;; This function uses a non-reentrant model
   965 ;;
   966                           
   967                           
   968                           ;psect for function ___bmul
   969  0646                     ___bmul:	
   970                           
   971                           ;incstack = 0
   972                           ; Regs used in ___bmul: [wreg+status,2+status,0]
   973                           ;___bmul@multiplier stored from wreg
   974  0646  00F3               	movwf	___bmul@multiplier
   975  0647                     l784:	
   976  0647  01F2               	clrf	___bmul@product
   977  0648                     l786:	
   978  0648  1C73               	btfss	___bmul@multiplier,0
   979  0649  2E4B               	goto	u171
   980  064A  2E4C               	goto	u170
   981  064B                     u171:	
   982  064B  2E50               	goto	l790
   983  064C                     u170:	
   984  064C                     l788:	
   985  064C  0870               	movf	___bmul@multiplicand,w
   986  064D  00F1               	movwf	??___bmul
   987  064E  0871               	movf	??___bmul,w
   988  064F  07F2               	addwf	___bmul@product,f
   989  0650                     l790:	
   990  0650  1003               	clrc
   991  0651  0DF0               	rlf	___bmul@multiplicand,f
   992  0652                     l792:	
   993  0652  1003               	clrc
   994  0653  0CF3               	rrf	___bmul@multiplier,f
   995  0654  0873               	movf	___bmul@multiplier,w
   996  0655  1D03               	btfss	3,2
   997  0656  2E58               	goto	u181
   998  0657  2E59               	goto	u180
   999  0658                     u181:	
  1000  0658  2E48               	goto	l786
  1001  0659                     u180:	
  1002  0659                     l794:	
  1003  0659  0872               	movf	___bmul@product,w
  1004  065A                     l174:	
  1005  065A  0008               	return
  1006  065B                     __end_of___bmul:	
  1007  007E                     btemp	set	126	;btemp
  1008  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         11
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80      0       9
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_SW_Update
    _SW_Update->___bmul
    _SW_GetState->___bmul

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1711
                                              8 COMMON     2     2      0
                        _SW_GetState
                          _SW_Update
 ---------------------------------------------------------------------------------
 (1) _SW_Update                                            4     4      0    1077
                                              4 COMMON     4     4      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (1) _SW_GetState                                          2     2      0     634
                                              4 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     612
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SW_GetState
     ___bmul
   _SW_Update
     ___bmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      15       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       9       5       11.3%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      15      12        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Tue Jan 14 20:04:00 2020

         ___bmul@product 0072              __CFG_CP$OFF 0000      __end_of_SW_GetState 0646  
                     l33 0645                       l43 0711                       l39 07EE  
                    l174 065A                      l800 0688                      l802 068E  
                    l820 06D6                      l812 0699                      l830 0736  
                    l822 06EE                      l814 06B7                      l806 0696  
                    l840 078E                      l832 0746                      l824 06F4  
                    l816 06BC                      l914 07D6                      l842 07A0  
                    l834 0758                      l850 07E4                      l826 0712  
                    l818 06D1                      l852 07E8                      l844 07B2  
                    l836 076A                      l828 0724                      l790 0650  
                    l838 077C                      l870 0674                      l862 065B  
                    l792 0652                      l784 0647                      l848 07C1  
                    l872 067F                      l864 0660                      l794 0659  
                    l786 0648                      l858 0637                      l866 0669  
                    l788 064C                      l868 066E                      l798 0688  
                    u200 06BC                      u201 06BB                      u210 06D6  
                    u211 06D5                      u300 07EE                      u220 06F4  
                    u301 07ED                      u221 06F3                      u310 067F  
                    u311 067E                      u240 0724                      u241 0723  
                    u170 064C                      u250 0736                      u171 064B  
                    u251 0735                      u235 06F9                      u180 0659  
                    u260 0758                      u181 0658                      u261 0757  
                    u270 077C                      u190 0695                      u271 077B  
                    u191 0694                      u280 078E                      u281 078D  
                    u337 0664                      u290 07B2             __CFG_CPD$OFF 0000  
                    u291 07B1                      fsr0 0004                      indf 0000  
    SW_Update@SW_counter 007A             __CFG_FOSC$XT 0000             __CFG_LVP$OFF 0000  
           __CFG_WRT$OFF 0000                     _main 065B                     btemp 007E  
                   start 0000        ___bmul@multiplier 0073                    ?_main 0070  
          __CFG_WDTE$OFF 0000                    _PORTB 0006                    _TRISB 0086  
         __CFG_BOREN$OFF 0000                    status 0003                    wtemp0 007E  
            _SW_GetState 0636          __initialization 07EF             __end_of_main 0688  
                 ??_main 0078       __size_of_SW_Update 0167           SW_Update@index 0077  
         __CFG_PWRTE$OFF 0000                   ___bmul 0646  __end_of__initialization 07FC  
      __end_of_SW_Update 07EF      ___bmul@multiplicand 0070           __pcstackCOMMON 0070  
          SW_GetState@sw 0075               __pbssBANK0 0020               __pmaintext 065B  
                ?___bmul 0070             ?_SW_GetState 0070          __size_of___bmul 0015  
                __ptext1 0688                  __ptext2 0636                  __ptext3 0646  
   end_of_initialization 07FC                _SW_Update 0688           __end_of___bmul 065B  
    start_initialization 07EF                 ??___bmul 0071     __size_of_SW_GetState 0010  
             ?_SW_Update 0070              __pbssCOMMON 007A                ___latbits 0002  
            ??_SW_Update 0074                 _SWs_Info 0020            __size_of_main 002D  
          ??_SW_GetState 0074  
