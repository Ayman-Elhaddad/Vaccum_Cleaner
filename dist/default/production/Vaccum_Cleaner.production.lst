

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Wed Jan 15 01:18:42 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	dabs	1,0x7E,2
    22  0000                     
    23                           ; Version 2.10
    24                           ; Generated 31/07/2019 GMT
    25                           ; 
    26                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F877A Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     	;# 
    58  0001                     	;# 
    59  0002                     	;# 
    60  0003                     	;# 
    61  0004                     	;# 
    62  0005                     	;# 
    63  0006                     	;# 
    64  0007                     	;# 
    65  0008                     	;# 
    66  0009                     	;# 
    67  000A                     	;# 
    68  000B                     	;# 
    69  000C                     	;# 
    70  000D                     	;# 
    71  000E                     	;# 
    72  000E                     	;# 
    73  000F                     	;# 
    74  0010                     	;# 
    75  0011                     	;# 
    76  0012                     	;# 
    77  0013                     	;# 
    78  0014                     	;# 
    79  0015                     	;# 
    80  0015                     	;# 
    81  0016                     	;# 
    82  0017                     	;# 
    83  0018                     	;# 
    84  0019                     	;# 
    85  001A                     	;# 
    86  001B                     	;# 
    87  001B                     	;# 
    88  001C                     	;# 
    89  001D                     	;# 
    90  001E                     	;# 
    91  001F                     	;# 
    92  0081                     	;# 
    93  0085                     	;# 
    94  0086                     	;# 
    95  0087                     	;# 
    96  0088                     	;# 
    97  0089                     	;# 
    98  008C                     	;# 
    99  008D                     	;# 
   100  008E                     	;# 
   101  0091                     	;# 
   102  0092                     	;# 
   103  0093                     	;# 
   104  0094                     	;# 
   105  0098                     	;# 
   106  0099                     	;# 
   107  009C                     	;# 
   108  009D                     	;# 
   109  009E                     	;# 
   110  009F                     	;# 
   111  010C                     	;# 
   112  010D                     	;# 
   113  010E                     	;# 
   114  010F                     	;# 
   115  018C                     	;# 
   116  018D                     	;# 
   117  0000                     	;# 
   118  0001                     	;# 
   119  0002                     	;# 
   120  0003                     	;# 
   121  0004                     	;# 
   122  0005                     	;# 
   123  0006                     	;# 
   124  0007                     	;# 
   125  0008                     	;# 
   126  0009                     	;# 
   127  000A                     	;# 
   128  000B                     	;# 
   129  000C                     	;# 
   130  000D                     	;# 
   131  000E                     	;# 
   132  000E                     	;# 
   133  000F                     	;# 
   134  0010                     	;# 
   135  0011                     	;# 
   136  0012                     	;# 
   137  0013                     	;# 
   138  0014                     	;# 
   139  0015                     	;# 
   140  0015                     	;# 
   141  0016                     	;# 
   142  0017                     	;# 
   143  0018                     	;# 
   144  0019                     	;# 
   145  001A                     	;# 
   146  001B                     	;# 
   147  001B                     	;# 
   148  001C                     	;# 
   149  001D                     	;# 
   150  001E                     	;# 
   151  001F                     	;# 
   152  0081                     	;# 
   153  0085                     	;# 
   154  0086                     	;# 
   155  0087                     	;# 
   156  0088                     	;# 
   157  0089                     	;# 
   158  008C                     	;# 
   159  008D                     	;# 
   160  008E                     	;# 
   161  0091                     	;# 
   162  0092                     	;# 
   163  0093                     	;# 
   164  0094                     	;# 
   165  0098                     	;# 
   166  0099                     	;# 
   167  009C                     	;# 
   168  009D                     	;# 
   169  009E                     	;# 
   170  009F                     	;# 
   171  010C                     	;# 
   172  010D                     	;# 
   173  010E                     	;# 
   174  010F                     	;# 
   175  018C                     	;# 
   176  018D                     	;# 
   177  0000                     	;# 
   178  0001                     	;# 
   179  0002                     	;# 
   180  0003                     	;# 
   181  0004                     	;# 
   182  0005                     	;# 
   183  0006                     	;# 
   184  0007                     	;# 
   185  0008                     	;# 
   186  0009                     	;# 
   187  000A                     	;# 
   188  000B                     	;# 
   189  000C                     	;# 
   190  000D                     	;# 
   191  000E                     	;# 
   192  000E                     	;# 
   193  000F                     	;# 
   194  0010                     	;# 
   195  0011                     	;# 
   196  0012                     	;# 
   197  0013                     	;# 
   198  0014                     	;# 
   199  0015                     	;# 
   200  0015                     	;# 
   201  0016                     	;# 
   202  0017                     	;# 
   203  0018                     	;# 
   204  0019                     	;# 
   205  001A                     	;# 
   206  001B                     	;# 
   207  001B                     	;# 
   208  001C                     	;# 
   209  001D                     	;# 
   210  001E                     	;# 
   211  001F                     	;# 
   212  0081                     	;# 
   213  0085                     	;# 
   214  0086                     	;# 
   215  0087                     	;# 
   216  0088                     	;# 
   217  0089                     	;# 
   218  008C                     	;# 
   219  008D                     	;# 
   220  008E                     	;# 
   221  0091                     	;# 
   222  0092                     	;# 
   223  0093                     	;# 
   224  0094                     	;# 
   225  0098                     	;# 
   226  0099                     	;# 
   227  009C                     	;# 
   228  009D                     	;# 
   229  009E                     	;# 
   230  009F                     	;# 
   231  010C                     	;# 
   232  010D                     	;# 
   233  010E                     	;# 
   234  010F                     	;# 
   235  018C                     	;# 
   236  018D                     	;# 
   237  0000                     	;# 
   238  0001                     	;# 
   239  0002                     	;# 
   240  0003                     	;# 
   241  0004                     	;# 
   242  0005                     	;# 
   243  0006                     	;# 
   244  0007                     	;# 
   245  0008                     	;# 
   246  0009                     	;# 
   247  000A                     	;# 
   248  000B                     	;# 
   249  000C                     	;# 
   250  000D                     	;# 
   251  000E                     	;# 
   252  000E                     	;# 
   253  000F                     	;# 
   254  0010                     	;# 
   255  0011                     	;# 
   256  0012                     	;# 
   257  0013                     	;# 
   258  0014                     	;# 
   259  0015                     	;# 
   260  0015                     	;# 
   261  0016                     	;# 
   262  0017                     	;# 
   263  0018                     	;# 
   264  0019                     	;# 
   265  001A                     	;# 
   266  001B                     	;# 
   267  001B                     	;# 
   268  001C                     	;# 
   269  001D                     	;# 
   270  001E                     	;# 
   271  001F                     	;# 
   272  0081                     	;# 
   273  0085                     	;# 
   274  0086                     	;# 
   275  0087                     	;# 
   276  0088                     	;# 
   277  0089                     	;# 
   278  008C                     	;# 
   279  008D                     	;# 
   280  008E                     	;# 
   281  0091                     	;# 
   282  0092                     	;# 
   283  0093                     	;# 
   284  0094                     	;# 
   285  0098                     	;# 
   286  0099                     	;# 
   287  009C                     	;# 
   288  009D                     	;# 
   289  009E                     	;# 
   290  009F                     	;# 
   291  010C                     	;# 
   292  010D                     	;# 
   293  010E                     	;# 
   294  010F                     	;# 
   295  018C                     	;# 
   296  018D                     	;# 
   297                           
   298                           	psect	idataBANK0
   299  0479                     __pidataBANK0:	
   300                           
   301                           ;initializer for _SSD_Data
   302  0479  3408               	retlw	8
   303  047A  3448               	retlw	72
   304  047B  3449               	retlw	73
   305  047C  3400               	retlw	0
   306                           
   307                           ;initializer for _SSD_Values
   308  047D  3403               	retlw	3
   309  047E  3400               	retlw	0
   310  047F  3400               	retlw	0
   311  0008                     _PORTD	set	8
   312  0006                     _PORTB	set	6
   313  0088                     _TRISD	set	136
   314  0086                     _TRISB	set	134
   315                           
   316                           ; #config settings
   317  0000                     
   318                           	psect	cinit
   319  07E0                     start_initialization:	
   320  07E0                     __initialization:	
   321                           
   322                           ; Initialize objects allocated to BANK0
   323  07E0  1383               	bcf	3,7	;select IRP bank0
   324  07E1  3032               	movlw	low (__pdataBANK0+7)
   325  07E2  00FD               	movwf	btemp+-1
   326  07E3  3004               	movlw	high __pidataBANK0
   327  07E4  00FE               	movwf	btemp
   328  07E5  3079               	movlw	low __pidataBANK0
   329  07E6  00FF               	movwf	btemp+1
   330  07E7  302B               	movlw	low __pdataBANK0
   331  07E8  0084               	movwf	4
   332  07E9  120A  118A  249E  120A  118A  	fcall	init_ram0
   333                           
   334                           ; Clear objects allocated to BANK0
   335  07EE  01A0               	clrf	__pbssBANK0& (0+127)
   336  07EF  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   337  07F0  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   338  07F1  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   339  07F2  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   340  07F3  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   341  07F4  01A6               	clrf	(__pbssBANK0+6)& (0+127)
   342  07F5  01A7               	clrf	(__pbssBANK0+7)& (0+127)
   343  07F6  01A8               	clrf	(__pbssBANK0+8)& (0+127)
   344  07F7  01A9               	clrf	(__pbssBANK0+9)& (0+127)
   345  07F8  01AA               	clrf	(__pbssBANK0+10)& (0+127)
   346                           
   347                           ; Clear objects allocated to COMMON
   348  07F9  01FB               	clrf	__pbssCOMMON& (0+127)
   349  07FA  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
   350  07FB  01FD               	clrf	(__pbssCOMMON+2)& (0+127)
   351  07FC                     end_of_initialization:	
   352                           ;End of C runtime variable initialization code
   353                           
   354  07FC                     __end_of__initialization:	
   355  07FC  0183               	clrf	3
   356  07FD  120A  118A  2DE1   	ljmp	_main	;jump to C main() function
   357                           
   358                           	psect	bssCOMMON
   359  007B                     __pbssCOMMON:	
   360  007B                     SW_Update@SW_counter:	
   361  007B                     	ds	2
   362  007D                     _SSD_current:	
   363  007D                     	ds	1
   364                           
   365                           	psect	bssBANK0
   366  0020                     __pbssBANK0:	
   367  0020                     _SWs_Info:	
   368  0020                     	ds	9
   369  0029                     SSD_Update@SSD_counter:	
   370  0029                     	ds	2
   371                           
   372                           	psect	dataBANK0
   373  002B                     __pdataBANK0:	
   374  002B                     _SSD_Data:	
   375  002B                     	ds	4
   376  002F                     _SSD_Values:	
   377  002F                     	ds	3
   378                           
   379                           	psect	inittext
   380  049A                     init_fetch0:	
   381                           ;	Called with low address in FSR and high address in W
   382                           
   383  049A  087E               	movf	btemp,w
   384  049B  008A               	movwf	10
   385  049C  087F               	movf	btemp+1,w
   386  049D  0082               	movwf	2
   387  049E                     init_ram0:	
   388                           ;Called with:
   389                           ;	high address of idata address in btemp 
   390                           ;	low address of idata address in btemp+1 
   391                           ;	low address of data in FSR
   392                           ;	high address + 1 of data in btemp-1
   393                           
   394  049E  120A  118A  249A  120A  118A  	fcall	init_fetch0
   395  04A3  0080               	movwf	0
   396  04A4  0A84               	incf	4,f
   397  04A5  0804               	movf	4,w
   398  04A6  067D               	xorwf	btemp+-1,w
   399  04A7  1903               	btfsc	3,2
   400  04A8  3400               	retlw	0
   401  04A9  0AFF               	incf	btemp+1,f
   402  04AA  1903               	btfsc	3,2
   403  04AB  0AFE               	incf	btemp,f
   404  04AC  2C9E               	goto	init_ram0
   405                           
   406                           	psect	cstackCOMMON
   407  0070                     __pcstackCOMMON:	
   408  0070                     ?_SW_Init:	
   409  0070                     ?_SSD_Init:	
   410                           ; 1 bytes @ 0x0
   411                           
   412  0070                     ?_SW_Update:	
   413                           ; 1 bytes @ 0x0
   414                           
   415  0070                     ?_SSD_Update:	
   416                           ; 1 bytes @ 0x0
   417                           
   418  0070                     ?_SW_GetState:	
   419                           ; 1 bytes @ 0x0
   420                           
   421  0070                     ?_SSD_SetValue:	
   422                           ; 1 bytes @ 0x0
   423                           
   424  0070                     ?_SSD_SetState:	
   425                           ; 1 bytes @ 0x0
   426                           
   427  0070                     ?___bmul:	
   428                           ; 1 bytes @ 0x0
   429                           
   430  0070                     ?_main:	
   431                           ; 1 bytes @ 0x0
   432                           
   433  0070                     SSD_SetValue@ssd_symbol:	
   434                           ; 2 bytes @ 0x0
   435                           
   436  0070                     SSD_SetState@state:	
   437                           ; 1 bytes @ 0x0
   438                           
   439  0070                     ___bmul@multiplicand:	
   440                           ; 1 bytes @ 0x0
   441                           
   442                           
   443                           ; 1 bytes @ 0x0
   444  0070                     	ds	1
   445  0071                     ??_SSD_SetValue:	
   446  0071                     ??_SSD_SetState:	
   447                           ; 1 bytes @ 0x1
   448                           
   449  0071                     ??___bmul:	
   450                           ; 1 bytes @ 0x1
   451                           
   452                           
   453                           ; 1 bytes @ 0x1
   454  0071                     	ds	1
   455  0072                     SSD_SetValue@ssd:	
   456  0072                     ___bmul@product:	
   457                           ; 1 bytes @ 0x2
   458                           
   459                           
   460                           ; 1 bytes @ 0x2
   461  0072                     	ds	1
   462  0073                     SSD_SetState@ssd:	
   463  0073                     ___bmul@multiplier:	
   464                           ; 1 bytes @ 0x3
   465                           
   466                           
   467                           ; 1 bytes @ 0x3
   468  0073                     	ds	1
   469  0074                     ??_SW_Init:	
   470  0074                     ??_SW_Update:	
   471                           ; 1 bytes @ 0x4
   472                           
   473  0074                     ??_SW_GetState:	
   474                           ; 1 bytes @ 0x4
   475                           
   476  0074                     ?_SSD_Out:	
   477                           ; 1 bytes @ 0x4
   478                           
   479  0074                     SSD_Out@ssd_symbol:	
   480                           ; 1 bytes @ 0x4
   481                           
   482                           
   483                           ; 1 bytes @ 0x4
   484  0074                     	ds	1
   485  0075                     ??_SSD_Out:	
   486  0075                     SW_Init@index:	
   487                           ; 1 bytes @ 0x5
   488                           
   489  0075                     SW_GetState@sw:	
   490                           ; 1 bytes @ 0x5
   491                           
   492  0075                     SSD_Out@ssd:	
   493                           ; 1 bytes @ 0x5
   494                           
   495                           
   496                           ; 1 bytes @ 0x5
   497  0075                     	ds	1
   498  0076                     ??_SSD_Init:	
   499  0076                     ??_SSD_Update:	
   500                           ; 1 bytes @ 0x6
   501                           
   502                           
   503                           ; 1 bytes @ 0x6
   504  0076                     	ds	1
   505  0077                     SW_Update@index:	
   506                           
   507                           ; 1 bytes @ 0x7
   508  0077                     	ds	2
   509  0079                     ??_main:	
   510                           
   511                           ; 1 bytes @ 0x9
   512  0079                     	ds	2
   513                           
   514                           	psect	maintext
   515  05E1                     __pmaintext:	
   516 ;;
   517 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   518 ;;
   519 ;; *************** function _main *****************
   520 ;; Defined at:
   521 ;;		line 9 in file "vaccum.c"
   522 ;; Parameters:    Size  Location     Type
   523 ;;		None
   524 ;; Auto vars:     Size  Location     Type
   525 ;;		None
   526 ;; Return value:  Size  Location     Type
   527 ;;                  2   20[None  ] int 
   528 ;; Registers used:
   529 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   530 ;; Tracked objects:
   531 ;;		On entry : B00/0
   532 ;;		On exit  : 0/0
   533 ;;		Unchanged: 0/0
   534 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   535 ;;      Params:         0       0       0       0       0
   536 ;;      Locals:         0       0       0       0       0
   537 ;;      Temps:          2       0       0       0       0
   538 ;;      Totals:         2       0       0       0       0
   539 ;;Total ram usage:        2 bytes
   540 ;; Hardware stack levels required when called:    3
   541 ;; This function calls:
   542 ;;		_SSD_Init
   543 ;;		_SSD_SetValue
   544 ;;		_SSD_Update
   545 ;;		_SW_GetState
   546 ;;		_SW_Init
   547 ;;		_SW_Update
   548 ;; This function is called by:
   549 ;;		Startup code after reset
   550 ;; This function uses a non-reentrant model
   551 ;;
   552                           
   553                           
   554                           ;psect for function _main
   555  05E1                     _main:	
   556  05E1                     l1124:	
   557                           ;incstack = 0
   558                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   559                           
   560                           
   561                           ;vaccum.c: 11:     SW_Init();
   562  05E1  120A  118A  259B  120A  118A  	fcall	_SW_Init
   563                           
   564                           ;vaccum.c: 12:     SSD_Init();
   565  05E6  120A  118A  2516  120A  118A  	fcall	_SSD_Init
   566  05EB                     l1126:	
   567                           
   568                           ;vaccum.c: 17:     {;vaccum.c: 18:         _delay((unsigned long)((1)*(80000000/4000.0))
      +                          );
   569  05EB  301A               	movlw	26
   570  05EC  00FA               	movwf	??_main+1
   571  05ED  30F8               	movlw	248
   572  05EE  00F9               	movwf	??_main
   573  05EF                     u477:	
   574  05EF  0BF9               	decfsz	??_main,f
   575  05F0  2DEF               	goto	u477
   576  05F1  0BFA               	decfsz	??_main+1,f
   577  05F2  2DEF               	goto	u477
   578  05F3  0000               	nop
   579  05F4                     l1128:	
   580                           
   581                           ;vaccum.c: 19:         SW_Update();
   582  05F4  120A  118A  2679  120A  118A  	fcall	_SW_Update
   583  05F9                     l1130:	
   584                           
   585                           ;vaccum.c: 20:         SSD_Update();
   586  05F9  120A  118A  24E9  120A  118A  	fcall	_SSD_Update
   587  05FE                     l1132:	
   588                           
   589                           ;vaccum.c: 21:         ((((PORTB))) = (((PORTB)) & (~(1 << ((3)))))|(1 << ((3))));
   590  05FE  1283               	bcf	3,5	;RP0=0, select bank0
   591  05FF  1303               	bcf	3,6	;RP1=0, select bank0
   592  0600  0806               	movf	6,w	;volatile
   593  0601  39F7               	andlw	247
   594  0602  3808               	iorlw	8
   595  0603  0086               	movwf	6	;volatile
   596  0604                     l1134:	
   597                           
   598                           ;vaccum.c: 23:         if( SW_GetState(SW_PLUS) == SW_PRESSED )
   599  0604  3000               	movlw	0
   600  0605  120A  118A  248A  120A  118A  	fcall	_SW_GetState
   601  060A  3A02               	xorlw	2
   602  060B  1D03               	skipz
   603  060C  2E0E               	goto	u441
   604  060D  2E0F               	goto	u440
   605  060E                     u441:	
   606  060E  2E2B               	goto	l1138
   607  060F                     u440:	
   608  060F                     l1136:	
   609                           
   610                           ;vaccum.c: 25:         {;vaccum.c: 28:           SSD_SetValue(SSD_FIRST,SSD_LOW);
   611  060F  01F0               	clrf	SSD_SetValue@ssd_symbol
   612  0610  3000               	movlw	0
   613  0611  120A  118A  2480  120A  118A  	fcall	_SSD_SetValue
   614                           
   615                           ;vaccum.c: 29:           SSD_SetValue(SSD_SECOND,SSD_NULL);
   616  0616  3003               	movlw	3
   617  0617  00F9               	movwf	??_main
   618  0618  0879               	movf	??_main,w
   619  0619  00F0               	movwf	SSD_SetValue@ssd_symbol
   620  061A  3001               	movlw	1
   621  061B  120A  118A  2480  120A  118A  	fcall	_SSD_SetValue
   622                           
   623                           ;vaccum.c: 30:           SSD_SetValue(SSD_THIRD,SSD_NULL);
   624  0620  3003               	movlw	3
   625  0621  00F9               	movwf	??_main
   626  0622  0879               	movf	??_main,w
   627  0623  00F0               	movwf	SSD_SetValue@ssd_symbol
   628  0624  3002               	movlw	2
   629  0625  120A  118A  2480  120A  118A  	fcall	_SSD_SetValue
   630                           
   631                           ;vaccum.c: 31:         }
   632  062A  2DEB               	goto	l1126
   633  062B                     l1138:	
   634  062B  3001               	movlw	1
   635  062C  120A  118A  248A  120A  118A  	fcall	_SW_GetState
   636  0631  3A02               	xorlw	2
   637  0632  1D03               	skipz
   638  0633  2E35               	goto	u451
   639  0634  2E36               	goto	u450
   640  0635                     u451:	
   641  0635  2E50               	goto	l1142
   642  0636                     u450:	
   643  0636                     l1140:	
   644                           
   645                           ;vaccum.c: 34:         {;vaccum.c: 37:           SSD_SetValue(SSD_FIRST,SSD_LOW);
   646  0636  01F0               	clrf	SSD_SetValue@ssd_symbol
   647  0637  3000               	movlw	0
   648  0638  120A  118A  2480  120A  118A  	fcall	_SSD_SetValue
   649                           
   650                           ;vaccum.c: 38:           SSD_SetValue(SSD_SECOND,SSD_MID);
   651  063D  01F0               	clrf	SSD_SetValue@ssd_symbol
   652  063E  0AF0               	incf	SSD_SetValue@ssd_symbol,f
   653  063F  3001               	movlw	1
   654  0640  120A  118A  2480  120A  118A  	fcall	_SSD_SetValue
   655                           
   656                           ;vaccum.c: 39:           SSD_SetValue(SSD_THIRD,SSD_NULL);
   657  0645  3003               	movlw	3
   658  0646  00F9               	movwf	??_main
   659  0647  0879               	movf	??_main,w
   660  0648  00F0               	movwf	SSD_SetValue@ssd_symbol
   661  0649  3002               	movlw	2
   662  064A  120A  118A  2480  120A  118A  	fcall	_SSD_SetValue
   663                           
   664                           ;vaccum.c: 41:         }
   665  064F  2DEB               	goto	l1126
   666  0650                     l1142:	
   667  0650  3002               	movlw	2
   668  0651  120A  118A  248A  120A  118A  	fcall	_SW_GetState
   669  0656  3A02               	xorlw	2
   670  0657  1D03               	skipz
   671  0658  2E5A               	goto	u461
   672  0659  2E5B               	goto	u460
   673  065A                     u461:	
   674  065A  2E75               	goto	l23
   675  065B                     u460:	
   676  065B                     l1144:	
   677                           
   678                           ;vaccum.c: 44:         {;vaccum.c: 47:           SSD_SetValue(SSD_FIRST,SSD_LOW);
   679  065B  01F0               	clrf	SSD_SetValue@ssd_symbol
   680  065C  3000               	movlw	0
   681  065D  120A  118A  2480  120A  118A  	fcall	_SSD_SetValue
   682                           
   683                           ;vaccum.c: 48:           SSD_SetValue(SSD_SECOND,SSD_MID);
   684  0662  01F0               	clrf	SSD_SetValue@ssd_symbol
   685  0663  0AF0               	incf	SSD_SetValue@ssd_symbol,f
   686  0664  3001               	movlw	1
   687  0665  120A  118A  2480  120A  118A  	fcall	_SSD_SetValue
   688                           
   689                           ;vaccum.c: 49:           SSD_SetValue(SSD_THIRD,SSD_HIGH);
   690  066A  3002               	movlw	2
   691  066B  00F9               	movwf	??_main
   692  066C  0879               	movf	??_main,w
   693  066D  00F0               	movwf	SSD_SetValue@ssd_symbol
   694  066E  3002               	movlw	2
   695  066F  120A  118A  2480  120A  118A  	fcall	_SSD_SetValue
   696  0674  2DEB               	goto	l1126
   697  0675                     l23:	
   698  0675  2DEB               	goto	l1126
   699  0676  120A  118A  2800   	ljmp	start
   700  0679                     __end_of_main:	
   701                           
   702                           	psect	text1
   703  0679                     __ptext1:	
   704 ;; *************** function _SW_Update *****************
   705 ;; Defined at:
   706 ;;		line 75 in file "SW.c"
   707 ;; Parameters:    Size  Location     Type
   708 ;;		None
   709 ;; Auto vars:     Size  Location     Type
   710 ;;  index           1    7[COMMON] unsigned char 
   711 ;; Return value:  Size  Location     Type
   712 ;;                  1    wreg      void 
   713 ;; Registers used:
   714 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   715 ;; Tracked objects:
   716 ;;		On entry : 0/0
   717 ;;		On exit  : 0/0
   718 ;;		Unchanged: 0/0
   719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   720 ;;      Params:         0       0       0       0       0
   721 ;;      Locals:         1       0       0       0       0
   722 ;;      Temps:          3       0       0       0       0
   723 ;;      Totals:         4       0       0       0       0
   724 ;;Total ram usage:        4 bytes
   725 ;; Hardware stack levels used:    1
   726 ;; Hardware stack levels required when called:    1
   727 ;; This function calls:
   728 ;;		___bmul
   729 ;; This function is called by:
   730 ;;		_main
   731 ;; This function uses a non-reentrant model
   732 ;;
   733                           
   734                           
   735                           ;psect for function _SW_Update
   736  0679                     _SW_Update:	
   737  0679                     l1042:	
   738                           ;incstack = 0
   739                           ; Regs used in _SW_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   740                           
   741  0679                     l1044:	
   742                           
   743                           ;SW.c: 81:     SW_counter += (5);
   744  0679  3005               	movlw	5
   745  067A  07FB               	addwf	SW_Update@SW_counter,f
   746  067B  1803               	skipnc
   747  067C  0AFC               	incf	SW_Update@SW_counter+1,f
   748  067D  3000               	movlw	0
   749  067E  07FC               	addwf	SW_Update@SW_counter+1,f
   750  067F                     l1046:	
   751                           
   752                           ;SW.c: 83:     if (SW_counter != (20)){
   753  067F  3014               	movlw	20
   754  0680  067B               	xorwf	SW_Update@SW_counter,w
   755  0681  047C               	iorwf	SW_Update@SW_counter+1,w
   756  0682  1903               	btfsc	3,2
   757  0683  2E85               	goto	u301
   758  0684  2E86               	goto	u300
   759  0685                     u301:	
   760  0685  2E87               	goto	l1050
   761  0686                     u300:	
   762  0686  2FDF               	goto	l49
   763  0687                     l1050:	
   764                           
   765                           ;SW.c: 87:     SW_counter = 0;
   766  0687  01FB               	clrf	SW_Update@SW_counter
   767  0688  01FC               	clrf	SW_Update@SW_counter+1
   768                           
   769                           ;SW.c: 90:     for (index = SW_PLUS; index < (3); index++)
   770  0689  01F7               	clrf	SW_Update@index
   771  068A                     l1056:	
   772                           
   773                           ;SW.c: 91:     {;SW.c: 94:         SWs_Info[index].sw_samples[0] = SWs_Info[index].sw_sa
      +                          mples[1];
   774  068A  3003               	movlw	3
   775  068B  00F4               	movwf	??_SW_Update
   776  068C  0874               	movf	??_SW_Update,w
   777  068D  00F0               	movwf	___bmul@multiplicand
   778  068E  0877               	movf	SW_Update@index,w
   779  068F  120A  118A  24AD  120A  118A  	fcall	___bmul
   780  0694  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
   781  0695  0084               	movwf	4
   782  0696  1383               	bcf	3,7	;select IRP bank0
   783  0697  0800               	movf	0,w
   784  0698  00F5               	movwf	??_SW_Update+1
   785  0699  3003               	movlw	3
   786  069A  00F6               	movwf	??_SW_Update+2
   787  069B  0876               	movf	??_SW_Update+2,w
   788  069C  00F0               	movwf	___bmul@multiplicand
   789  069D  0877               	movf	SW_Update@index,w
   790  069E  120A  118A  24AD  120A  118A  	fcall	___bmul
   791  06A3  3E20               	addlw	(low (_SWs_Info| 0))& (0+255)
   792  06A4  0084               	movwf	4
   793  06A5  0875               	movf	??_SW_Update+1,w
   794  06A6  1383               	bcf	3,7	;select IRP bank0
   795  06A7  0080               	movwf	0
   796  06A8                     l1058:	
   797                           
   798                           ;SW.c: 96:         if (index == SW_PLUS)
   799  06A8  0877               	movf	SW_Update@index,w
   800  06A9  1D03               	btfss	3,2
   801  06AA  2EAC               	goto	u311
   802  06AB  2EAD               	goto	u310
   803  06AC                     u311:	
   804  06AC  2EC2               	goto	l1062
   805  06AD                     u310:	
   806  06AD                     l1060:	
   807                           
   808                           ;SW.c: 97:         {;SW.c: 98:             SWs_Info[index].sw_samples[1] = (((((PORTB)))
      +                           & (1 << ((0)))) >> (((0))));
   809  06AD  1283               	bcf	3,5	;RP0=0, select bank0
   810  06AE  1303               	bcf	3,6	;RP1=0, select bank0
   811  06AF  0806               	movf	6,w	;volatile
   812  06B0  3901               	andlw	1
   813  06B1  00F4               	movwf	??_SW_Update
   814  06B2  3003               	movlw	3
   815  06B3  00F5               	movwf	??_SW_Update+1
   816  06B4  0875               	movf	??_SW_Update+1,w
   817  06B5  00F0               	movwf	___bmul@multiplicand
   818  06B6  0877               	movf	SW_Update@index,w
   819  06B7  120A  118A  24AD  120A  118A  	fcall	___bmul
   820  06BC  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
   821  06BD  0084               	movwf	4
   822  06BE  0874               	movf	??_SW_Update,w
   823  06BF  1383               	bcf	3,7	;select IRP bank0
   824  06C0  0080               	movwf	0
   825                           
   826                           ;SW.c: 99:         } else if (index == SW_MINUS)
   827  06C1  2FB2               	goto	l1092
   828  06C2                     l1062:	
   829  06C2  0377               	decf	SW_Update@index,w
   830  06C3  1D03               	btfss	3,2
   831  06C4  2EC6               	goto	u321
   832  06C5  2EC7               	goto	u320
   833  06C6                     u321:	
   834  06C6  2EDF               	goto	l1066
   835  06C7                     u320:	
   836  06C7                     l1064:	
   837                           
   838                           ;SW.c: 100:         {;SW.c: 101:             SWs_Info[index].sw_samples[1] = (((((PORTB)
      +                          )) & (1 << ((1)))) >> (((1))));
   839  06C7  1283               	bcf	3,5	;RP0=0, select bank0
   840  06C8  1303               	bcf	3,6	;RP1=0, select bank0
   841  06C9  0806               	movf	6,w	;volatile
   842  06CA  00F4               	movwf	??_SW_Update
   843  06CB  1003               	clrc
   844  06CC  0C74               	rrf	??_SW_Update,w
   845  06CD  3901               	andlw	1
   846  06CE  00F5               	movwf	??_SW_Update+1
   847  06CF  3003               	movlw	3
   848  06D0  00F6               	movwf	??_SW_Update+2
   849  06D1  0876               	movf	??_SW_Update+2,w
   850  06D2  00F0               	movwf	___bmul@multiplicand
   851  06D3  0877               	movf	SW_Update@index,w
   852  06D4  120A  118A  24AD  120A  118A  	fcall	___bmul
   853  06D9  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
   854  06DA  0084               	movwf	4
   855  06DB  0875               	movf	??_SW_Update+1,w
   856  06DC  1383               	bcf	3,7	;select IRP bank0
   857  06DD  0080               	movwf	0
   858                           
   859                           ;SW.c: 102:         } else if (index == SW_PRESURE)
   860  06DE  2FB2               	goto	l1092
   861  06DF                     l1066:	
   862  06DF  3002               	movlw	2
   863  06E0  0677               	xorwf	SW_Update@index,w
   864  06E1  1D03               	btfss	3,2
   865  06E2  2EE4               	goto	u331
   866  06E3  2EE5               	goto	u330
   867  06E4                     u331:	
   868  06E4  2F02               	goto	l53
   869  06E5                     u330:	
   870  06E5                     l1068:	
   871                           
   872                           ;SW.c: 103:         {;SW.c: 104:             SWs_Info[index].sw_samples[1] = (((((PORTB)
      +                          )) & (1 << ((2)))) >> (((2))));
   873  06E5  1283               	bcf	3,5	;RP0=0, select bank0
   874  06E6  1303               	bcf	3,6	;RP1=0, select bank0
   875  06E7  0806               	movf	6,w	;volatile
   876  06E8  00F4               	movwf	??_SW_Update
   877  06E9  3002               	movlw	2
   878  06EA                     u345:	
   879  06EA  1003               	clrc
   880  06EB  0CF4               	rrf	??_SW_Update,f
   881  06EC  3EFF               	addlw	-1
   882  06ED  1D03               	skipz
   883  06EE  2EEA               	goto	u345
   884  06EF  0874               	movf	??_SW_Update,w
   885  06F0  3901               	andlw	1
   886  06F1  00F5               	movwf	??_SW_Update+1
   887  06F2  3003               	movlw	3
   888  06F3  00F6               	movwf	??_SW_Update+2
   889  06F4  0876               	movf	??_SW_Update+2,w
   890  06F5  00F0               	movwf	___bmul@multiplicand
   891  06F6  0877               	movf	SW_Update@index,w
   892  06F7  120A  118A  24AD  120A  118A  	fcall	___bmul
   893  06FC  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
   894  06FD  0084               	movwf	4
   895  06FE  0875               	movf	??_SW_Update+1,w
   896  06FF  1383               	bcf	3,7	;select IRP bank0
   897  0700  0080               	movwf	0
   898                           
   899                           ;SW.c: 105:         } else
   900  0701  2FB2               	goto	l1092
   901  0702                     l53:	
   902                           
   903                           ;SW.c: 113:         switch(SWs_Info[index].sw_state)
   904  0702  2FB2               	goto	l1092
   905  0703                     l1070:	
   906                           
   907                           ;SW.c: 118:                 if ((SWs_Info[index].sw_samples[0] == (0)) &&
   908  0703  3003               	movlw	3
   909  0704  00F4               	movwf	??_SW_Update
   910  0705  0874               	movf	??_SW_Update,w
   911  0706  00F0               	movwf	___bmul@multiplicand
   912  0707  0877               	movf	SW_Update@index,w
   913  0708  120A  118A  24AD  120A  118A  	fcall	___bmul
   914  070D  3E20               	addlw	(low (_SWs_Info| 0))& (0+255)
   915  070E  0084               	movwf	4
   916  070F  1383               	bcf	3,7	;select IRP bank0
   917  0710  0800               	movf	0,w
   918  0711  1D03               	btfss	3,2
   919  0712  2F14               	goto	u351
   920  0713  2F15               	goto	u350
   921  0714                     u351:	
   922  0714  2FD5               	goto	l1094
   923  0715                     u350:	
   924  0715                     l1072:	
   925  0715  3003               	movlw	3
   926  0716  00F4               	movwf	??_SW_Update
   927  0717  0874               	movf	??_SW_Update,w
   928  0718  00F0               	movwf	___bmul@multiplicand
   929  0719  0877               	movf	SW_Update@index,w
   930  071A  120A  118A  24AD  120A  118A  	fcall	___bmul
   931  071F  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
   932  0720  0084               	movwf	4
   933  0721  1383               	bcf	3,7	;select IRP bank0
   934  0722  0800               	movf	0,w
   935  0723  1D03               	btfss	3,2
   936  0724  2F26               	goto	u361
   937  0725  2F27               	goto	u360
   938  0726                     u361:	
   939  0726  2FD5               	goto	l1094
   940  0727                     u360:	
   941  0727                     l1074:	
   942                           
   943                           ;SW.c: 120:                 {;SW.c: 121:                     SWs_Info[index].sw_state = 
      +                          SW_PRE_PRESSED;
   944  0727  3003               	movlw	3
   945  0728  00F4               	movwf	??_SW_Update
   946  0729  0874               	movf	??_SW_Update,w
   947  072A  00F0               	movwf	___bmul@multiplicand
   948  072B  0877               	movf	SW_Update@index,w
   949  072C  120A  118A  24AD  120A  118A  	fcall	___bmul
   950  0731  3E22               	addlw	(low ((_SWs_Info| 0+2)))& (0+255)
   951  0732  0084               	movwf	4
   952  0733  1383               	bcf	3,7	;select IRP bank0
   953  0734  0180               	clrf	0
   954  0735  0A80               	incf	0,f
   955                           
   956                           ;SW.c: 122:                 } else
   957  0736  2FD5               	goto	l1094
   958  0737                     l1076:	
   959                           
   960                           ;SW.c: 129:                 if (SWs_Info[index].sw_samples[1] == (0))
   961  0737  3003               	movlw	3
   962  0738  00F4               	movwf	??_SW_Update
   963  0739  0874               	movf	??_SW_Update,w
   964  073A  00F0               	movwf	___bmul@multiplicand
   965  073B  0877               	movf	SW_Update@index,w
   966  073C  120A  118A  24AD  120A  118A  	fcall	___bmul
   967  0741  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
   968  0742  0084               	movwf	4
   969  0743  1383               	bcf	3,7	;select IRP bank0
   970  0744  0800               	movf	0,w
   971  0745  1D03               	btfss	3,2
   972  0746  2F48               	goto	u371
   973  0747  2F49               	goto	u370
   974  0748                     u371:	
   975  0748  2FD5               	goto	l1094
   976  0749                     u370:	
   977  0749                     l1078:	
   978                           
   979                           ;SW.c: 130:                 {;SW.c: 131:                     SWs_Info[index].sw_state = 
      +                          SW_PRESSED;
   980  0749  3002               	movlw	2
   981  074A  00F4               	movwf	??_SW_Update
   982  074B  3003               	movlw	3
   983  074C  00F5               	movwf	??_SW_Update+1
   984  074D  0875               	movf	??_SW_Update+1,w
   985  074E  00F0               	movwf	___bmul@multiplicand
   986  074F  0877               	movf	SW_Update@index,w
   987  0750  120A  118A  24AD  120A  118A  	fcall	___bmul
   988  0755  3E22               	addlw	(low ((_SWs_Info| 0+2)))& (0+255)
   989  0756  0084               	movwf	4
   990  0757  0874               	movf	??_SW_Update,w
   991  0758  1383               	bcf	3,7	;select IRP bank0
   992  0759  0080               	movwf	0
   993                           
   994                           ;SW.c: 132:                 } else
   995  075A  2FD5               	goto	l1094
   996  075B                     l1080:	
   997                           
   998                           ;SW.c: 139:                 if ((SWs_Info[index].sw_samples[0] == (1)) &&
   999  075B  3003               	movlw	3
  1000  075C  00F4               	movwf	??_SW_Update
  1001  075D  0874               	movf	??_SW_Update,w
  1002  075E  00F0               	movwf	___bmul@multiplicand
  1003  075F  0877               	movf	SW_Update@index,w
  1004  0760  120A  118A  24AD  120A  118A  	fcall	___bmul
  1005  0765  3E20               	addlw	(low (_SWs_Info| 0))& (0+255)
  1006  0766  0084               	movwf	4
  1007  0767  1383               	bcf	3,7	;select IRP bank0
  1008  0768  0300               	decf	0,w
  1009  0769  1D03               	btfss	3,2
  1010  076A  2F6C               	goto	u381
  1011  076B  2F6D               	goto	u380
  1012  076C                     u381:	
  1013  076C  2FD5               	goto	l1094
  1014  076D                     u380:	
  1015  076D                     l1082:	
  1016  076D  3003               	movlw	3
  1017  076E  00F4               	movwf	??_SW_Update
  1018  076F  0874               	movf	??_SW_Update,w
  1019  0770  00F0               	movwf	___bmul@multiplicand
  1020  0771  0877               	movf	SW_Update@index,w
  1021  0772  120A  118A  24AD  120A  118A  	fcall	___bmul
  1022  0777  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
  1023  0778  0084               	movwf	4
  1024  0779  1383               	bcf	3,7	;select IRP bank0
  1025  077A  0300               	decf	0,w
  1026  077B  1D03               	btfss	3,2
  1027  077C  2F7E               	goto	u391
  1028  077D  2F7F               	goto	u390
  1029  077E                     u391:	
  1030  077E  2FD5               	goto	l1094
  1031  077F                     u390:	
  1032  077F                     l1084:	
  1033                           
  1034                           ;SW.c: 141:                 {;SW.c: 142:                     SWs_Info[index].sw_state = 
      +                          SW_PRE_RELEASED;
  1035  077F  3003               	movlw	3
  1036  0780  00F4               	movwf	??_SW_Update
  1037  0781  3003               	movlw	3
  1038  0782  00F5               	movwf	??_SW_Update+1
  1039  0783  0875               	movf	??_SW_Update+1,w
  1040  0784  00F0               	movwf	___bmul@multiplicand
  1041  0785  0877               	movf	SW_Update@index,w
  1042  0786  120A  118A  24AD  120A  118A  	fcall	___bmul
  1043  078B  3E22               	addlw	(low ((_SWs_Info| 0+2)))& (0+255)
  1044  078C  0084               	movwf	4
  1045  078D  0874               	movf	??_SW_Update,w
  1046  078E  1383               	bcf	3,7	;select IRP bank0
  1047  078F  0080               	movwf	0
  1048                           
  1049                           ;SW.c: 143:                 }
  1050  0790  2FD5               	goto	l1094
  1051  0791                     l1086:	
  1052                           
  1053                           ;SW.c: 151:                 if (SWs_Info[index].sw_samples[1] == (1))
  1054  0791  3003               	movlw	3
  1055  0792  00F4               	movwf	??_SW_Update
  1056  0793  0874               	movf	??_SW_Update,w
  1057  0794  00F0               	movwf	___bmul@multiplicand
  1058  0795  0877               	movf	SW_Update@index,w
  1059  0796  120A  118A  24AD  120A  118A  	fcall	___bmul
  1060  079B  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
  1061  079C  0084               	movwf	4
  1062  079D  1383               	bcf	3,7	;select IRP bank0
  1063  079E  0300               	decf	0,w
  1064  079F  1D03               	btfss	3,2
  1065  07A0  2FA2               	goto	u401
  1066  07A1  2FA3               	goto	u400
  1067  07A2                     u401:	
  1068  07A2  2FD5               	goto	l1094
  1069  07A3                     u400:	
  1070  07A3                     l1088:	
  1071                           
  1072                           ;SW.c: 152:                 {;SW.c: 153:                     SWs_Info[index].sw_state = 
      +                          SW_RELEASED;
  1073  07A3  3003               	movlw	3
  1074  07A4  00F4               	movwf	??_SW_Update
  1075  07A5  0874               	movf	??_SW_Update,w
  1076  07A6  00F0               	movwf	___bmul@multiplicand
  1077  07A7  0877               	movf	SW_Update@index,w
  1078  07A8  120A  118A  24AD  120A  118A  	fcall	___bmul
  1079  07AD  3E22               	addlw	(low ((_SWs_Info| 0+2)))& (0+255)
  1080  07AE  0084               	movwf	4
  1081  07AF  1383               	bcf	3,7	;select IRP bank0
  1082  07B0  0180               	clrf	0
  1083                           
  1084                           ;SW.c: 154:                 } else
  1085  07B1  2FD5               	goto	l1094
  1086  07B2                     l1092:	
  1087  07B2  3003               	movlw	3
  1088  07B3  00F4               	movwf	??_SW_Update
  1089  07B4  0874               	movf	??_SW_Update,w
  1090  07B5  00F0               	movwf	___bmul@multiplicand
  1091  07B6  0877               	movf	SW_Update@index,w
  1092  07B7  120A  118A  24AD  120A  118A  	fcall	___bmul
  1093  07BC  3E22               	addlw	(low ((_SWs_Info| 0+2)))& (0+255)
  1094  07BD  0084               	movwf	4
  1095  07BE  1383               	bcf	3,7	;select IRP bank0
  1096  07BF  0800               	movf	0,w
  1097  07C0  00F5               	movwf	??_SW_Update+1
  1098  07C1  01F6               	clrf	??_SW_Update+2
  1099                           
  1100                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1101                           ; Switch size 1, requested type "simple"
  1102                           ; Number of cases is 1, Range of values is 0 to 0
  1103                           ; switch strategies available:
  1104                           ; Name         Instructions Cycles
  1105                           ; simple_byte            4     3 (average)
  1106                           ; direct_byte           11     8 (fixed)
  1107                           ; jumptable            260     6 (fixed)
  1108                           ;	Chosen strategy is simple_byte
  1109  07C2  0876               	movf	??_SW_Update+2,w
  1110  07C3  3A00               	xorlw	0	; case 0
  1111  07C4  1903               	skipnz
  1112  07C5  2FC7               	goto	l1186
  1113  07C6  2FD5               	goto	l1094
  1114  07C7                     l1186:	
  1115                           
  1116                           ; Switch size 1, requested type "simple"
  1117                           ; Number of cases is 4, Range of values is 0 to 3
  1118                           ; switch strategies available:
  1119                           ; Name         Instructions Cycles
  1120                           ; simple_byte           13     7 (average)
  1121                           ; direct_byte           20     8 (fixed)
  1122                           ; jumptable            260     6 (fixed)
  1123                           ;	Chosen strategy is simple_byte
  1124  07C7  0875               	movf	??_SW_Update+1,w
  1125  07C8  3A00               	xorlw	0	; case 0
  1126  07C9  1903               	skipnz
  1127  07CA  2F03               	goto	l1070
  1128  07CB  3A01               	xorlw	1	; case 1
  1129  07CC  1903               	skipnz
  1130  07CD  2F37               	goto	l1076
  1131  07CE  3A03               	xorlw	3	; case 2
  1132  07CF  1903               	skipnz
  1133  07D0  2F5B               	goto	l1080
  1134  07D1  3A01               	xorlw	1	; case 3
  1135  07D2  1903               	skipnz
  1136  07D3  2F91               	goto	l1086
  1137  07D4  2FD5               	goto	l1094
  1138  07D5                     l1094:	
  1139                           
  1140                           ;SW.c: 164:     }
  1141  07D5  3001               	movlw	1
  1142  07D6  00F4               	movwf	??_SW_Update
  1143  07D7  0874               	movf	??_SW_Update,w
  1144  07D8  07F7               	addwf	SW_Update@index,f
  1145  07D9                     l1096:	
  1146  07D9  3003               	movlw	3
  1147  07DA  0277               	subwf	SW_Update@index,w
  1148  07DB  1C03               	skipc
  1149  07DC  2FDE               	goto	u411
  1150  07DD  2FDF               	goto	u410
  1151  07DE                     u411:	
  1152  07DE  2E8A               	goto	l1056
  1153  07DF                     u410:	
  1154  07DF                     l49:	
  1155  07DF  0008               	return
  1156  07E0                     __end_of_SW_Update:	
  1157                           
  1158                           	psect	text2
  1159  059B                     __ptext2:	
  1160 ;; *************** function _SW_Init *****************
  1161 ;; Defined at:
  1162 ;;		line 35 in file "SW.c"
  1163 ;; Parameters:    Size  Location     Type
  1164 ;;		None
  1165 ;; Auto vars:     Size  Location     Type
  1166 ;;  index           1    5[COMMON] unsigned char 
  1167 ;; Return value:  Size  Location     Type
  1168 ;;                  1    wreg      void 
  1169 ;; Registers used:
  1170 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1171 ;; Tracked objects:
  1172 ;;		On entry : 0/0
  1173 ;;		On exit  : 0/0
  1174 ;;		Unchanged: 0/0
  1175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1176 ;;      Params:         0       0       0       0       0
  1177 ;;      Locals:         1       0       0       0       0
  1178 ;;      Temps:          1       0       0       0       0
  1179 ;;      Totals:         2       0       0       0       0
  1180 ;;Total ram usage:        2 bytes
  1181 ;; Hardware stack levels used:    1
  1182 ;; Hardware stack levels required when called:    1
  1183 ;; This function calls:
  1184 ;;		___bmul
  1185 ;; This function is called by:
  1186 ;;		_main
  1187 ;; This function uses a non-reentrant model
  1188 ;;
  1189                           
  1190                           
  1191                           ;psect for function _SW_Init
  1192  059B                     _SW_Init:	
  1193  059B                     l1000:	
  1194                           ;incstack = 0
  1195                           ; Regs used in _SW_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1196                           
  1197  059B                     l1002:	
  1198                           
  1199                           ;SW.c: 41:     ((((TRISB))) = (((TRISB)) & (~(1 << ((0)))))|((1) << ((0))));
  1200  059B  1683               	bsf	3,5	;RP0=1, select bank1
  1201  059C  1303               	bcf	3,6	;RP1=0, select bank1
  1202  059D  0806               	movf	6,w	;volatile
  1203  059E  39FE               	andlw	254
  1204  059F  3801               	iorlw	1
  1205  05A0  0086               	movwf	6	;volatile
  1206  05A1                     l1004:	
  1207                           
  1208                           ;SW.c: 42:     ((((TRISB))) = (((TRISB)) & (~(1 << ((1)))))|((1) << ((1))));
  1209  05A1  0806               	movf	6,w	;volatile
  1210  05A2  39FD               	andlw	253
  1211  05A3  3802               	iorlw	2
  1212  05A4  0086               	movwf	6	;volatile
  1213  05A5                     l1006:	
  1214                           
  1215                           ;SW.c: 43:     ((((TRISB))) = (((TRISB)) & (~(1 << ((2)))))|((1) << ((2))));
  1216  05A5  0806               	movf	6,w	;volatile
  1217  05A6  39FB               	andlw	251
  1218  05A7  3804               	iorlw	4
  1219  05A8  0086               	movwf	6	;volatile
  1220  05A9                     l1008:	
  1221                           
  1222                           ;SW.c: 46:     for (index = SW_PLUS; index < (3); index++)
  1223  05A9  01F5               	clrf	SW_Init@index
  1224  05AA                     l1014:	
  1225                           
  1226                           ;SW.c: 47:     {;SW.c: 49:         SWs_Info[index].sw_samples[0] = (1);
  1227  05AA  3003               	movlw	3
  1228  05AB  00F4               	movwf	??_SW_Init
  1229  05AC  0874               	movf	??_SW_Init,w
  1230  05AD  00F0               	movwf	___bmul@multiplicand
  1231  05AE  0875               	movf	SW_Init@index,w
  1232  05AF  120A  118A  24AD  120A  118A  	fcall	___bmul
  1233  05B4  3E20               	addlw	(low (_SWs_Info| 0))& (0+255)
  1234  05B5  0084               	movwf	4
  1235  05B6  1383               	bcf	3,7	;select IRP bank0
  1236  05B7  0180               	clrf	0
  1237  05B8  0A80               	incf	0,f
  1238                           
  1239                           ;SW.c: 50:         SWs_Info[index].sw_samples[1] = (1);
  1240  05B9  3003               	movlw	3
  1241  05BA  00F4               	movwf	??_SW_Init
  1242  05BB  0874               	movf	??_SW_Init,w
  1243  05BC  00F0               	movwf	___bmul@multiplicand
  1244  05BD  0875               	movf	SW_Init@index,w
  1245  05BE  120A  118A  24AD  120A  118A  	fcall	___bmul
  1246  05C3  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
  1247  05C4  0084               	movwf	4
  1248  05C5  1383               	bcf	3,7	;select IRP bank0
  1249  05C6  0180               	clrf	0
  1250  05C7  0A80               	incf	0,f
  1251                           
  1252                           ;SW.c: 53:         SWs_Info[index].sw_state = SW_RELEASED;
  1253  05C8  3003               	movlw	3
  1254  05C9  00F4               	movwf	??_SW_Init
  1255  05CA  0874               	movf	??_SW_Init,w
  1256  05CB  00F0               	movwf	___bmul@multiplicand
  1257  05CC  0875               	movf	SW_Init@index,w
  1258  05CD  120A  118A  24AD  120A  118A  	fcall	___bmul
  1259  05D2  3E22               	addlw	(low ((_SWs_Info| 0+2)))& (0+255)
  1260  05D3  0084               	movwf	4
  1261  05D4  1383               	bcf	3,7	;select IRP bank0
  1262  05D5  0180               	clrf	0
  1263  05D6                     l1016:	
  1264                           
  1265                           ;SW.c: 55:     }
  1266  05D6  3001               	movlw	1
  1267  05D7  00F4               	movwf	??_SW_Init
  1268  05D8  0874               	movf	??_SW_Init,w
  1269  05D9  07F5               	addwf	SW_Init@index,f
  1270  05DA                     l1018:	
  1271  05DA  3003               	movlw	3
  1272  05DB  0275               	subwf	SW_Init@index,w
  1273  05DC  1C03               	skipc
  1274  05DD  2DDF               	goto	u291
  1275  05DE  2DE0               	goto	u290
  1276  05DF                     u291:	
  1277  05DF  2DAA               	goto	l1014
  1278  05E0                     u290:	
  1279  05E0                     l40:	
  1280  05E0  0008               	return
  1281  05E1                     __end_of_SW_Init:	
  1282                           
  1283                           	psect	text3
  1284  048A                     __ptext3:	
  1285 ;; *************** function _SW_GetState *****************
  1286 ;; Defined at:
  1287 ;;		line 60 in file "SW.c"
  1288 ;; Parameters:    Size  Location     Type
  1289 ;;  sw              1    wreg     enum E852
  1290 ;; Auto vars:     Size  Location     Type
  1291 ;;  sw              1    5[COMMON] enum E852
  1292 ;; Return value:  Size  Location     Type
  1293 ;;                  1    wreg      enum E1038
  1294 ;; Registers used:
  1295 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1296 ;; Tracked objects:
  1297 ;;		On entry : 0/0
  1298 ;;		On exit  : 0/0
  1299 ;;		Unchanged: 0/0
  1300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1301 ;;      Params:         0       0       0       0       0
  1302 ;;      Locals:         1       0       0       0       0
  1303 ;;      Temps:          1       0       0       0       0
  1304 ;;      Totals:         2       0       0       0       0
  1305 ;;Total ram usage:        2 bytes
  1306 ;; Hardware stack levels used:    1
  1307 ;; Hardware stack levels required when called:    1
  1308 ;; This function calls:
  1309 ;;		___bmul
  1310 ;; This function is called by:
  1311 ;;		_main
  1312 ;; This function uses a non-reentrant model
  1313 ;;
  1314                           
  1315                           
  1316                           ;psect for function _SW_GetState
  1317  048A                     _SW_GetState:	
  1318                           
  1319                           ;incstack = 0
  1320                           ; Regs used in _SW_GetState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1321                           ;SW_GetState@sw stored from wreg
  1322  048A  00F5               	movwf	SW_GetState@sw
  1323  048B                     l1118:	
  1324                           
  1325                           ;SW.c: 60: tSW_State SW_GetState(tSW sw);SW.c: 61: {;SW.c: 64:     return SWs_Info[sw].s
      +                          w_state;
  1326  048B  3003               	movlw	3
  1327  048C  00F4               	movwf	??_SW_GetState
  1328  048D  0874               	movf	??_SW_GetState,w
  1329  048E  00F0               	movwf	___bmul@multiplicand
  1330  048F  0875               	movf	SW_GetState@sw,w
  1331  0490  120A  118A  24AD  120A  118A  	fcall	___bmul
  1332  0495  3E22               	addlw	(low ((_SWs_Info| 0+2)))& (0+255)
  1333  0496  0084               	movwf	4
  1334  0497  1383               	bcf	3,7	;select IRP bank0
  1335  0498  0800               	movf	0,w
  1336  0499                     l43:	
  1337  0499  0008               	return
  1338  049A                     __end_of_SW_GetState:	
  1339                           
  1340                           	psect	text4
  1341  04AD                     __ptext4:	
  1342 ;; *************** function ___bmul *****************
  1343 ;; Defined at:
  1344 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c"
  1345 ;; Parameters:    Size  Location     Type
  1346 ;;  multiplier      1    wreg     unsigned char 
  1347 ;;  multiplicand    1    0[COMMON] unsigned char 
  1348 ;; Auto vars:     Size  Location     Type
  1349 ;;  multiplier      1    3[COMMON] unsigned char 
  1350 ;;  product         1    2[COMMON] unsigned char 
  1351 ;; Return value:  Size  Location     Type
  1352 ;;                  1    wreg      unsigned char 
  1353 ;; Registers used:
  1354 ;;		wreg, status,2, status,0
  1355 ;; Tracked objects:
  1356 ;;		On entry : 0/0
  1357 ;;		On exit  : 0/0
  1358 ;;		Unchanged: 0/0
  1359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1360 ;;      Params:         1       0       0       0       0
  1361 ;;      Locals:         2       0       0       0       0
  1362 ;;      Temps:          1       0       0       0       0
  1363 ;;      Totals:         4       0       0       0       0
  1364 ;;Total ram usage:        4 bytes
  1365 ;; Hardware stack levels used:    1
  1366 ;; This function calls:
  1367 ;;		Nothing
  1368 ;; This function is called by:
  1369 ;;		_SW_Init
  1370 ;;		_SW_GetState
  1371 ;;		_SW_Update
  1372 ;; This function uses a non-reentrant model
  1373 ;;
  1374                           
  1375                           
  1376                           ;psect for function ___bmul
  1377  04AD                     ___bmul:	
  1378                           
  1379                           ;incstack = 0
  1380                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  1381                           ;___bmul@multiplier stored from wreg
  1382  04AD  00F3               	movwf	___bmul@multiplier
  1383  04AE                     l986:	
  1384  04AE  01F2               	clrf	___bmul@product
  1385  04AF                     l988:	
  1386  04AF  1C73               	btfss	___bmul@multiplier,0
  1387  04B0  2CB2               	goto	u271
  1388  04B1  2CB3               	goto	u270
  1389  04B2                     u271:	
  1390  04B2  2CB7               	goto	l992
  1391  04B3                     u270:	
  1392  04B3                     l990:	
  1393  04B3  0870               	movf	___bmul@multiplicand,w
  1394  04B4  00F1               	movwf	??___bmul
  1395  04B5  0871               	movf	??___bmul,w
  1396  04B6  07F2               	addwf	___bmul@product,f
  1397  04B7                     l992:	
  1398  04B7  1003               	clrc
  1399  04B8  0DF0               	rlf	___bmul@multiplicand,f
  1400  04B9                     l994:	
  1401  04B9  1003               	clrc
  1402  04BA  0CF3               	rrf	___bmul@multiplier,f
  1403  04BB  0873               	movf	___bmul@multiplier,w
  1404  04BC  1D03               	btfss	3,2
  1405  04BD  2CBF               	goto	u281
  1406  04BE  2CC0               	goto	u280
  1407  04BF                     u281:	
  1408  04BF  2CAF               	goto	l988
  1409  04C0                     u280:	
  1410  04C0                     l996:	
  1411  04C0  0872               	movf	___bmul@product,w
  1412  04C1                     l244:	
  1413  04C1  0008               	return
  1414  04C2                     __end_of___bmul:	
  1415                           
  1416                           	psect	text5
  1417  04E9                     __ptext5:	
  1418 ;; *************** function _SSD_Update *****************
  1419 ;; Defined at:
  1420 ;;		line 59 in file "SSD.c"
  1421 ;; Parameters:    Size  Location     Type
  1422 ;;		None
  1423 ;; Auto vars:     Size  Location     Type
  1424 ;;		None
  1425 ;; Return value:  Size  Location     Type
  1426 ;;                  1    wreg      void 
  1427 ;; Registers used:
  1428 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1429 ;; Tracked objects:
  1430 ;;		On entry : 0/0
  1431 ;;		On exit  : 0/0
  1432 ;;		Unchanged: 0/0
  1433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1434 ;;      Params:         0       0       0       0       0
  1435 ;;      Locals:         0       0       0       0       0
  1436 ;;      Temps:          1       0       0       0       0
  1437 ;;      Totals:         1       0       0       0       0
  1438 ;;Total ram usage:        1 bytes
  1439 ;; Hardware stack levels used:    1
  1440 ;; Hardware stack levels required when called:    2
  1441 ;; This function calls:
  1442 ;;		_SSD_Out
  1443 ;; This function is called by:
  1444 ;;		_main
  1445 ;; This function uses a non-reentrant model
  1446 ;;
  1447                           
  1448                           
  1449                           ;psect for function _SSD_Update
  1450  04E9                     _SSD_Update:	
  1451  04E9                     l1102:	
  1452                           ;incstack = 0
  1453                           ; Regs used in _SSD_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1454                           
  1455                           
  1456                           ;SSD.c: 61:     static tWord SSD_counter = 0;;SSD.c: 65:     SSD_counter += (5);
  1457  04E9  3005               	movlw	5
  1458  04EA  1283               	bcf	3,5	;RP0=0, select bank0
  1459  04EB  1303               	bcf	3,6	;RP1=0, select bank0
  1460  04EC  07A9               	addwf	SSD_Update@SSD_counter,f
  1461  04ED  1803               	skipnc
  1462  04EE  0AAA               	incf	SSD_Update@SSD_counter+1,f
  1463  04EF  3000               	movlw	0
  1464  04F0  07AA               	addwf	SSD_Update@SSD_counter+1,f
  1465  04F1                     l1104:	
  1466                           
  1467                           ;SSD.c: 67:     if (SSD_counter != (5)){
  1468  04F1  3005               	movlw	5
  1469  04F2  0629               	xorwf	SSD_Update@SSD_counter,w
  1470  04F3  042A               	iorwf	SSD_Update@SSD_counter+1,w
  1471  04F4  1903               	btfsc	3,2
  1472  04F5  2CF7               	goto	u421
  1473  04F6  2CF8               	goto	u420
  1474  04F7                     u421:	
  1475  04F7  2CF9               	goto	l1108
  1476  04F8                     u420:	
  1477  04F8  2D15               	goto	l103
  1478  04F9                     l1108:	
  1479                           
  1480                           ;SSD.c: 71:     SSD_counter = 0;
  1481  04F9  01A9               	clrf	SSD_Update@SSD_counter
  1482  04FA  01AA               	clrf	SSD_Update@SSD_counter+1
  1483  04FB                     l1110:	
  1484                           
  1485                           ;SSD.c: 74:     SSD_Out(SSD_current, SSD_Values[SSD_current]);
  1486  04FB  087D               	movf	_SSD_current,w
  1487  04FC  3E2F               	addlw	(low (_SSD_Values| 0))& (0+255)
  1488  04FD  0084               	movwf	4
  1489  04FE  1383               	bcf	3,7	;select IRP bank0
  1490  04FF  0800               	movf	0,w
  1491  0500  00F6               	movwf	??_SSD_Update
  1492  0501  0876               	movf	??_SSD_Update,w
  1493  0502  00F4               	movwf	SSD_Out@ssd_symbol
  1494  0503  087D               	movf	_SSD_current,w
  1495  0504  120A  118A  24C2  120A  118A  	fcall	_SSD_Out
  1496  0509                     l1112:	
  1497                           
  1498                           ;SSD.c: 76:     if (SSD_current == SSD_THIRD)
  1499  0509  3002               	movlw	2
  1500  050A  067D               	xorwf	_SSD_current,w
  1501  050B  1D03               	btfss	3,2
  1502  050C  2D0E               	goto	u431
  1503  050D  2D0F               	goto	u430
  1504  050E                     u431:	
  1505  050E  2D11               	goto	l1116
  1506  050F                     u430:	
  1507  050F                     l1114:	
  1508                           
  1509                           ;SSD.c: 77:     {;SSD.c: 78:         SSD_current = SSD_FIRST;
  1510  050F  01FD               	clrf	_SSD_current
  1511                           
  1512                           ;SSD.c: 79:     } else
  1513  0510  2D15               	goto	l103
  1514  0511                     l1116:	
  1515                           
  1516                           ;SSD.c: 80:     {;SSD.c: 81:         SSD_current++;
  1517  0511  3001               	movlw	1
  1518  0512  00F6               	movwf	??_SSD_Update
  1519  0513  0876               	movf	??_SSD_Update,w
  1520  0514  07FD               	addwf	_SSD_current,f
  1521  0515                     l103:	
  1522  0515  0008               	return
  1523  0516                     __end_of_SSD_Update:	
  1524                           
  1525                           	psect	text6
  1526  0480                     __ptext6:	
  1527 ;; *************** function _SSD_SetValue *****************
  1528 ;; Defined at:
  1529 ;;		line 95 in file "SSD.c"
  1530 ;; Parameters:    Size  Location     Type
  1531 ;;  ssd             1    wreg     enum E852
  1532 ;;  ssd_symbol      1    0[COMMON] enum E861
  1533 ;; Auto vars:     Size  Location     Type
  1534 ;;  ssd             1    2[COMMON] enum E852
  1535 ;; Return value:  Size  Location     Type
  1536 ;;                  1    wreg      void 
  1537 ;; Registers used:
  1538 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1539 ;; Tracked objects:
  1540 ;;		On entry : 0/0
  1541 ;;		On exit  : 0/0
  1542 ;;		Unchanged: 0/0
  1543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1544 ;;      Params:         1       0       0       0       0
  1545 ;;      Locals:         1       0       0       0       0
  1546 ;;      Temps:          1       0       0       0       0
  1547 ;;      Totals:         3       0       0       0       0
  1548 ;;Total ram usage:        3 bytes
  1549 ;; Hardware stack levels used:    1
  1550 ;; This function calls:
  1551 ;;		Nothing
  1552 ;; This function is called by:
  1553 ;;		_main
  1554 ;; This function uses a non-reentrant model
  1555 ;;
  1556                           
  1557                           
  1558                           ;psect for function _SSD_SetValue
  1559  0480                     _SSD_SetValue:	
  1560                           
  1561                           ;incstack = 0
  1562                           ; Regs used in _SSD_SetValue: [wreg-fsr0h+status,2+status,0]
  1563                           ;SSD_SetValue@ssd stored from wreg
  1564  0480  00F2               	movwf	SSD_SetValue@ssd
  1565  0481                     l1122:	
  1566                           
  1567                           ;SSD.c: 95: void SSD_SetValue(tSSD ssd, tSSD_Symbol ssd_symbol);SSD.c: 96: {;SSD.c: 98: 
      +                              SSD_Values[ssd] = ssd_symbol;
  1568  0481  0870               	movf	SSD_SetValue@ssd_symbol,w
  1569  0482  00F1               	movwf	??_SSD_SetValue
  1570  0483  0872               	movf	SSD_SetValue@ssd,w
  1571  0484  3E2F               	addlw	(low (_SSD_Values| 0))& (0+255)
  1572  0485  0084               	movwf	4
  1573  0486  0871               	movf	??_SSD_SetValue,w
  1574  0487  1383               	bcf	3,7	;select IRP bank0
  1575  0488  0080               	movwf	0
  1576  0489                     l111:	
  1577  0489  0008               	return
  1578  048A                     __end_of_SSD_SetValue:	
  1579                           
  1580                           	psect	text7
  1581  0516                     __ptext7:	
  1582 ;; *************** function _SSD_Init *****************
  1583 ;; Defined at:
  1584 ;;		line 34 in file "SSD.c"
  1585 ;; Parameters:    Size  Location     Type
  1586 ;;		None
  1587 ;; Auto vars:     Size  Location     Type
  1588 ;;		None
  1589 ;; Return value:  Size  Location     Type
  1590 ;;                  1    wreg      void 
  1591 ;; Registers used:
  1592 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1593 ;; Tracked objects:
  1594 ;;		On entry : 0/0
  1595 ;;		On exit  : 0/0
  1596 ;;		Unchanged: 0/0
  1597 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1598 ;;      Params:         0       0       0       0       0
  1599 ;;      Locals:         2       0       0       0       0
  1600 ;;      Temps:          1       0       0       0       0
  1601 ;;      Totals:         3       0       0       0       0
  1602 ;;Total ram usage:        3 bytes
  1603 ;; Hardware stack levels used:    1
  1604 ;; Hardware stack levels required when called:    2
  1605 ;; This function calls:
  1606 ;;		_SSD_Out
  1607 ;;		_SSD_SetState
  1608 ;; This function is called by:
  1609 ;;		_main
  1610 ;; This function uses a non-reentrant model
  1611 ;;
  1612                           
  1613                           
  1614                           ;psect for function _SSD_Init
  1615  0516                     _SSD_Init:	
  1616  0516                     l1020:	
  1617                           ;incstack = 0
  1618                           ; Regs used in _SSD_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1619                           
  1620  0516                     l96:	
  1621  0516  1683               	bsf	3,5	;RP0=1, select bank1
  1622  0517  1303               	bcf	3,6	;RP1=0, select bank1
  1623  0518  0188               	clrf	8	;volatile
  1624  0519                     l1024:	
  1625                           
  1626                           ;SSD.c: 39:     SSD_Out(SSD_FIRST, SSD_NULL);
  1627  0519  3003               	movlw	3
  1628  051A  00F6               	movwf	??_SSD_Init
  1629  051B  0876               	movf	??_SSD_Init,w
  1630  051C  00F4               	movwf	SSD_Out@ssd_symbol
  1631  051D  3000               	movlw	0
  1632  051E  120A  118A  24C2  120A  118A  	fcall	_SSD_Out
  1633  0523                     l1026:	
  1634                           
  1635                           ;SSD.c: 40:     SSD_Out(SSD_SECOND, SSD_NULL);
  1636  0523  3003               	movlw	3
  1637  0524  00F6               	movwf	??_SSD_Init
  1638  0525  0876               	movf	??_SSD_Init,w
  1639  0526  00F4               	movwf	SSD_Out@ssd_symbol
  1640  0527  3001               	movlw	1
  1641  0528  120A  118A  24C2  120A  118A  	fcall	_SSD_Out
  1642  052D                     l1028:	
  1643                           
  1644                           ;SSD.c: 41:     SSD_Out(SSD_THIRD, SSD_NULL);
  1645  052D  3003               	movlw	3
  1646  052E  00F6               	movwf	??_SSD_Init
  1647  052F  0876               	movf	??_SSD_Init,w
  1648  0530  00F4               	movwf	SSD_Out@ssd_symbol
  1649  0531  3002               	movlw	2
  1650  0532  120A  118A  24C2  120A  118A  	fcall	_SSD_Out
  1651  0537                     l1030:	
  1652                           
  1653                           ;SSD.c: 45:             ((((TRISB))) = (((TRISB)) & (~(1 << ((7)))))|((0) << ((7))));
  1654  0537  1683               	bsf	3,5	;RP0=1, select bank1
  1655  0538  1303               	bcf	3,6	;RP1=0, select bank1
  1656  0539  0806               	movf	6,w	;volatile
  1657  053A  397F               	andlw	127
  1658  053B  0086               	movwf	6	;volatile
  1659  053C                     l1032:	
  1660                           
  1661                           ;SSD.c: 47:             ((((TRISB))) = (((TRISB)) & (~(1 << ((6)))))|((0) << ((6))));
  1662  053C  0806               	movf	6,w	;volatile
  1663  053D  39BF               	andlw	191
  1664  053E  0086               	movwf	6	;volatile
  1665  053F                     l1034:	
  1666                           
  1667                           ;SSD.c: 49:             ((((TRISB))) = (((TRISB)) & (~(1 << ((5)))))|((0) << ((5))));
  1668  053F  0806               	movf	6,w	;volatile
  1669  0540  39DF               	andlw	223
  1670  0541  0086               	movwf	6	;volatile
  1671  0542                     l1036:	
  1672                           
  1673                           ;SSD.c: 52:     SSD_SetState(SSD_FIRST, SSD_OFF);
  1674  0542  01F0               	clrf	SSD_SetState@state
  1675  0543  3000               	movlw	0
  1676  0544  120A  118A  2558  120A  118A  	fcall	_SSD_SetState
  1677  0549                     l1038:	
  1678                           
  1679                           ;SSD.c: 53:     SSD_SetState(SSD_SECOND, SSD_OFF);
  1680  0549  01F0               	clrf	SSD_SetState@state
  1681  054A  3001               	movlw	1
  1682  054B  120A  118A  2558  120A  118A  	fcall	_SSD_SetState
  1683  0550                     l1040:	
  1684                           
  1685                           ;SSD.c: 54:     SSD_SetState(SSD_THIRD, SSD_OFF);
  1686  0550  01F0               	clrf	SSD_SetState@state
  1687  0551  3002               	movlw	2
  1688  0552  120A  118A  2558  120A  118A  	fcall	_SSD_SetState
  1689  0557                     l97:	
  1690  0557  0008               	return
  1691  0558                     __end_of_SSD_Init:	
  1692                           
  1693                           	psect	text8
  1694  04C2                     __ptext8:	
  1695 ;; *************** function _SSD_Out *****************
  1696 ;; Defined at:
  1697 ;;		line 148 in file "SSD.c"
  1698 ;; Parameters:    Size  Location     Type
  1699 ;;  ssd             1    wreg     enum E852
  1700 ;;  ssd_symbol      1    4[COMMON] enum E861
  1701 ;; Auto vars:     Size  Location     Type
  1702 ;;  ssd             1    5[COMMON] enum E852
  1703 ;; Return value:  Size  Location     Type
  1704 ;;                  1    wreg      void 
  1705 ;; Registers used:
  1706 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1707 ;; Tracked objects:
  1708 ;;		On entry : 0/0
  1709 ;;		On exit  : 0/0
  1710 ;;		Unchanged: 0/0
  1711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1712 ;;      Params:         1       0       0       0       0
  1713 ;;      Locals:         1       0       0       0       0
  1714 ;;      Temps:          0       0       0       0       0
  1715 ;;      Totals:         2       0       0       0       0
  1716 ;;Total ram usage:        2 bytes
  1717 ;; Hardware stack levels used:    1
  1718 ;; Hardware stack levels required when called:    1
  1719 ;; This function calls:
  1720 ;;		_SSD_SetState
  1721 ;; This function is called by:
  1722 ;;		_SSD_Init
  1723 ;;		_SSD_Update
  1724 ;; This function uses a non-reentrant model
  1725 ;;
  1726                           
  1727                           
  1728                           ;psect for function _SSD_Out
  1729  04C2                     _SSD_Out:	
  1730                           
  1731                           ;incstack = 0
  1732                           ; Regs used in _SSD_Out: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1733                           ;SSD_Out@ssd stored from wreg
  1734  04C2  00F5               	movwf	SSD_Out@ssd
  1735  04C3                     l980:	
  1736                           
  1737                           ;SSD.c: 148: static void SSD_Out(tSSD ssd, tSSD_Symbol ssd_symbol);SSD.c: 149: {;SSD.c: 
      +                          151:     SSD_SetState(SSD_FIRST, SSD_OFF);
  1738  04C3  01F0               	clrf	SSD_SetState@state
  1739  04C4  3000               	movlw	0
  1740  04C5  120A  118A  2558  120A  118A  	fcall	_SSD_SetState
  1741                           
  1742                           ;SSD.c: 152:     SSD_SetState(SSD_SECOND, SSD_OFF);
  1743  04CA  01F0               	clrf	SSD_SetState@state
  1744  04CB  3001               	movlw	1
  1745  04CC  120A  118A  2558  120A  118A  	fcall	_SSD_SetState
  1746                           
  1747                           ;SSD.c: 153:     SSD_SetState(SSD_THIRD, SSD_OFF);
  1748  04D1  01F0               	clrf	SSD_SetState@state
  1749  04D2  3002               	movlw	2
  1750  04D3  120A  118A  2558  120A  118A  	fcall	_SSD_SetState
  1751  04D8                     l982:	
  1752                           
  1753                           ;SSD.c: 156:     ((((PORTD))) = (SSD_Data[ssd_symbol]));
  1754  04D8  0874               	movf	SSD_Out@ssd_symbol,w
  1755  04D9  3E2B               	addlw	(low (_SSD_Data| 0))& (0+255)
  1756  04DA  0084               	movwf	4
  1757  04DB  1383               	bcf	3,7	;select IRP bank0
  1758  04DC  0800               	movf	0,w
  1759  04DD  1283               	bcf	3,5	;RP0=0, select bank0
  1760  04DE  1303               	bcf	3,6	;RP1=0, select bank0
  1761  04DF  0088               	movwf	8	;volatile
  1762  04E0                     l984:	
  1763                           
  1764                           ;SSD.c: 160:     SSD_SetState(ssd, SSD_ON);
  1765  04E0  01F0               	clrf	SSD_SetState@state
  1766  04E1  0AF0               	incf	SSD_SetState@state,f
  1767  04E2  0875               	movf	SSD_Out@ssd,w
  1768  04E3  120A  118A  2558  120A  118A  	fcall	_SSD_SetState
  1769  04E8                     l132:	
  1770  04E8  0008               	return
  1771  04E9                     __end_of_SSD_Out:	
  1772                           
  1773                           	psect	text9
  1774  0558                     __ptext9:	
  1775 ;; *************** function _SSD_SetState *****************
  1776 ;; Defined at:
  1777 ;;		line 127 in file "SSD.c"
  1778 ;; Parameters:    Size  Location     Type
  1779 ;;  ssd             1    wreg     enum E852
  1780 ;;  state           1    0[COMMON] enum E857
  1781 ;; Auto vars:     Size  Location     Type
  1782 ;;  ssd             1    3[COMMON] enum E852
  1783 ;; Return value:  Size  Location     Type
  1784 ;;                  1    wreg      void 
  1785 ;; Registers used:
  1786 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1787 ;; Tracked objects:
  1788 ;;		On entry : 0/0
  1789 ;;		On exit  : 0/0
  1790 ;;		Unchanged: 0/0
  1791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1792 ;;      Params:         1       0       0       0       0
  1793 ;;      Locals:         1       0       0       0       0
  1794 ;;      Temps:          2       0       0       0       0
  1795 ;;      Totals:         4       0       0       0       0
  1796 ;;Total ram usage:        4 bytes
  1797 ;; Hardware stack levels used:    1
  1798 ;; This function calls:
  1799 ;;		Nothing
  1800 ;; This function is called by:
  1801 ;;		_SSD_Init
  1802 ;;		_SSD_Out
  1803 ;; This function uses a non-reentrant model
  1804 ;;
  1805                           
  1806                           
  1807                           ;psect for function _SSD_SetState
  1808  0558                     _SSD_SetState:	
  1809                           
  1810                           ;incstack = 0
  1811                           ; Regs used in _SSD_SetState: [wreg-fsr0h+status,2+status,0]
  1812                           ;SSD_SetState@ssd stored from wreg
  1813  0558  00F3               	movwf	SSD_SetState@ssd
  1814  0559                     l964:	
  1815                           
  1816                           ;SSD.c: 127: void SSD_SetState(tSSD ssd, tSSD_State state);SSD.c: 128: {;SSD.c: 130:    
      +                           switch (ssd)
  1817  0559  2D87               	goto	l974
  1818  055A                     l966:	
  1819                           
  1820                           ;SSD.c: 133:             ((((PORTB))) = (((PORTB)) & (~(1 << ((7)))))|(state << ((7))));
  1821  055A  0870               	movf	SSD_SetState@state,w
  1822  055B  00F1               	movwf	??_SSD_SetState
  1823  055C  3007               	movlw	7
  1824  055D                     u245:	
  1825  055D  1003               	clrc
  1826  055E  0DF1               	rlf	??_SSD_SetState,f
  1827  055F  3EFF               	addlw	-1
  1828  0560  1D03               	skipz
  1829  0561  2D5D               	goto	u245
  1830  0562  1283               	bcf	3,5	;RP0=0, select bank0
  1831  0563  1303               	bcf	3,6	;RP1=0, select bank0
  1832  0564  0806               	movf	6,w	;volatile
  1833  0565  397F               	andlw	127
  1834  0566  0471               	iorwf	??_SSD_SetState,w
  1835  0567  0086               	movwf	6	;volatile
  1836                           
  1837                           ;SSD.c: 134:             break;
  1838  0568  2D9A               	goto	l129
  1839  0569                     l968:	
  1840                           
  1841                           ;SSD.c: 136:             ((((PORTB))) = (((PORTB)) & (~(1 << ((6)))))|(state << ((6))));
  1842  0569  0870               	movf	SSD_SetState@state,w
  1843  056A  00F1               	movwf	??_SSD_SetState
  1844  056B  3006               	movlw	6
  1845  056C                     u255:	
  1846  056C  1003               	clrc
  1847  056D  0DF1               	rlf	??_SSD_SetState,f
  1848  056E  3EFF               	addlw	-1
  1849  056F  1D03               	skipz
  1850  0570  2D6C               	goto	u255
  1851  0571  1283               	bcf	3,5	;RP0=0, select bank0
  1852  0572  1303               	bcf	3,6	;RP1=0, select bank0
  1853  0573  0806               	movf	6,w	;volatile
  1854  0574  39BF               	andlw	191
  1855  0575  0471               	iorwf	??_SSD_SetState,w
  1856  0576  0086               	movwf	6	;volatile
  1857                           
  1858                           ;SSD.c: 137:             break;
  1859  0577  2D9A               	goto	l129
  1860  0578                     l970:	
  1861                           
  1862                           ;SSD.c: 139:             ((((PORTB))) = (((PORTB)) & (~(1 << ((5)))))|(state << ((5))));
  1863  0578  0870               	movf	SSD_SetState@state,w
  1864  0579  00F1               	movwf	??_SSD_SetState
  1865  057A  3005               	movlw	5
  1866  057B                     u265:	
  1867  057B  1003               	clrc
  1868  057C  0DF1               	rlf	??_SSD_SetState,f
  1869  057D  3EFF               	addlw	-1
  1870  057E  1D03               	skipz
  1871  057F  2D7B               	goto	u265
  1872  0580  1283               	bcf	3,5	;RP0=0, select bank0
  1873  0581  1303               	bcf	3,6	;RP1=0, select bank0
  1874  0582  0806               	movf	6,w	;volatile
  1875  0583  39DF               	andlw	223
  1876  0584  0471               	iorwf	??_SSD_SetState,w
  1877  0585  0086               	movwf	6	;volatile
  1878                           
  1879                           ;SSD.c: 140:             break;
  1880  0586  2D9A               	goto	l129
  1881  0587                     l974:	
  1882  0587  0873               	movf	SSD_SetState@ssd,w
  1883  0588  00F1               	movwf	??_SSD_SetState
  1884  0589  01F2               	clrf	??_SSD_SetState+1
  1885                           
  1886                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1887                           ; Switch size 1, requested type "simple"
  1888                           ; Number of cases is 1, Range of values is 0 to 0
  1889                           ; switch strategies available:
  1890                           ; Name         Instructions Cycles
  1891                           ; simple_byte            4     3 (average)
  1892                           ; direct_byte           11     8 (fixed)
  1893                           ; jumptable            260     6 (fixed)
  1894                           ;	Chosen strategy is simple_byte
  1895  058A  0872               	movf	??_SSD_SetState+1,w
  1896  058B  3A00               	xorlw	0	; case 0
  1897  058C  1903               	skipnz
  1898  058D  2D8F               	goto	l1188
  1899  058E  2D9A               	goto	l129
  1900  058F                     l1188:	
  1901                           
  1902                           ; Switch size 1, requested type "simple"
  1903                           ; Number of cases is 3, Range of values is 0 to 2
  1904                           ; switch strategies available:
  1905                           ; Name         Instructions Cycles
  1906                           ; simple_byte           10     6 (average)
  1907                           ; direct_byte           17     8 (fixed)
  1908                           ; jumptable            260     6 (fixed)
  1909                           ;	Chosen strategy is simple_byte
  1910  058F  0871               	movf	??_SSD_SetState,w
  1911  0590  3A00               	xorlw	0	; case 0
  1912  0591  1903               	skipnz
  1913  0592  2D5A               	goto	l966
  1914  0593  3A01               	xorlw	1	; case 1
  1915  0594  1903               	skipnz
  1916  0595  2D69               	goto	l968
  1917  0596  3A03               	xorlw	3	; case 2
  1918  0597  1903               	skipnz
  1919  0598  2D78               	goto	l970
  1920  0599  2D9A               	goto	l129
  1921  059A                     l129:	
  1922  059A  0008               	return
  1923  059B                     __end_of_SSD_SetState:	
  1924  007E                     btemp	set	126	;btemp
  1925  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        7
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      14
    BANK0            80      0      18
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_SSD_Init
    _SW_Update->___bmul
    _SW_Init->___bmul
    _SW_GetState->___bmul
    _SSD_Update->_SSD_Out
    _SSD_Init->_SSD_Out
    _SSD_Out->_SSD_SetState

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    5744
                                              9 COMMON     2     2      0
                           _SSD_Init
                       _SSD_SetValue
                         _SSD_Update
                        _SW_GetState
                            _SW_Init
                          _SW_Update
 ---------------------------------------------------------------------------------
 (1) _SW_Update                                            4     4      0    1077
                                              4 COMMON     4     4      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (1) _SW_Init                                              2     2      0     725
                                              4 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (1) _SW_GetState                                          2     2      0     634
                                              4 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     612
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _SSD_Update                                           1     1      0     968
                                              6 COMMON     1     1      0
                            _SSD_Out
 ---------------------------------------------------------------------------------
 (1) _SSD_SetValue                                         3     2      1     728
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _SSD_Init                                             3     3      0    1612
                                              6 COMMON     3     3      0
                            _SSD_Out
                       _SSD_SetState
 ---------------------------------------------------------------------------------
 (2) _SSD_Out                                              2     1      1     968
                                              4 COMMON     2     1      1
                       _SSD_SetState
 ---------------------------------------------------------------------------------
 (3) _SSD_SetState                                         4     3      1     620
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SSD_Init
     _SSD_Out
       _SSD_SetState
     _SSD_SetState
   _SSD_SetValue
   _SSD_Update
     _SSD_Out
       _SSD_SetState
   _SW_GetState
     ___bmul
   _SW_Init
     ___bmul
   _SW_Update
     ___bmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0      12       5       22.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      B       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      20      12        0.0%
ABS                  0      0      20       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Wed Jan 15 01:18:42 2020

             _SSD_Values 002F                        pc 0002               _SSD_Update 04E9  
         ___bmul@product 0072              __CFG_CP$OFF 0000      __end_of_SW_GetState 049A  
                     l23 0675                       l40 05E0                       l43 0499  
                     l53 0702                       l49 07DF                       l96 0516  
                     l97 0557                       fsr 0004             _SSD_SetValue 0480  
           _SSD_SetState 0558                      l111 0489                      l103 0515  
                    l132 04E8                      l129 059A                      l244 04C1  
                    l970 0578                      l964 0559                      l980 04C3  
                    l966 055A                      l974 0587                      l982 04D8  
                    l990 04B3                      l968 0569                      l984 04E0  
                    l992 04B7                      l994 04B9                      l986 04AE  
                    l996 04C0                      l988 04AF                      u300 0686  
                    u301 0685                      u310 06AD                      u311 06AC  
                    u400 07A3                      u320 06C7                      u401 07A2  
                    u321 06C6                      u410 07DF                      u330 06E5  
                    u411 07DE                      u331 06E4                      u420 04F8  
                    u245 055D                      u421 04F7                      u430 050F  
                    u270 04B3                      u350 0715                      u255 056C  
                    u431 050E                      u271 04B2                      u351 0714  
                    u280 04C0                      u360 0727                      u440 060F  
                    u265 057B                      u281 04BF                      u361 0726  
                    u345 06EA                      u441 060E                      u290 05E0  
                    u370 0749                      u450 0636             __CFG_CPD$OFF 0000  
                    u291 05DF                      u371 0748                      u451 0635  
                    u380 076D                      u460 065B                      u381 076C  
                    u461 065A                      u390 077F                      u391 077E  
                    u477 05EF                      fsr0 0004                      indf 0000  
    SW_Update@SW_counter 007B             __CFG_FOSC$XT 0000              _SSD_current 007D  
           __CFG_LVP$OFF 0000                     l1000 059B                     l1002 059B  
                   l1020 0516                     l1004 05A1                     l1030 0537  
                   l1110 04FB                     l1102 04E9                     l1014 05AA  
                   l1006 05A5                     l1040 0550                     l1032 053C  
                   l1024 0519                     l1112 0509                     l1104 04F1  
                   l1016 05D6                     l1008 05A9                     l1034 053F  
                   l1026 0523                     l1122 0481                     l1114 050F  
                   l1018 05DA                     l1050 0687                     l1042 0679  
                   l1130 05F9                     l1036 0542                     l1028 052D  
                   l1116 0511                     l1108 04F9                     l1060 06AD  
                   l1044 0679                     l1140 0636                     l1132 05FE  
                   l1124 05E1                     l1038 0549                     l1118 048B  
                   l1070 0703                     l1062 06C2                     l1046 067F  
                   l1142 0650                     l1134 0604                     l1126 05EB  
                   l1080 075B                     l1072 0715                     l1064 06C7  
                   l1056 068A                     l1144 065B                     l1136 060F  
                   l1128 05F4                     l1082 076D                     l1074 0727  
                   l1066 06DF                     l1058 06A8                     l1138 062B  
                   l1084 077F                     l1076 0737                     l1068 06E5  
                   l1092 07B2                     l1086 0791                     l1078 0749  
                   l1094 07D5                     l1096 07D9                     l1088 07A3  
                   l1186 07C7                     l1188 058F             __CFG_WRT$OFF 0000  
                   _main 05E1                     btemp 007E          __end_of_SSD_Out 04E9  
                   start 0000          __end_of_SW_Init 05E1        ___bmul@multiplier 0073  
                  ?_main 0070            __CFG_WDTE$OFF 0000                    _PORTB 0006  
                  _PORTD 0008                    _TRISB 0086                    _TRISD 0088  
       __end_of_SSD_Init 0558           __CFG_BOREN$OFF 0000                    pclath 000A  
                  status 0003                    wtemp0 007E              _SW_GetState 048A  
        __initialization 07E0             __end_of_main 0679              ?_SSD_Update 0070  
                 ??_main 0079       __size_of_SW_Update 0167           SW_Update@index 0077  
              ??_SSD_Out 0075                ??_SW_Init 0074           __CFG_PWRTE$OFF 0000  
                 ___bmul 04AD      __size_of_SSD_Update 002D  __end_of__initialization 07FC  
      __end_of_SW_Update 07E0      ___bmul@multiplicand 0070           __pcstackCOMMON 0070  
           __pidataBANK0 0479                ?_SSD_Init 0070   SSD_SetValue@ssd_symbol 0070  
          SW_GetState@sw 0075               __pbssBANK0 0020               __pmaintext 05E1  
                ?___bmul 0070               ??_SSD_Init 0076                  _SSD_Out 04C2  
        SSD_SetValue@ssd 0072                  _SW_Init 059B          SSD_SetState@ssd 0073  
           ?_SW_GetState 0070          __size_of___bmul 0015             ??_SSD_Update 0076  
                __ptext1 0679                  __ptext2 059B                  __ptext3 048A  
                __ptext4 04AD                  __ptext5 04E9                  __ptext6 0480  
                __ptext7 0516                  __ptext8 04C2                  __ptext9 0558  
   end_of_initialization 07FC       __end_of_SSD_Update 0516                _SW_Update 0679  
         __end_of___bmul 04C2            ?_SSD_SetValue 0070            ?_SSD_SetState 0070  
      __size_of_SSD_Init 0042      start_initialization 07E0        SSD_SetState@state 0070  
               ??___bmul 0071     __size_of_SW_GetState 0010               init_fetch0 049A  
             ?_SW_Update 0070              __pdataBANK0 002B           ??_SSD_SetValue 0071  
         ??_SSD_SetState 0071              __pbssCOMMON 007B                ___latbits 0002  
  SSD_Update@SSD_counter 0029                 ?_SSD_Out 0074                 ?_SW_Init 0070  
           SW_Init@index 0075              ??_SW_Update 0074                 _SSD_Data 002B  
               _SSD_Init 0516                 _SWs_Info 0020         __size_of_SSD_Out 0027  
   __end_of_SSD_SetValue 048A     __end_of_SSD_SetState 059B         __size_of_SW_Init 0046  
             SSD_Out@ssd 0075        SSD_Out@ssd_symbol 0074            __size_of_main 0098  
               init_ram0 049E            ??_SW_GetState 0074    __size_of_SSD_SetValue 000A  
  __size_of_SSD_SetState 0043  
