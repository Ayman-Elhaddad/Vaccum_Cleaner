

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Wed Jan 15 14:08:31 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	dabs	1,0x7E,2
    22  0000                     
    23                           ; Version 2.10
    24                           ; Generated 31/07/2019 GMT
    25                           ; 
    26                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F877A Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     	;# 
    58  0001                     	;# 
    59  0002                     	;# 
    60  0003                     	;# 
    61  0004                     	;# 
    62  0005                     	;# 
    63  0006                     	;# 
    64  0007                     	;# 
    65  0008                     	;# 
    66  0009                     	;# 
    67  000A                     	;# 
    68  000B                     	;# 
    69  000C                     	;# 
    70  000D                     	;# 
    71  000E                     	;# 
    72  000E                     	;# 
    73  000F                     	;# 
    74  0010                     	;# 
    75  0011                     	;# 
    76  0012                     	;# 
    77  0013                     	;# 
    78  0014                     	;# 
    79  0015                     	;# 
    80  0015                     	;# 
    81  0016                     	;# 
    82  0017                     	;# 
    83  0018                     	;# 
    84  0019                     	;# 
    85  001A                     	;# 
    86  001B                     	;# 
    87  001B                     	;# 
    88  001C                     	;# 
    89  001D                     	;# 
    90  001E                     	;# 
    91  001F                     	;# 
    92  0081                     	;# 
    93  0085                     	;# 
    94  0086                     	;# 
    95  0087                     	;# 
    96  0088                     	;# 
    97  0089                     	;# 
    98  008C                     	;# 
    99  008D                     	;# 
   100  008E                     	;# 
   101  0091                     	;# 
   102  0092                     	;# 
   103  0093                     	;# 
   104  0094                     	;# 
   105  0098                     	;# 
   106  0099                     	;# 
   107  009C                     	;# 
   108  009D                     	;# 
   109  009E                     	;# 
   110  009F                     	;# 
   111  010C                     	;# 
   112  010D                     	;# 
   113  010E                     	;# 
   114  010F                     	;# 
   115  018C                     	;# 
   116  018D                     	;# 
   117  0000                     	;# 
   118  0001                     	;# 
   119  0002                     	;# 
   120  0003                     	;# 
   121  0004                     	;# 
   122  0005                     	;# 
   123  0006                     	;# 
   124  0007                     	;# 
   125  0008                     	;# 
   126  0009                     	;# 
   127  000A                     	;# 
   128  000B                     	;# 
   129  000C                     	;# 
   130  000D                     	;# 
   131  000E                     	;# 
   132  000E                     	;# 
   133  000F                     	;# 
   134  0010                     	;# 
   135  0011                     	;# 
   136  0012                     	;# 
   137  0013                     	;# 
   138  0014                     	;# 
   139  0015                     	;# 
   140  0015                     	;# 
   141  0016                     	;# 
   142  0017                     	;# 
   143  0018                     	;# 
   144  0019                     	;# 
   145  001A                     	;# 
   146  001B                     	;# 
   147  001B                     	;# 
   148  001C                     	;# 
   149  001D                     	;# 
   150  001E                     	;# 
   151  001F                     	;# 
   152  0081                     	;# 
   153  0085                     	;# 
   154  0086                     	;# 
   155  0087                     	;# 
   156  0088                     	;# 
   157  0089                     	;# 
   158  008C                     	;# 
   159  008D                     	;# 
   160  008E                     	;# 
   161  0091                     	;# 
   162  0092                     	;# 
   163  0093                     	;# 
   164  0094                     	;# 
   165  0098                     	;# 
   166  0099                     	;# 
   167  009C                     	;# 
   168  009D                     	;# 
   169  009E                     	;# 
   170  009F                     	;# 
   171  010C                     	;# 
   172  010D                     	;# 
   173  010E                     	;# 
   174  010F                     	;# 
   175  018C                     	;# 
   176  018D                     	;# 
   177  0000                     	;# 
   178  0001                     	;# 
   179  0002                     	;# 
   180  0003                     	;# 
   181  0004                     	;# 
   182  0005                     	;# 
   183  0006                     	;# 
   184  0007                     	;# 
   185  0008                     	;# 
   186  0009                     	;# 
   187  000A                     	;# 
   188  000B                     	;# 
   189  000C                     	;# 
   190  000D                     	;# 
   191  000E                     	;# 
   192  000E                     	;# 
   193  000F                     	;# 
   194  0010                     	;# 
   195  0011                     	;# 
   196  0012                     	;# 
   197  0013                     	;# 
   198  0014                     	;# 
   199  0015                     	;# 
   200  0015                     	;# 
   201  0016                     	;# 
   202  0017                     	;# 
   203  0018                     	;# 
   204  0019                     	;# 
   205  001A                     	;# 
   206  001B                     	;# 
   207  001B                     	;# 
   208  001C                     	;# 
   209  001D                     	;# 
   210  001E                     	;# 
   211  001F                     	;# 
   212  0081                     	;# 
   213  0085                     	;# 
   214  0086                     	;# 
   215  0087                     	;# 
   216  0088                     	;# 
   217  0089                     	;# 
   218  008C                     	;# 
   219  008D                     	;# 
   220  008E                     	;# 
   221  0091                     	;# 
   222  0092                     	;# 
   223  0093                     	;# 
   224  0094                     	;# 
   225  0098                     	;# 
   226  0099                     	;# 
   227  009C                     	;# 
   228  009D                     	;# 
   229  009E                     	;# 
   230  009F                     	;# 
   231  010C                     	;# 
   232  010D                     	;# 
   233  010E                     	;# 
   234  010F                     	;# 
   235  018C                     	;# 
   236  018D                     	;# 
   237  0000                     	;# 
   238  0001                     	;# 
   239  0002                     	;# 
   240  0003                     	;# 
   241  0004                     	;# 
   242  0005                     	;# 
   243  0006                     	;# 
   244  0007                     	;# 
   245  0008                     	;# 
   246  0009                     	;# 
   247  000A                     	;# 
   248  000B                     	;# 
   249  000C                     	;# 
   250  000D                     	;# 
   251  000E                     	;# 
   252  000E                     	;# 
   253  000F                     	;# 
   254  0010                     	;# 
   255  0011                     	;# 
   256  0012                     	;# 
   257  0013                     	;# 
   258  0014                     	;# 
   259  0015                     	;# 
   260  0015                     	;# 
   261  0016                     	;# 
   262  0017                     	;# 
   263  0018                     	;# 
   264  0019                     	;# 
   265  001A                     	;# 
   266  001B                     	;# 
   267  001B                     	;# 
   268  001C                     	;# 
   269  001D                     	;# 
   270  001E                     	;# 
   271  001F                     	;# 
   272  0081                     	;# 
   273  0085                     	;# 
   274  0086                     	;# 
   275  0087                     	;# 
   276  0088                     	;# 
   277  0089                     	;# 
   278  008C                     	;# 
   279  008D                     	;# 
   280  008E                     	;# 
   281  0091                     	;# 
   282  0092                     	;# 
   283  0093                     	;# 
   284  0094                     	;# 
   285  0098                     	;# 
   286  0099                     	;# 
   287  009C                     	;# 
   288  009D                     	;# 
   289  009E                     	;# 
   290  009F                     	;# 
   291  010C                     	;# 
   292  010D                     	;# 
   293  010E                     	;# 
   294  010F                     	;# 
   295  018C                     	;# 
   296  018D                     	;# 
   297  0000                     	;# 
   298  0001                     	;# 
   299  0002                     	;# 
   300  0003                     	;# 
   301  0004                     	;# 
   302  0005                     	;# 
   303  0006                     	;# 
   304  0007                     	;# 
   305  0008                     	;# 
   306  0009                     	;# 
   307  000A                     	;# 
   308  000B                     	;# 
   309  000C                     	;# 
   310  000D                     	;# 
   311  000E                     	;# 
   312  000E                     	;# 
   313  000F                     	;# 
   314  0010                     	;# 
   315  0011                     	;# 
   316  0012                     	;# 
   317  0013                     	;# 
   318  0014                     	;# 
   319  0015                     	;# 
   320  0015                     	;# 
   321  0016                     	;# 
   322  0017                     	;# 
   323  0018                     	;# 
   324  0019                     	;# 
   325  001A                     	;# 
   326  001B                     	;# 
   327  001B                     	;# 
   328  001C                     	;# 
   329  001D                     	;# 
   330  001E                     	;# 
   331  001F                     	;# 
   332  0081                     	;# 
   333  0085                     	;# 
   334  0086                     	;# 
   335  0087                     	;# 
   336  0088                     	;# 
   337  0089                     	;# 
   338  008C                     	;# 
   339  008D                     	;# 
   340  008E                     	;# 
   341  0091                     	;# 
   342  0092                     	;# 
   343  0093                     	;# 
   344  0094                     	;# 
   345  0098                     	;# 
   346  0099                     	;# 
   347  009C                     	;# 
   348  009D                     	;# 
   349  009E                     	;# 
   350  009F                     	;# 
   351  010C                     	;# 
   352  010D                     	;# 
   353  010E                     	;# 
   354  010F                     	;# 
   355  018C                     	;# 
   356  018D                     	;# 
   357                           
   358                           	psect	idataBANK0
   359  047F                     __pidataBANK0:	
   360                           
   361                           ;initializer for _SSD_Data
   362  047F  3408               	retlw	8
   363  0480  3448               	retlw	72
   364  0481  3449               	retlw	73
   365  0482  3400               	retlw	0
   366                           
   367                           ;initializer for _SSD_Values
   368  0483  3403               	retlw	3
   369  0484  3400               	retlw	0
   370  0485  3400               	retlw	0
   371  0008                     _PORTD	set	8
   372  0006                     _PORTB	set	6
   373  0088                     _TRISD	set	136
   374  0086                     _TRISB	set	134
   375                           
   376                           ; #config settings
   377  0000                     
   378                           	psect	cinit
   379  07E0                     start_initialization:	
   380  07E0                     __initialization:	
   381                           
   382                           ; Initialize objects allocated to BANK0
   383  07E0  1383               	bcf	3,7	;select IRP bank0
   384  07E1  3032               	movlw	low (__pdataBANK0+7)
   385  07E2  00FD               	movwf	btemp+-1
   386  07E3  3004               	movlw	high __pidataBANK0
   387  07E4  00FE               	movwf	btemp
   388  07E5  307F               	movlw	low __pidataBANK0
   389  07E6  00FF               	movwf	btemp+1
   390  07E7  302B               	movlw	low __pdataBANK0
   391  07E8  0084               	movwf	4
   392  07E9  120A  118A  24A4  120A  118A  	fcall	init_ram0
   393                           
   394                           ; Clear objects allocated to BANK0
   395  07EE  01A0               	clrf	__pbssBANK0& (0+127)
   396  07EF  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   397  07F0  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   398  07F1  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   399  07F2  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   400  07F3  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   401  07F4  01A6               	clrf	(__pbssBANK0+6)& (0+127)
   402  07F5  01A7               	clrf	(__pbssBANK0+7)& (0+127)
   403  07F6  01A8               	clrf	(__pbssBANK0+8)& (0+127)
   404  07F7  01A9               	clrf	(__pbssBANK0+9)& (0+127)
   405  07F8  01AA               	clrf	(__pbssBANK0+10)& (0+127)
   406                           
   407                           ; Clear objects allocated to COMMON
   408  07F9  01FB               	clrf	__pbssCOMMON& (0+127)
   409  07FA  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
   410  07FB  01FD               	clrf	(__pbssCOMMON+2)& (0+127)
   411  07FC                     end_of_initialization:	
   412                           ;End of C runtime variable initialization code
   413                           
   414  07FC                     __end_of__initialization:	
   415  07FC  0183               	clrf	3
   416  07FD  120A  118A  2DE7   	ljmp	_main	;jump to C main() function
   417                           
   418                           	psect	bssCOMMON
   419  007B                     __pbssCOMMON:	
   420  007B                     SW_Update@SW_counter:	
   421  007B                     	ds	2
   422  007D                     _SSD_current:	
   423  007D                     	ds	1
   424                           
   425                           	psect	bssBANK0
   426  0020                     __pbssBANK0:	
   427  0020                     _SWs_Info:	
   428  0020                     	ds	9
   429  0029                     SSD_Update@SSD_counter:	
   430  0029                     	ds	2
   431                           
   432                           	psect	dataBANK0
   433  002B                     __pdataBANK0:	
   434  002B                     _SSD_Data:	
   435  002B                     	ds	4
   436  002F                     _SSD_Values:	
   437  002F                     	ds	3
   438                           
   439                           	psect	inittext
   440  04A0                     init_fetch0:	
   441                           ;	Called with low address in FSR and high address in W
   442                           
   443  04A0  087E               	movf	btemp,w
   444  04A1  008A               	movwf	10
   445  04A2  087F               	movf	btemp+1,w
   446  04A3  0082               	movwf	2
   447  04A4                     init_ram0:	
   448                           ;Called with:
   449                           ;	high address of idata address in btemp 
   450                           ;	low address of idata address in btemp+1 
   451                           ;	low address of data in FSR
   452                           ;	high address + 1 of data in btemp-1
   453                           
   454  04A4  120A  118A  24A0  120A  118A  	fcall	init_fetch0
   455  04A9  0080               	movwf	0
   456  04AA  0A84               	incf	4,f
   457  04AB  0804               	movf	4,w
   458  04AC  067D               	xorwf	btemp+-1,w
   459  04AD  1903               	btfsc	3,2
   460  04AE  3400               	retlw	0
   461  04AF  0AFF               	incf	btemp+1,f
   462  04B0  1903               	btfsc	3,2
   463  04B1  0AFE               	incf	btemp,f
   464  04B2  2CA4               	goto	init_ram0
   465                           
   466                           	psect	cstackCOMMON
   467  0070                     __pcstackCOMMON:	
   468  0070                     ?_SW_Init:	
   469  0070                     ?_SSD_Init:	
   470                           ; 1 bytes @ 0x0
   471                           
   472  0070                     ?_SW_Update:	
   473                           ; 1 bytes @ 0x0
   474                           
   475  0070                     ?_SSD_Update:	
   476                           ; 1 bytes @ 0x0
   477                           
   478  0070                     ?_SW_GetState:	
   479                           ; 1 bytes @ 0x0
   480                           
   481  0070                     ?_SSD_SetValue:	
   482                           ; 1 bytes @ 0x0
   483                           
   484  0070                     ?_SSD_SetState:	
   485                           ; 1 bytes @ 0x0
   486                           
   487  0070                     ?___bmul:	
   488                           ; 1 bytes @ 0x0
   489                           
   490  0070                     ?_main:	
   491                           ; 1 bytes @ 0x0
   492                           
   493  0070                     SSD_SetValue@ssd_symbol:	
   494                           ; 2 bytes @ 0x0
   495                           
   496  0070                     SSD_SetState@state:	
   497                           ; 1 bytes @ 0x0
   498                           
   499  0070                     ___bmul@multiplicand:	
   500                           ; 1 bytes @ 0x0
   501                           
   502                           
   503                           ; 1 bytes @ 0x0
   504  0070                     	ds	1
   505  0071                     ??_SSD_SetValue:	
   506  0071                     ??_SSD_SetState:	
   507                           ; 1 bytes @ 0x1
   508                           
   509  0071                     ??___bmul:	
   510                           ; 1 bytes @ 0x1
   511                           
   512                           
   513                           ; 1 bytes @ 0x1
   514  0071                     	ds	1
   515  0072                     SSD_SetValue@ssd:	
   516  0072                     ___bmul@product:	
   517                           ; 1 bytes @ 0x2
   518                           
   519                           
   520                           ; 1 bytes @ 0x2
   521  0072                     	ds	1
   522  0073                     SSD_SetState@ssd:	
   523  0073                     ___bmul@multiplier:	
   524                           ; 1 bytes @ 0x3
   525                           
   526                           
   527                           ; 1 bytes @ 0x3
   528  0073                     	ds	1
   529  0074                     ??_SW_Init:	
   530  0074                     ??_SW_Update:	
   531                           ; 1 bytes @ 0x4
   532                           
   533  0074                     ??_SW_GetState:	
   534                           ; 1 bytes @ 0x4
   535                           
   536  0074                     ?_SSD_Out:	
   537                           ; 1 bytes @ 0x4
   538                           
   539  0074                     SSD_Out@ssd_symbol:	
   540                           ; 1 bytes @ 0x4
   541                           
   542                           
   543                           ; 1 bytes @ 0x4
   544  0074                     	ds	1
   545  0075                     ??_SSD_Out:	
   546  0075                     SW_Init@index:	
   547                           ; 1 bytes @ 0x5
   548                           
   549  0075                     SW_GetState@sw:	
   550                           ; 1 bytes @ 0x5
   551                           
   552  0075                     SSD_Out@ssd:	
   553                           ; 1 bytes @ 0x5
   554                           
   555                           
   556                           ; 1 bytes @ 0x5
   557  0075                     	ds	1
   558  0076                     ??_SSD_Init:	
   559  0076                     ??_SSD_Update:	
   560                           ; 1 bytes @ 0x6
   561                           
   562                           
   563                           ; 1 bytes @ 0x6
   564  0076                     	ds	1
   565  0077                     SW_Update@index:	
   566                           
   567                           ; 1 bytes @ 0x7
   568  0077                     	ds	2
   569  0079                     ??_main:	
   570                           
   571                           ; 1 bytes @ 0x9
   572  0079                     	ds	2
   573                           
   574                           	psect	maintext
   575  05E7                     __pmaintext:	
   576 ;;
   577 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   578 ;;
   579 ;; *************** function _main *****************
   580 ;; Defined at:
   581 ;;		line 9 in file "vaccum.c"
   582 ;; Parameters:    Size  Location     Type
   583 ;;		None
   584 ;; Auto vars:     Size  Location     Type
   585 ;;		None
   586 ;; Return value:  Size  Location     Type
   587 ;;                  2   18[None  ] int 
   588 ;; Registers used:
   589 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   590 ;; Tracked objects:
   591 ;;		On entry : B00/0
   592 ;;		On exit  : 0/0
   593 ;;		Unchanged: 0/0
   594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   595 ;;      Params:         0       0       0       0       0
   596 ;;      Locals:         0       0       0       0       0
   597 ;;      Temps:          2       0       0       0       0
   598 ;;      Totals:         2       0       0       0       0
   599 ;;Total ram usage:        2 bytes
   600 ;; Hardware stack levels required when called:    3
   601 ;; This function calls:
   602 ;;		_SSD_Init
   603 ;;		_SSD_SetValue
   604 ;;		_SSD_Update
   605 ;;		_SW_GetState
   606 ;;		_SW_Init
   607 ;;		_SW_Update
   608 ;; This function is called by:
   609 ;;		Startup code after reset
   610 ;; This function uses a non-reentrant model
   611 ;;
   612                           
   613                           
   614                           ;psect for function _main
   615  05E7                     _main:	
   616  05E7                     l1129:	
   617                           ;incstack = 0
   618                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   619                           
   620                           
   621                           ;vaccum.c: 11:     SW_Init();
   622  05E7  120A  118A  25A1  120A  118A  	fcall	_SW_Init
   623                           
   624                           ;vaccum.c: 12:     SSD_Init();
   625  05EC  120A  118A  251C  120A  118A  	fcall	_SSD_Init
   626  05F1                     l1131:	
   627                           
   628                           ;vaccum.c: 17:     {;vaccum.c: 18:         _delay((unsigned long)((1)*(80000000/4000.0))
      +                          );
   629  05F1  301A               	movlw	26
   630  05F2  00FA               	movwf	??_main+1
   631  05F3  30F8               	movlw	248
   632  05F4  00F9               	movwf	??_main
   633  05F5                     u477:	
   634  05F5  0BF9               	decfsz	??_main,f
   635  05F6  2DF5               	goto	u477
   636  05F7  0BFA               	decfsz	??_main+1,f
   637  05F8  2DF5               	goto	u477
   638  05F9  0000               	nop
   639  05FA                     l1133:	
   640                           
   641                           ;vaccum.c: 19:         SW_Update();
   642  05FA  120A  118A  2679  120A  118A  	fcall	_SW_Update
   643  05FF                     l1135:	
   644                           
   645                           ;vaccum.c: 20:         SSD_Update();
   646  05FF  120A  118A  24EF  120A  118A  	fcall	_SSD_Update
   647  0604                     l1137:	
   648                           
   649                           ;vaccum.c: 23:         if( SW_GetState(SW_PLUS) == SW_PRESSED )
   650  0604  3000               	movlw	0
   651  0605  120A  118A  2490  120A  118A  	fcall	_SW_GetState
   652  060A  3A02               	xorlw	2
   653  060B  1D03               	skipz
   654  060C  2E0E               	goto	u441
   655  060D  2E0F               	goto	u440
   656  060E                     u441:	
   657  060E  2E2B               	goto	l1141
   658  060F                     u440:	
   659  060F                     l1139:	
   660                           
   661                           ;vaccum.c: 25:         {;vaccum.c: 28:           SSD_SetValue(SSD_FIRST,SSD_LOW);
   662  060F  01F0               	clrf	SSD_SetValue@ssd_symbol
   663  0610  3000               	movlw	0
   664  0611  120A  118A  2486  120A  118A  	fcall	_SSD_SetValue
   665                           
   666                           ;vaccum.c: 29:           SSD_SetValue(SSD_SECOND,SSD_NULL);
   667  0616  3003               	movlw	3
   668  0617  00F9               	movwf	??_main
   669  0618  0879               	movf	??_main,w
   670  0619  00F0               	movwf	SSD_SetValue@ssd_symbol
   671  061A  3001               	movlw	1
   672  061B  120A  118A  2486  120A  118A  	fcall	_SSD_SetValue
   673                           
   674                           ;vaccum.c: 30:           SSD_SetValue(SSD_THIRD,SSD_NULL);
   675  0620  3003               	movlw	3
   676  0621  00F9               	movwf	??_main
   677  0622  0879               	movf	??_main,w
   678  0623  00F0               	movwf	SSD_SetValue@ssd_symbol
   679  0624  3002               	movlw	2
   680  0625  120A  118A  2486  120A  118A  	fcall	_SSD_SetValue
   681                           
   682                           ;vaccum.c: 31:         }
   683  062A  2DF1               	goto	l1131
   684  062B                     l1141:	
   685  062B  3001               	movlw	1
   686  062C  120A  118A  2490  120A  118A  	fcall	_SW_GetState
   687  0631  3A02               	xorlw	2
   688  0632  1D03               	skipz
   689  0633  2E35               	goto	u451
   690  0634  2E36               	goto	u450
   691  0635                     u451:	
   692  0635  2E50               	goto	l1145
   693  0636                     u450:	
   694  0636                     l1143:	
   695                           
   696                           ;vaccum.c: 34:         {;vaccum.c: 37:           SSD_SetValue(SSD_FIRST,SSD_LOW);
   697  0636  01F0               	clrf	SSD_SetValue@ssd_symbol
   698  0637  3000               	movlw	0
   699  0638  120A  118A  2486  120A  118A  	fcall	_SSD_SetValue
   700                           
   701                           ;vaccum.c: 38:           SSD_SetValue(SSD_SECOND,SSD_MID);
   702  063D  01F0               	clrf	SSD_SetValue@ssd_symbol
   703  063E  0AF0               	incf	SSD_SetValue@ssd_symbol,f
   704  063F  3001               	movlw	1
   705  0640  120A  118A  2486  120A  118A  	fcall	_SSD_SetValue
   706                           
   707                           ;vaccum.c: 39:           SSD_SetValue(SSD_THIRD,SSD_NULL);
   708  0645  3003               	movlw	3
   709  0646  00F9               	movwf	??_main
   710  0647  0879               	movf	??_main,w
   711  0648  00F0               	movwf	SSD_SetValue@ssd_symbol
   712  0649  3002               	movlw	2
   713  064A  120A  118A  2486  120A  118A  	fcall	_SSD_SetValue
   714                           
   715                           ;vaccum.c: 41:         }
   716  064F  2DF1               	goto	l1131
   717  0650                     l1145:	
   718  0650  3002               	movlw	2
   719  0651  120A  118A  2490  120A  118A  	fcall	_SW_GetState
   720  0656  3A02               	xorlw	2
   721  0657  1D03               	skipz
   722  0658  2E5A               	goto	u461
   723  0659  2E5B               	goto	u460
   724  065A                     u461:	
   725  065A  2E75               	goto	l21
   726  065B                     u460:	
   727  065B                     l1147:	
   728                           
   729                           ;vaccum.c: 44:         {;vaccum.c: 47:           SSD_SetValue(SSD_FIRST,SSD_LOW);
   730  065B  01F0               	clrf	SSD_SetValue@ssd_symbol
   731  065C  3000               	movlw	0
   732  065D  120A  118A  2486  120A  118A  	fcall	_SSD_SetValue
   733                           
   734                           ;vaccum.c: 48:           SSD_SetValue(SSD_SECOND,SSD_MID);
   735  0662  01F0               	clrf	SSD_SetValue@ssd_symbol
   736  0663  0AF0               	incf	SSD_SetValue@ssd_symbol,f
   737  0664  3001               	movlw	1
   738  0665  120A  118A  2486  120A  118A  	fcall	_SSD_SetValue
   739                           
   740                           ;vaccum.c: 49:           SSD_SetValue(SSD_THIRD,SSD_HIGH);
   741  066A  3002               	movlw	2
   742  066B  00F9               	movwf	??_main
   743  066C  0879               	movf	??_main,w
   744  066D  00F0               	movwf	SSD_SetValue@ssd_symbol
   745  066E  3002               	movlw	2
   746  066F  120A  118A  2486  120A  118A  	fcall	_SSD_SetValue
   747  0674  2DF1               	goto	l1131
   748  0675                     l21:	
   749  0675  2DF1               	goto	l1131
   750  0676  120A  118A  2800   	ljmp	start
   751  0679                     __end_of_main:	
   752                           
   753                           	psect	text1
   754  0679                     __ptext1:	
   755 ;; *************** function _SW_Update *****************
   756 ;; Defined at:
   757 ;;		line 75 in file "SW.c"
   758 ;; Parameters:    Size  Location     Type
   759 ;;		None
   760 ;; Auto vars:     Size  Location     Type
   761 ;;  index           1    7[COMMON] unsigned char 
   762 ;; Return value:  Size  Location     Type
   763 ;;                  1    wreg      void 
   764 ;; Registers used:
   765 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   766 ;; Tracked objects:
   767 ;;		On entry : 0/0
   768 ;;		On exit  : 0/0
   769 ;;		Unchanged: 0/0
   770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   771 ;;      Params:         0       0       0       0       0
   772 ;;      Locals:         1       0       0       0       0
   773 ;;      Temps:          3       0       0       0       0
   774 ;;      Totals:         4       0       0       0       0
   775 ;;Total ram usage:        4 bytes
   776 ;; Hardware stack levels used:    1
   777 ;; Hardware stack levels required when called:    1
   778 ;; This function calls:
   779 ;;		___bmul
   780 ;; This function is called by:
   781 ;;		_main
   782 ;; This function uses a non-reentrant model
   783 ;;
   784                           
   785                           
   786                           ;psect for function _SW_Update
   787  0679                     _SW_Update:	
   788  0679                     l1047:	
   789                           ;incstack = 0
   790                           ; Regs used in _SW_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   791                           
   792  0679                     l1049:	
   793                           
   794                           ;SW.c: 81:     SW_counter += (5);
   795  0679  3005               	movlw	5
   796  067A  07FB               	addwf	SW_Update@SW_counter,f
   797  067B  1803               	skipnc
   798  067C  0AFC               	incf	SW_Update@SW_counter+1,f
   799  067D  3000               	movlw	0
   800  067E  07FC               	addwf	SW_Update@SW_counter+1,f
   801  067F                     l1051:	
   802                           
   803                           ;SW.c: 83:     if (SW_counter != (20)){
   804  067F  3014               	movlw	20
   805  0680  067B               	xorwf	SW_Update@SW_counter,w
   806  0681  047C               	iorwf	SW_Update@SW_counter+1,w
   807  0682  1903               	btfsc	3,2
   808  0683  2E85               	goto	u301
   809  0684  2E86               	goto	u300
   810  0685                     u301:	
   811  0685  2E87               	goto	l1055
   812  0686                     u300:	
   813  0686  2FDF               	goto	l47
   814  0687                     l1055:	
   815                           
   816                           ;SW.c: 87:     SW_counter = 0;
   817  0687  01FB               	clrf	SW_Update@SW_counter
   818  0688  01FC               	clrf	SW_Update@SW_counter+1
   819                           
   820                           ;SW.c: 90:     for (index = SW_PLUS; index < (3); index++)
   821  0689  01F7               	clrf	SW_Update@index
   822  068A                     l1061:	
   823                           
   824                           ;SW.c: 91:     {;SW.c: 94:         SWs_Info[index].sw_samples[0] = SWs_Info[index].sw_sa
      +                          mples[1];
   825  068A  3003               	movlw	3
   826  068B  00F4               	movwf	??_SW_Update
   827  068C  0874               	movf	??_SW_Update,w
   828  068D  00F0               	movwf	___bmul@multiplicand
   829  068E  0877               	movf	SW_Update@index,w
   830  068F  120A  118A  24B3  120A  118A  	fcall	___bmul
   831  0694  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
   832  0695  0084               	movwf	4
   833  0696  1383               	bcf	3,7	;select IRP bank0
   834  0697  0800               	movf	0,w
   835  0698  00F5               	movwf	??_SW_Update+1
   836  0699  3003               	movlw	3
   837  069A  00F6               	movwf	??_SW_Update+2
   838  069B  0876               	movf	??_SW_Update+2,w
   839  069C  00F0               	movwf	___bmul@multiplicand
   840  069D  0877               	movf	SW_Update@index,w
   841  069E  120A  118A  24B3  120A  118A  	fcall	___bmul
   842  06A3  3E20               	addlw	(low (_SWs_Info| 0))& (0+255)
   843  06A4  0084               	movwf	4
   844  06A5  0875               	movf	??_SW_Update+1,w
   845  06A6  1383               	bcf	3,7	;select IRP bank0
   846  06A7  0080               	movwf	0
   847  06A8                     l1063:	
   848                           
   849                           ;SW.c: 96:         if (index == SW_PLUS)
   850  06A8  0877               	movf	SW_Update@index,w
   851  06A9  1D03               	btfss	3,2
   852  06AA  2EAC               	goto	u311
   853  06AB  2EAD               	goto	u310
   854  06AC                     u311:	
   855  06AC  2EC2               	goto	l1067
   856  06AD                     u310:	
   857  06AD                     l1065:	
   858                           
   859                           ;SW.c: 97:         {;SW.c: 98:             SWs_Info[index].sw_samples[1] = (((((PORTB)))
      +                           & (1 << ((0)))) >> (((0))));
   860  06AD  1283               	bcf	3,5	;RP0=0, select bank0
   861  06AE  1303               	bcf	3,6	;RP1=0, select bank0
   862  06AF  0806               	movf	6,w	;volatile
   863  06B0  3901               	andlw	1
   864  06B1  00F4               	movwf	??_SW_Update
   865  06B2  3003               	movlw	3
   866  06B3  00F5               	movwf	??_SW_Update+1
   867  06B4  0875               	movf	??_SW_Update+1,w
   868  06B5  00F0               	movwf	___bmul@multiplicand
   869  06B6  0877               	movf	SW_Update@index,w
   870  06B7  120A  118A  24B3  120A  118A  	fcall	___bmul
   871  06BC  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
   872  06BD  0084               	movwf	4
   873  06BE  0874               	movf	??_SW_Update,w
   874  06BF  1383               	bcf	3,7	;select IRP bank0
   875  06C0  0080               	movwf	0
   876                           
   877                           ;SW.c: 99:         } else if (index == SW_MINUS)
   878  06C1  2FB2               	goto	l1097
   879  06C2                     l1067:	
   880  06C2  0377               	decf	SW_Update@index,w
   881  06C3  1D03               	btfss	3,2
   882  06C4  2EC6               	goto	u321
   883  06C5  2EC7               	goto	u320
   884  06C6                     u321:	
   885  06C6  2EDF               	goto	l1071
   886  06C7                     u320:	
   887  06C7                     l1069:	
   888                           
   889                           ;SW.c: 100:         {;SW.c: 101:             SWs_Info[index].sw_samples[1] = (((((PORTB)
      +                          )) & (1 << ((1)))) >> (((1))));
   890  06C7  1283               	bcf	3,5	;RP0=0, select bank0
   891  06C8  1303               	bcf	3,6	;RP1=0, select bank0
   892  06C9  0806               	movf	6,w	;volatile
   893  06CA  00F4               	movwf	??_SW_Update
   894  06CB  1003               	clrc
   895  06CC  0C74               	rrf	??_SW_Update,w
   896  06CD  3901               	andlw	1
   897  06CE  00F5               	movwf	??_SW_Update+1
   898  06CF  3003               	movlw	3
   899  06D0  00F6               	movwf	??_SW_Update+2
   900  06D1  0876               	movf	??_SW_Update+2,w
   901  06D2  00F0               	movwf	___bmul@multiplicand
   902  06D3  0877               	movf	SW_Update@index,w
   903  06D4  120A  118A  24B3  120A  118A  	fcall	___bmul
   904  06D9  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
   905  06DA  0084               	movwf	4
   906  06DB  0875               	movf	??_SW_Update+1,w
   907  06DC  1383               	bcf	3,7	;select IRP bank0
   908  06DD  0080               	movwf	0
   909                           
   910                           ;SW.c: 102:         } else if (index == SW_PRESURE)
   911  06DE  2FB2               	goto	l1097
   912  06DF                     l1071:	
   913  06DF  3002               	movlw	2
   914  06E0  0677               	xorwf	SW_Update@index,w
   915  06E1  1D03               	btfss	3,2
   916  06E2  2EE4               	goto	u331
   917  06E3  2EE5               	goto	u330
   918  06E4                     u331:	
   919  06E4  2F02               	goto	l51
   920  06E5                     u330:	
   921  06E5                     l1073:	
   922                           
   923                           ;SW.c: 103:         {;SW.c: 104:             SWs_Info[index].sw_samples[1] = (((((PORTB)
      +                          )) & (1 << ((2)))) >> (((2))));
   924  06E5  1283               	bcf	3,5	;RP0=0, select bank0
   925  06E6  1303               	bcf	3,6	;RP1=0, select bank0
   926  06E7  0806               	movf	6,w	;volatile
   927  06E8  00F4               	movwf	??_SW_Update
   928  06E9  3002               	movlw	2
   929  06EA                     u345:	
   930  06EA  1003               	clrc
   931  06EB  0CF4               	rrf	??_SW_Update,f
   932  06EC  3EFF               	addlw	-1
   933  06ED  1D03               	skipz
   934  06EE  2EEA               	goto	u345
   935  06EF  0874               	movf	??_SW_Update,w
   936  06F0  3901               	andlw	1
   937  06F1  00F5               	movwf	??_SW_Update+1
   938  06F2  3003               	movlw	3
   939  06F3  00F6               	movwf	??_SW_Update+2
   940  06F4  0876               	movf	??_SW_Update+2,w
   941  06F5  00F0               	movwf	___bmul@multiplicand
   942  06F6  0877               	movf	SW_Update@index,w
   943  06F7  120A  118A  24B3  120A  118A  	fcall	___bmul
   944  06FC  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
   945  06FD  0084               	movwf	4
   946  06FE  0875               	movf	??_SW_Update+1,w
   947  06FF  1383               	bcf	3,7	;select IRP bank0
   948  0700  0080               	movwf	0
   949                           
   950                           ;SW.c: 105:         } else
   951  0701  2FB2               	goto	l1097
   952  0702                     l51:	
   953                           
   954                           ;SW.c: 113:         switch(SWs_Info[index].sw_state)
   955  0702  2FB2               	goto	l1097
   956  0703                     l1075:	
   957                           
   958                           ;SW.c: 118:                 if ((SWs_Info[index].sw_samples[0] == (0)) &&
   959  0703  3003               	movlw	3
   960  0704  00F4               	movwf	??_SW_Update
   961  0705  0874               	movf	??_SW_Update,w
   962  0706  00F0               	movwf	___bmul@multiplicand
   963  0707  0877               	movf	SW_Update@index,w
   964  0708  120A  118A  24B3  120A  118A  	fcall	___bmul
   965  070D  3E20               	addlw	(low (_SWs_Info| 0))& (0+255)
   966  070E  0084               	movwf	4
   967  070F  1383               	bcf	3,7	;select IRP bank0
   968  0710  0800               	movf	0,w
   969  0711  1D03               	btfss	3,2
   970  0712  2F14               	goto	u351
   971  0713  2F15               	goto	u350
   972  0714                     u351:	
   973  0714  2FD5               	goto	l1099
   974  0715                     u350:	
   975  0715                     l1077:	
   976  0715  3003               	movlw	3
   977  0716  00F4               	movwf	??_SW_Update
   978  0717  0874               	movf	??_SW_Update,w
   979  0718  00F0               	movwf	___bmul@multiplicand
   980  0719  0877               	movf	SW_Update@index,w
   981  071A  120A  118A  24B3  120A  118A  	fcall	___bmul
   982  071F  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
   983  0720  0084               	movwf	4
   984  0721  1383               	bcf	3,7	;select IRP bank0
   985  0722  0800               	movf	0,w
   986  0723  1D03               	btfss	3,2
   987  0724  2F26               	goto	u361
   988  0725  2F27               	goto	u360
   989  0726                     u361:	
   990  0726  2FD5               	goto	l1099
   991  0727                     u360:	
   992  0727                     l1079:	
   993                           
   994                           ;SW.c: 120:                 {;SW.c: 121:                     SWs_Info[index].sw_state = 
      +                          SW_PRE_PRESSED;
   995  0727  3003               	movlw	3
   996  0728  00F4               	movwf	??_SW_Update
   997  0729  0874               	movf	??_SW_Update,w
   998  072A  00F0               	movwf	___bmul@multiplicand
   999  072B  0877               	movf	SW_Update@index,w
  1000  072C  120A  118A  24B3  120A  118A  	fcall	___bmul
  1001  0731  3E22               	addlw	(low ((_SWs_Info| 0+2)))& (0+255)
  1002  0732  0084               	movwf	4
  1003  0733  1383               	bcf	3,7	;select IRP bank0
  1004  0734  0180               	clrf	0
  1005  0735  0A80               	incf	0,f
  1006                           
  1007                           ;SW.c: 122:                 } else
  1008  0736  2FD5               	goto	l1099
  1009  0737                     l1081:	
  1010                           
  1011                           ;SW.c: 129:                 if (SWs_Info[index].sw_samples[1] == (0))
  1012  0737  3003               	movlw	3
  1013  0738  00F4               	movwf	??_SW_Update
  1014  0739  0874               	movf	??_SW_Update,w
  1015  073A  00F0               	movwf	___bmul@multiplicand
  1016  073B  0877               	movf	SW_Update@index,w
  1017  073C  120A  118A  24B3  120A  118A  	fcall	___bmul
  1018  0741  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
  1019  0742  0084               	movwf	4
  1020  0743  1383               	bcf	3,7	;select IRP bank0
  1021  0744  0800               	movf	0,w
  1022  0745  1D03               	btfss	3,2
  1023  0746  2F48               	goto	u371
  1024  0747  2F49               	goto	u370
  1025  0748                     u371:	
  1026  0748  2FD5               	goto	l1099
  1027  0749                     u370:	
  1028  0749                     l1083:	
  1029                           
  1030                           ;SW.c: 130:                 {;SW.c: 131:                     SWs_Info[index].sw_state = 
      +                          SW_PRESSED;
  1031  0749  3002               	movlw	2
  1032  074A  00F4               	movwf	??_SW_Update
  1033  074B  3003               	movlw	3
  1034  074C  00F5               	movwf	??_SW_Update+1
  1035  074D  0875               	movf	??_SW_Update+1,w
  1036  074E  00F0               	movwf	___bmul@multiplicand
  1037  074F  0877               	movf	SW_Update@index,w
  1038  0750  120A  118A  24B3  120A  118A  	fcall	___bmul
  1039  0755  3E22               	addlw	(low ((_SWs_Info| 0+2)))& (0+255)
  1040  0756  0084               	movwf	4
  1041  0757  0874               	movf	??_SW_Update,w
  1042  0758  1383               	bcf	3,7	;select IRP bank0
  1043  0759  0080               	movwf	0
  1044                           
  1045                           ;SW.c: 132:                 } else
  1046  075A  2FD5               	goto	l1099
  1047  075B                     l1085:	
  1048                           
  1049                           ;SW.c: 139:                 if ((SWs_Info[index].sw_samples[0] == (1)) &&
  1050  075B  3003               	movlw	3
  1051  075C  00F4               	movwf	??_SW_Update
  1052  075D  0874               	movf	??_SW_Update,w
  1053  075E  00F0               	movwf	___bmul@multiplicand
  1054  075F  0877               	movf	SW_Update@index,w
  1055  0760  120A  118A  24B3  120A  118A  	fcall	___bmul
  1056  0765  3E20               	addlw	(low (_SWs_Info| 0))& (0+255)
  1057  0766  0084               	movwf	4
  1058  0767  1383               	bcf	3,7	;select IRP bank0
  1059  0768  0300               	decf	0,w
  1060  0769  1D03               	btfss	3,2
  1061  076A  2F6C               	goto	u381
  1062  076B  2F6D               	goto	u380
  1063  076C                     u381:	
  1064  076C  2FD5               	goto	l1099
  1065  076D                     u380:	
  1066  076D                     l1087:	
  1067  076D  3003               	movlw	3
  1068  076E  00F4               	movwf	??_SW_Update
  1069  076F  0874               	movf	??_SW_Update,w
  1070  0770  00F0               	movwf	___bmul@multiplicand
  1071  0771  0877               	movf	SW_Update@index,w
  1072  0772  120A  118A  24B3  120A  118A  	fcall	___bmul
  1073  0777  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
  1074  0778  0084               	movwf	4
  1075  0779  1383               	bcf	3,7	;select IRP bank0
  1076  077A  0300               	decf	0,w
  1077  077B  1D03               	btfss	3,2
  1078  077C  2F7E               	goto	u391
  1079  077D  2F7F               	goto	u390
  1080  077E                     u391:	
  1081  077E  2FD5               	goto	l1099
  1082  077F                     u390:	
  1083  077F                     l1089:	
  1084                           
  1085                           ;SW.c: 141:                 {;SW.c: 142:                     SWs_Info[index].sw_state = 
      +                          SW_PRE_RELEASED;
  1086  077F  3003               	movlw	3
  1087  0780  00F4               	movwf	??_SW_Update
  1088  0781  3003               	movlw	3
  1089  0782  00F5               	movwf	??_SW_Update+1
  1090  0783  0875               	movf	??_SW_Update+1,w
  1091  0784  00F0               	movwf	___bmul@multiplicand
  1092  0785  0877               	movf	SW_Update@index,w
  1093  0786  120A  118A  24B3  120A  118A  	fcall	___bmul
  1094  078B  3E22               	addlw	(low ((_SWs_Info| 0+2)))& (0+255)
  1095  078C  0084               	movwf	4
  1096  078D  0874               	movf	??_SW_Update,w
  1097  078E  1383               	bcf	3,7	;select IRP bank0
  1098  078F  0080               	movwf	0
  1099                           
  1100                           ;SW.c: 143:                 }
  1101  0790  2FD5               	goto	l1099
  1102  0791                     l1091:	
  1103                           
  1104                           ;SW.c: 151:                 if (SWs_Info[index].sw_samples[1] == (1))
  1105  0791  3003               	movlw	3
  1106  0792  00F4               	movwf	??_SW_Update
  1107  0793  0874               	movf	??_SW_Update,w
  1108  0794  00F0               	movwf	___bmul@multiplicand
  1109  0795  0877               	movf	SW_Update@index,w
  1110  0796  120A  118A  24B3  120A  118A  	fcall	___bmul
  1111  079B  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
  1112  079C  0084               	movwf	4
  1113  079D  1383               	bcf	3,7	;select IRP bank0
  1114  079E  0300               	decf	0,w
  1115  079F  1D03               	btfss	3,2
  1116  07A0  2FA2               	goto	u401
  1117  07A1  2FA3               	goto	u400
  1118  07A2                     u401:	
  1119  07A2  2FD5               	goto	l1099
  1120  07A3                     u400:	
  1121  07A3                     l1093:	
  1122                           
  1123                           ;SW.c: 152:                 {;SW.c: 153:                     SWs_Info[index].sw_state = 
      +                          SW_RELEASED;
  1124  07A3  3003               	movlw	3
  1125  07A4  00F4               	movwf	??_SW_Update
  1126  07A5  0874               	movf	??_SW_Update,w
  1127  07A6  00F0               	movwf	___bmul@multiplicand
  1128  07A7  0877               	movf	SW_Update@index,w
  1129  07A8  120A  118A  24B3  120A  118A  	fcall	___bmul
  1130  07AD  3E22               	addlw	(low ((_SWs_Info| 0+2)))& (0+255)
  1131  07AE  0084               	movwf	4
  1132  07AF  1383               	bcf	3,7	;select IRP bank0
  1133  07B0  0180               	clrf	0
  1134                           
  1135                           ;SW.c: 154:                 } else
  1136  07B1  2FD5               	goto	l1099
  1137  07B2                     l1097:	
  1138  07B2  3003               	movlw	3
  1139  07B3  00F4               	movwf	??_SW_Update
  1140  07B4  0874               	movf	??_SW_Update,w
  1141  07B5  00F0               	movwf	___bmul@multiplicand
  1142  07B6  0877               	movf	SW_Update@index,w
  1143  07B7  120A  118A  24B3  120A  118A  	fcall	___bmul
  1144  07BC  3E22               	addlw	(low ((_SWs_Info| 0+2)))& (0+255)
  1145  07BD  0084               	movwf	4
  1146  07BE  1383               	bcf	3,7	;select IRP bank0
  1147  07BF  0800               	movf	0,w
  1148  07C0  00F5               	movwf	??_SW_Update+1
  1149  07C1  01F6               	clrf	??_SW_Update+2
  1150                           
  1151                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1152                           ; Switch size 1, requested type "simple"
  1153                           ; Number of cases is 1, Range of values is 0 to 0
  1154                           ; switch strategies available:
  1155                           ; Name         Instructions Cycles
  1156                           ; simple_byte            4     3 (average)
  1157                           ; direct_byte           11     8 (fixed)
  1158                           ; jumptable            260     6 (fixed)
  1159                           ;	Chosen strategy is simple_byte
  1160  07C2  0876               	movf	??_SW_Update+2,w
  1161  07C3  3A00               	xorlw	0	; case 0
  1162  07C4  1903               	skipnz
  1163  07C5  2FC7               	goto	l1189
  1164  07C6  2FD5               	goto	l1099
  1165  07C7                     l1189:	
  1166                           
  1167                           ; Switch size 1, requested type "simple"
  1168                           ; Number of cases is 4, Range of values is 0 to 3
  1169                           ; switch strategies available:
  1170                           ; Name         Instructions Cycles
  1171                           ; simple_byte           13     7 (average)
  1172                           ; direct_byte           20     8 (fixed)
  1173                           ; jumptable            260     6 (fixed)
  1174                           ;	Chosen strategy is simple_byte
  1175  07C7  0875               	movf	??_SW_Update+1,w
  1176  07C8  3A00               	xorlw	0	; case 0
  1177  07C9  1903               	skipnz
  1178  07CA  2F03               	goto	l1075
  1179  07CB  3A01               	xorlw	1	; case 1
  1180  07CC  1903               	skipnz
  1181  07CD  2F37               	goto	l1081
  1182  07CE  3A03               	xorlw	3	; case 2
  1183  07CF  1903               	skipnz
  1184  07D0  2F5B               	goto	l1085
  1185  07D1  3A01               	xorlw	1	; case 3
  1186  07D2  1903               	skipnz
  1187  07D3  2F91               	goto	l1091
  1188  07D4  2FD5               	goto	l1099
  1189  07D5                     l1099:	
  1190                           
  1191                           ;SW.c: 164:     }
  1192  07D5  3001               	movlw	1
  1193  07D6  00F4               	movwf	??_SW_Update
  1194  07D7  0874               	movf	??_SW_Update,w
  1195  07D8  07F7               	addwf	SW_Update@index,f
  1196  07D9                     l1101:	
  1197  07D9  3003               	movlw	3
  1198  07DA  0277               	subwf	SW_Update@index,w
  1199  07DB  1C03               	skipc
  1200  07DC  2FDE               	goto	u411
  1201  07DD  2FDF               	goto	u410
  1202  07DE                     u411:	
  1203  07DE  2E8A               	goto	l1061
  1204  07DF                     u410:	
  1205  07DF                     l47:	
  1206  07DF  0008               	return
  1207  07E0                     __end_of_SW_Update:	
  1208                           
  1209                           	psect	text2
  1210  05A1                     __ptext2:	
  1211 ;; *************** function _SW_Init *****************
  1212 ;; Defined at:
  1213 ;;		line 35 in file "SW.c"
  1214 ;; Parameters:    Size  Location     Type
  1215 ;;		None
  1216 ;; Auto vars:     Size  Location     Type
  1217 ;;  index           1    5[COMMON] unsigned char 
  1218 ;; Return value:  Size  Location     Type
  1219 ;;                  1    wreg      void 
  1220 ;; Registers used:
  1221 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1222 ;; Tracked objects:
  1223 ;;		On entry : 0/0
  1224 ;;		On exit  : 0/0
  1225 ;;		Unchanged: 0/0
  1226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1227 ;;      Params:         0       0       0       0       0
  1228 ;;      Locals:         1       0       0       0       0
  1229 ;;      Temps:          1       0       0       0       0
  1230 ;;      Totals:         2       0       0       0       0
  1231 ;;Total ram usage:        2 bytes
  1232 ;; Hardware stack levels used:    1
  1233 ;; Hardware stack levels required when called:    1
  1234 ;; This function calls:
  1235 ;;		___bmul
  1236 ;; This function is called by:
  1237 ;;		_main
  1238 ;; This function uses a non-reentrant model
  1239 ;;
  1240                           
  1241                           
  1242                           ;psect for function _SW_Init
  1243  05A1                     _SW_Init:	
  1244  05A1                     l1005:	
  1245                           ;incstack = 0
  1246                           ; Regs used in _SW_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1247                           
  1248  05A1                     l1007:	
  1249                           
  1250                           ;SW.c: 41:     ((((TRISB))) = (((TRISB)) & (~(1 << ((0)))))|((1) << ((0))));
  1251  05A1  1683               	bsf	3,5	;RP0=1, select bank1
  1252  05A2  1303               	bcf	3,6	;RP1=0, select bank1
  1253  05A3  0806               	movf	6,w	;volatile
  1254  05A4  39FE               	andlw	254
  1255  05A5  3801               	iorlw	1
  1256  05A6  0086               	movwf	6	;volatile
  1257  05A7                     l1009:	
  1258                           
  1259                           ;SW.c: 42:     ((((TRISB))) = (((TRISB)) & (~(1 << ((1)))))|((1) << ((1))));
  1260  05A7  0806               	movf	6,w	;volatile
  1261  05A8  39FD               	andlw	253
  1262  05A9  3802               	iorlw	2
  1263  05AA  0086               	movwf	6	;volatile
  1264  05AB                     l1011:	
  1265                           
  1266                           ;SW.c: 43:     ((((TRISB))) = (((TRISB)) & (~(1 << ((2)))))|((1) << ((2))));
  1267  05AB  0806               	movf	6,w	;volatile
  1268  05AC  39FB               	andlw	251
  1269  05AD  3804               	iorlw	4
  1270  05AE  0086               	movwf	6	;volatile
  1271  05AF                     l1013:	
  1272                           
  1273                           ;SW.c: 46:     for (index = SW_PLUS; index < (3); index++)
  1274  05AF  01F5               	clrf	SW_Init@index
  1275  05B0                     l1019:	
  1276                           
  1277                           ;SW.c: 47:     {;SW.c: 49:         SWs_Info[index].sw_samples[0] = (1);
  1278  05B0  3003               	movlw	3
  1279  05B1  00F4               	movwf	??_SW_Init
  1280  05B2  0874               	movf	??_SW_Init,w
  1281  05B3  00F0               	movwf	___bmul@multiplicand
  1282  05B4  0875               	movf	SW_Init@index,w
  1283  05B5  120A  118A  24B3  120A  118A  	fcall	___bmul
  1284  05BA  3E20               	addlw	(low (_SWs_Info| 0))& (0+255)
  1285  05BB  0084               	movwf	4
  1286  05BC  1383               	bcf	3,7	;select IRP bank0
  1287  05BD  0180               	clrf	0
  1288  05BE  0A80               	incf	0,f
  1289                           
  1290                           ;SW.c: 50:         SWs_Info[index].sw_samples[1] = (1);
  1291  05BF  3003               	movlw	3
  1292  05C0  00F4               	movwf	??_SW_Init
  1293  05C1  0874               	movf	??_SW_Init,w
  1294  05C2  00F0               	movwf	___bmul@multiplicand
  1295  05C3  0875               	movf	SW_Init@index,w
  1296  05C4  120A  118A  24B3  120A  118A  	fcall	___bmul
  1297  05C9  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
  1298  05CA  0084               	movwf	4
  1299  05CB  1383               	bcf	3,7	;select IRP bank0
  1300  05CC  0180               	clrf	0
  1301  05CD  0A80               	incf	0,f
  1302                           
  1303                           ;SW.c: 53:         SWs_Info[index].sw_state = SW_RELEASED;
  1304  05CE  3003               	movlw	3
  1305  05CF  00F4               	movwf	??_SW_Init
  1306  05D0  0874               	movf	??_SW_Init,w
  1307  05D1  00F0               	movwf	___bmul@multiplicand
  1308  05D2  0875               	movf	SW_Init@index,w
  1309  05D3  120A  118A  24B3  120A  118A  	fcall	___bmul
  1310  05D8  3E22               	addlw	(low ((_SWs_Info| 0+2)))& (0+255)
  1311  05D9  0084               	movwf	4
  1312  05DA  1383               	bcf	3,7	;select IRP bank0
  1313  05DB  0180               	clrf	0
  1314  05DC                     l1021:	
  1315                           
  1316                           ;SW.c: 55:     }
  1317  05DC  3001               	movlw	1
  1318  05DD  00F4               	movwf	??_SW_Init
  1319  05DE  0874               	movf	??_SW_Init,w
  1320  05DF  07F5               	addwf	SW_Init@index,f
  1321  05E0                     l1023:	
  1322  05E0  3003               	movlw	3
  1323  05E1  0275               	subwf	SW_Init@index,w
  1324  05E2  1C03               	skipc
  1325  05E3  2DE5               	goto	u291
  1326  05E4  2DE6               	goto	u290
  1327  05E5                     u291:	
  1328  05E5  2DB0               	goto	l1019
  1329  05E6                     u290:	
  1330  05E6                     l38:	
  1331  05E6  0008               	return
  1332  05E7                     __end_of_SW_Init:	
  1333                           
  1334                           	psect	text3
  1335  0490                     __ptext3:	
  1336 ;; *************** function _SW_GetState *****************
  1337 ;; Defined at:
  1338 ;;		line 60 in file "SW.c"
  1339 ;; Parameters:    Size  Location     Type
  1340 ;;  sw              1    wreg     enum E852
  1341 ;; Auto vars:     Size  Location     Type
  1342 ;;  sw              1    5[COMMON] enum E852
  1343 ;; Return value:  Size  Location     Type
  1344 ;;                  1    wreg      enum E1038
  1345 ;; Registers used:
  1346 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1347 ;; Tracked objects:
  1348 ;;		On entry : 0/0
  1349 ;;		On exit  : 0/0
  1350 ;;		Unchanged: 0/0
  1351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1352 ;;      Params:         0       0       0       0       0
  1353 ;;      Locals:         1       0       0       0       0
  1354 ;;      Temps:          1       0       0       0       0
  1355 ;;      Totals:         2       0       0       0       0
  1356 ;;Total ram usage:        2 bytes
  1357 ;; Hardware stack levels used:    1
  1358 ;; Hardware stack levels required when called:    1
  1359 ;; This function calls:
  1360 ;;		___bmul
  1361 ;; This function is called by:
  1362 ;;		_main
  1363 ;; This function uses a non-reentrant model
  1364 ;;
  1365                           
  1366                           
  1367                           ;psect for function _SW_GetState
  1368  0490                     _SW_GetState:	
  1369                           
  1370                           ;incstack = 0
  1371                           ; Regs used in _SW_GetState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1372                           ;SW_GetState@sw stored from wreg
  1373  0490  00F5               	movwf	SW_GetState@sw
  1374  0491                     l1123:	
  1375                           
  1376                           ;SW.c: 60: tSW_State SW_GetState(tSW sw);SW.c: 61: {;SW.c: 64:     return SWs_Info[sw].s
      +                          w_state;
  1377  0491  3003               	movlw	3
  1378  0492  00F4               	movwf	??_SW_GetState
  1379  0493  0874               	movf	??_SW_GetState,w
  1380  0494  00F0               	movwf	___bmul@multiplicand
  1381  0495  0875               	movf	SW_GetState@sw,w
  1382  0496  120A  118A  24B3  120A  118A  	fcall	___bmul
  1383  049B  3E22               	addlw	(low ((_SWs_Info| 0+2)))& (0+255)
  1384  049C  0084               	movwf	4
  1385  049D  1383               	bcf	3,7	;select IRP bank0
  1386  049E  0800               	movf	0,w
  1387  049F                     l41:	
  1388  049F  0008               	return
  1389  04A0                     __end_of_SW_GetState:	
  1390                           
  1391                           	psect	text4
  1392  04B3                     __ptext4:	
  1393 ;; *************** function ___bmul *****************
  1394 ;; Defined at:
  1395 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c"
  1396 ;; Parameters:    Size  Location     Type
  1397 ;;  multiplier      1    wreg     unsigned char 
  1398 ;;  multiplicand    1    0[COMMON] unsigned char 
  1399 ;; Auto vars:     Size  Location     Type
  1400 ;;  multiplier      1    3[COMMON] unsigned char 
  1401 ;;  product         1    2[COMMON] unsigned char 
  1402 ;; Return value:  Size  Location     Type
  1403 ;;                  1    wreg      unsigned char 
  1404 ;; Registers used:
  1405 ;;		wreg, status,2, status,0
  1406 ;; Tracked objects:
  1407 ;;		On entry : 0/0
  1408 ;;		On exit  : 0/0
  1409 ;;		Unchanged: 0/0
  1410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1411 ;;      Params:         1       0       0       0       0
  1412 ;;      Locals:         2       0       0       0       0
  1413 ;;      Temps:          1       0       0       0       0
  1414 ;;      Totals:         4       0       0       0       0
  1415 ;;Total ram usage:        4 bytes
  1416 ;; Hardware stack levels used:    1
  1417 ;; This function calls:
  1418 ;;		Nothing
  1419 ;; This function is called by:
  1420 ;;		_SW_Init
  1421 ;;		_SW_GetState
  1422 ;;		_SW_Update
  1423 ;; This function uses a non-reentrant model
  1424 ;;
  1425                           
  1426                           
  1427                           ;psect for function ___bmul
  1428  04B3                     ___bmul:	
  1429                           
  1430                           ;incstack = 0
  1431                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  1432                           ;___bmul@multiplier stored from wreg
  1433  04B3  00F3               	movwf	___bmul@multiplier
  1434  04B4                     l991:	
  1435  04B4  01F2               	clrf	___bmul@product
  1436  04B5                     l993:	
  1437  04B5  1C73               	btfss	___bmul@multiplier,0
  1438  04B6  2CB8               	goto	u271
  1439  04B7  2CB9               	goto	u270
  1440  04B8                     u271:	
  1441  04B8  2CBD               	goto	l997
  1442  04B9                     u270:	
  1443  04B9                     l995:	
  1444  04B9  0870               	movf	___bmul@multiplicand,w
  1445  04BA  00F1               	movwf	??___bmul
  1446  04BB  0871               	movf	??___bmul,w
  1447  04BC  07F2               	addwf	___bmul@product,f
  1448  04BD                     l997:	
  1449  04BD  1003               	clrc
  1450  04BE  0DF0               	rlf	___bmul@multiplicand,f
  1451  04BF                     l999:	
  1452  04BF  1003               	clrc
  1453  04C0  0CF3               	rrf	___bmul@multiplier,f
  1454  04C1  0873               	movf	___bmul@multiplier,w
  1455  04C2  1D03               	btfss	3,2
  1456  04C3  2CC5               	goto	u281
  1457  04C4  2CC6               	goto	u280
  1458  04C5                     u281:	
  1459  04C5  2CB5               	goto	l993
  1460  04C6                     u280:	
  1461  04C6                     l1001:	
  1462  04C6  0872               	movf	___bmul@product,w
  1463  04C7                     l251:	
  1464  04C7  0008               	return
  1465  04C8                     __end_of___bmul:	
  1466                           
  1467                           	psect	text5
  1468  04EF                     __ptext5:	
  1469 ;; *************** function _SSD_Update *****************
  1470 ;; Defined at:
  1471 ;;		line 59 in file "SSD.c"
  1472 ;; Parameters:    Size  Location     Type
  1473 ;;		None
  1474 ;; Auto vars:     Size  Location     Type
  1475 ;;		None
  1476 ;; Return value:  Size  Location     Type
  1477 ;;                  1    wreg      void 
  1478 ;; Registers used:
  1479 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1480 ;; Tracked objects:
  1481 ;;		On entry : 0/0
  1482 ;;		On exit  : 0/0
  1483 ;;		Unchanged: 0/0
  1484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1485 ;;      Params:         0       0       0       0       0
  1486 ;;      Locals:         0       0       0       0       0
  1487 ;;      Temps:          1       0       0       0       0
  1488 ;;      Totals:         1       0       0       0       0
  1489 ;;Total ram usage:        1 bytes
  1490 ;; Hardware stack levels used:    1
  1491 ;; Hardware stack levels required when called:    2
  1492 ;; This function calls:
  1493 ;;		_SSD_Out
  1494 ;; This function is called by:
  1495 ;;		_main
  1496 ;; This function uses a non-reentrant model
  1497 ;;
  1498                           
  1499                           
  1500                           ;psect for function _SSD_Update
  1501  04EF                     _SSD_Update:	
  1502  04EF                     l1107:	
  1503                           ;incstack = 0
  1504                           ; Regs used in _SSD_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1505                           
  1506                           
  1507                           ;SSD.c: 61:     static tWord SSD_counter = 0;;SSD.c: 65:     SSD_counter += (5);
  1508  04EF  3005               	movlw	5
  1509  04F0  1283               	bcf	3,5	;RP0=0, select bank0
  1510  04F1  1303               	bcf	3,6	;RP1=0, select bank0
  1511  04F2  07A9               	addwf	SSD_Update@SSD_counter,f
  1512  04F3  1803               	skipnc
  1513  04F4  0AAA               	incf	SSD_Update@SSD_counter+1,f
  1514  04F5  3000               	movlw	0
  1515  04F6  07AA               	addwf	SSD_Update@SSD_counter+1,f
  1516  04F7                     l1109:	
  1517                           
  1518                           ;SSD.c: 67:     if (SSD_counter != (5)){
  1519  04F7  3005               	movlw	5
  1520  04F8  0629               	xorwf	SSD_Update@SSD_counter,w
  1521  04F9  042A               	iorwf	SSD_Update@SSD_counter+1,w
  1522  04FA  1903               	btfsc	3,2
  1523  04FB  2CFD               	goto	u421
  1524  04FC  2CFE               	goto	u420
  1525  04FD                     u421:	
  1526  04FD  2CFF               	goto	l1113
  1527  04FE                     u420:	
  1528  04FE  2D1B               	goto	l101
  1529  04FF                     l1113:	
  1530                           
  1531                           ;SSD.c: 71:     SSD_counter = 0;
  1532  04FF  01A9               	clrf	SSD_Update@SSD_counter
  1533  0500  01AA               	clrf	SSD_Update@SSD_counter+1
  1534  0501                     l1115:	
  1535                           
  1536                           ;SSD.c: 74:     SSD_Out(SSD_current, SSD_Values[SSD_current]);
  1537  0501  087D               	movf	_SSD_current,w
  1538  0502  3E2F               	addlw	(low (_SSD_Values| 0))& (0+255)
  1539  0503  0084               	movwf	4
  1540  0504  1383               	bcf	3,7	;select IRP bank0
  1541  0505  0800               	movf	0,w
  1542  0506  00F6               	movwf	??_SSD_Update
  1543  0507  0876               	movf	??_SSD_Update,w
  1544  0508  00F4               	movwf	SSD_Out@ssd_symbol
  1545  0509  087D               	movf	_SSD_current,w
  1546  050A  120A  118A  24C8  120A  118A  	fcall	_SSD_Out
  1547  050F                     l1117:	
  1548                           
  1549                           ;SSD.c: 76:     if (SSD_current == SSD_THIRD)
  1550  050F  3002               	movlw	2
  1551  0510  067D               	xorwf	_SSD_current,w
  1552  0511  1D03               	btfss	3,2
  1553  0512  2D14               	goto	u431
  1554  0513  2D15               	goto	u430
  1555  0514                     u431:	
  1556  0514  2D17               	goto	l1121
  1557  0515                     u430:	
  1558  0515                     l1119:	
  1559                           
  1560                           ;SSD.c: 77:     {;SSD.c: 78:         SSD_current = SSD_FIRST;
  1561  0515  01FD               	clrf	_SSD_current
  1562                           
  1563                           ;SSD.c: 79:     } else
  1564  0516  2D1B               	goto	l101
  1565  0517                     l1121:	
  1566                           
  1567                           ;SSD.c: 80:     {;SSD.c: 81:         SSD_current++;
  1568  0517  3001               	movlw	1
  1569  0518  00F6               	movwf	??_SSD_Update
  1570  0519  0876               	movf	??_SSD_Update,w
  1571  051A  07FD               	addwf	_SSD_current,f
  1572  051B                     l101:	
  1573  051B  0008               	return
  1574  051C                     __end_of_SSD_Update:	
  1575                           
  1576                           	psect	text6
  1577  0486                     __ptext6:	
  1578 ;; *************** function _SSD_SetValue *****************
  1579 ;; Defined at:
  1580 ;;		line 95 in file "SSD.c"
  1581 ;; Parameters:    Size  Location     Type
  1582 ;;  ssd             1    wreg     enum E852
  1583 ;;  ssd_symbol      1    0[COMMON] enum E861
  1584 ;; Auto vars:     Size  Location     Type
  1585 ;;  ssd             1    2[COMMON] enum E852
  1586 ;; Return value:  Size  Location     Type
  1587 ;;                  1    wreg      void 
  1588 ;; Registers used:
  1589 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1590 ;; Tracked objects:
  1591 ;;		On entry : 0/0
  1592 ;;		On exit  : 0/0
  1593 ;;		Unchanged: 0/0
  1594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1595 ;;      Params:         1       0       0       0       0
  1596 ;;      Locals:         1       0       0       0       0
  1597 ;;      Temps:          1       0       0       0       0
  1598 ;;      Totals:         3       0       0       0       0
  1599 ;;Total ram usage:        3 bytes
  1600 ;; Hardware stack levels used:    1
  1601 ;; This function calls:
  1602 ;;		Nothing
  1603 ;; This function is called by:
  1604 ;;		_main
  1605 ;; This function uses a non-reentrant model
  1606 ;;
  1607                           
  1608                           
  1609                           ;psect for function _SSD_SetValue
  1610  0486                     _SSD_SetValue:	
  1611                           
  1612                           ;incstack = 0
  1613                           ; Regs used in _SSD_SetValue: [wreg-fsr0h+status,2+status,0]
  1614                           ;SSD_SetValue@ssd stored from wreg
  1615  0486  00F2               	movwf	SSD_SetValue@ssd
  1616  0487                     l1127:	
  1617                           
  1618                           ;SSD.c: 95: void SSD_SetValue(tSSD ssd, tSSD_Symbol ssd_symbol);SSD.c: 96: {;SSD.c: 98: 
      +                              SSD_Values[ssd] = ssd_symbol;
  1619  0487  0870               	movf	SSD_SetValue@ssd_symbol,w
  1620  0488  00F1               	movwf	??_SSD_SetValue
  1621  0489  0872               	movf	SSD_SetValue@ssd,w
  1622  048A  3E2F               	addlw	(low (_SSD_Values| 0))& (0+255)
  1623  048B  0084               	movwf	4
  1624  048C  0871               	movf	??_SSD_SetValue,w
  1625  048D  1383               	bcf	3,7	;select IRP bank0
  1626  048E  0080               	movwf	0
  1627  048F                     l109:	
  1628  048F  0008               	return
  1629  0490                     __end_of_SSD_SetValue:	
  1630                           
  1631                           	psect	text7
  1632  051C                     __ptext7:	
  1633 ;; *************** function _SSD_Init *****************
  1634 ;; Defined at:
  1635 ;;		line 34 in file "SSD.c"
  1636 ;; Parameters:    Size  Location     Type
  1637 ;;		None
  1638 ;; Auto vars:     Size  Location     Type
  1639 ;;		None
  1640 ;; Return value:  Size  Location     Type
  1641 ;;                  1    wreg      void 
  1642 ;; Registers used:
  1643 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1644 ;; Tracked objects:
  1645 ;;		On entry : 0/0
  1646 ;;		On exit  : 0/0
  1647 ;;		Unchanged: 0/0
  1648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1649 ;;      Params:         0       0       0       0       0
  1650 ;;      Locals:         2       0       0       0       0
  1651 ;;      Temps:          1       0       0       0       0
  1652 ;;      Totals:         3       0       0       0       0
  1653 ;;Total ram usage:        3 bytes
  1654 ;; Hardware stack levels used:    1
  1655 ;; Hardware stack levels required when called:    2
  1656 ;; This function calls:
  1657 ;;		_SSD_Out
  1658 ;;		_SSD_SetState
  1659 ;; This function is called by:
  1660 ;;		_main
  1661 ;; This function uses a non-reentrant model
  1662 ;;
  1663                           
  1664                           
  1665                           ;psect for function _SSD_Init
  1666  051C                     _SSD_Init:	
  1667  051C                     l1025:	
  1668                           ;incstack = 0
  1669                           ; Regs used in _SSD_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1670                           
  1671  051C                     l94:	
  1672  051C  1683               	bsf	3,5	;RP0=1, select bank1
  1673  051D  1303               	bcf	3,6	;RP1=0, select bank1
  1674  051E  0188               	clrf	8	;volatile
  1675  051F                     l1029:	
  1676                           
  1677                           ;SSD.c: 39:     SSD_Out(SSD_FIRST, SSD_NULL);
  1678  051F  3003               	movlw	3
  1679  0520  00F6               	movwf	??_SSD_Init
  1680  0521  0876               	movf	??_SSD_Init,w
  1681  0522  00F4               	movwf	SSD_Out@ssd_symbol
  1682  0523  3000               	movlw	0
  1683  0524  120A  118A  24C8  120A  118A  	fcall	_SSD_Out
  1684  0529                     l1031:	
  1685                           
  1686                           ;SSD.c: 40:     SSD_Out(SSD_SECOND, SSD_NULL);
  1687  0529  3003               	movlw	3
  1688  052A  00F6               	movwf	??_SSD_Init
  1689  052B  0876               	movf	??_SSD_Init,w
  1690  052C  00F4               	movwf	SSD_Out@ssd_symbol
  1691  052D  3001               	movlw	1
  1692  052E  120A  118A  24C8  120A  118A  	fcall	_SSD_Out
  1693  0533                     l1033:	
  1694                           
  1695                           ;SSD.c: 41:     SSD_Out(SSD_THIRD, SSD_NULL);
  1696  0533  3003               	movlw	3
  1697  0534  00F6               	movwf	??_SSD_Init
  1698  0535  0876               	movf	??_SSD_Init,w
  1699  0536  00F4               	movwf	SSD_Out@ssd_symbol
  1700  0537  3002               	movlw	2
  1701  0538  120A  118A  24C8  120A  118A  	fcall	_SSD_Out
  1702  053D                     l1035:	
  1703                           
  1704                           ;SSD.c: 45:             ((((TRISB))) = (((TRISB)) & (~(1 << ((7)))))|((0) << ((7))));
  1705  053D  1683               	bsf	3,5	;RP0=1, select bank1
  1706  053E  1303               	bcf	3,6	;RP1=0, select bank1
  1707  053F  0806               	movf	6,w	;volatile
  1708  0540  397F               	andlw	127
  1709  0541  0086               	movwf	6	;volatile
  1710  0542                     l1037:	
  1711                           
  1712                           ;SSD.c: 47:             ((((TRISB))) = (((TRISB)) & (~(1 << ((6)))))|((0) << ((6))));
  1713  0542  0806               	movf	6,w	;volatile
  1714  0543  39BF               	andlw	191
  1715  0544  0086               	movwf	6	;volatile
  1716  0545                     l1039:	
  1717                           
  1718                           ;SSD.c: 49:             ((((TRISB))) = (((TRISB)) & (~(1 << ((5)))))|((0) << ((5))));
  1719  0545  0806               	movf	6,w	;volatile
  1720  0546  39DF               	andlw	223
  1721  0547  0086               	movwf	6	;volatile
  1722  0548                     l1041:	
  1723                           
  1724                           ;SSD.c: 52:     SSD_SetState(SSD_FIRST, SSD_OFF);
  1725  0548  01F0               	clrf	SSD_SetState@state
  1726  0549  3000               	movlw	0
  1727  054A  120A  118A  255E  120A  118A  	fcall	_SSD_SetState
  1728  054F                     l1043:	
  1729                           
  1730                           ;SSD.c: 53:     SSD_SetState(SSD_SECOND, SSD_OFF);
  1731  054F  01F0               	clrf	SSD_SetState@state
  1732  0550  3001               	movlw	1
  1733  0551  120A  118A  255E  120A  118A  	fcall	_SSD_SetState
  1734  0556                     l1045:	
  1735                           
  1736                           ;SSD.c: 54:     SSD_SetState(SSD_THIRD, SSD_OFF);
  1737  0556  01F0               	clrf	SSD_SetState@state
  1738  0557  3002               	movlw	2
  1739  0558  120A  118A  255E  120A  118A  	fcall	_SSD_SetState
  1740  055D                     l95:	
  1741  055D  0008               	return
  1742  055E                     __end_of_SSD_Init:	
  1743                           
  1744                           	psect	text8
  1745  04C8                     __ptext8:	
  1746 ;; *************** function _SSD_Out *****************
  1747 ;; Defined at:
  1748 ;;		line 148 in file "SSD.c"
  1749 ;; Parameters:    Size  Location     Type
  1750 ;;  ssd             1    wreg     enum E852
  1751 ;;  ssd_symbol      1    4[COMMON] enum E861
  1752 ;; Auto vars:     Size  Location     Type
  1753 ;;  ssd             1    5[COMMON] enum E852
  1754 ;; Return value:  Size  Location     Type
  1755 ;;                  1    wreg      void 
  1756 ;; Registers used:
  1757 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1758 ;; Tracked objects:
  1759 ;;		On entry : 0/0
  1760 ;;		On exit  : 0/0
  1761 ;;		Unchanged: 0/0
  1762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1763 ;;      Params:         1       0       0       0       0
  1764 ;;      Locals:         1       0       0       0       0
  1765 ;;      Temps:          0       0       0       0       0
  1766 ;;      Totals:         2       0       0       0       0
  1767 ;;Total ram usage:        2 bytes
  1768 ;; Hardware stack levels used:    1
  1769 ;; Hardware stack levels required when called:    1
  1770 ;; This function calls:
  1771 ;;		_SSD_SetState
  1772 ;; This function is called by:
  1773 ;;		_SSD_Init
  1774 ;;		_SSD_Update
  1775 ;; This function uses a non-reentrant model
  1776 ;;
  1777                           
  1778                           
  1779                           ;psect for function _SSD_Out
  1780  04C8                     _SSD_Out:	
  1781                           
  1782                           ;incstack = 0
  1783                           ; Regs used in _SSD_Out: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1784                           ;SSD_Out@ssd stored from wreg
  1785  04C8  00F5               	movwf	SSD_Out@ssd
  1786  04C9                     l985:	
  1787                           
  1788                           ;SSD.c: 148: static void SSD_Out(tSSD ssd, tSSD_Symbol ssd_symbol);SSD.c: 149: {;SSD.c: 
      +                          151:     SSD_SetState(SSD_FIRST, SSD_OFF);
  1789  04C9  01F0               	clrf	SSD_SetState@state
  1790  04CA  3000               	movlw	0
  1791  04CB  120A  118A  255E  120A  118A  	fcall	_SSD_SetState
  1792                           
  1793                           ;SSD.c: 152:     SSD_SetState(SSD_SECOND, SSD_OFF);
  1794  04D0  01F0               	clrf	SSD_SetState@state
  1795  04D1  3001               	movlw	1
  1796  04D2  120A  118A  255E  120A  118A  	fcall	_SSD_SetState
  1797                           
  1798                           ;SSD.c: 153:     SSD_SetState(SSD_THIRD, SSD_OFF);
  1799  04D7  01F0               	clrf	SSD_SetState@state
  1800  04D8  3002               	movlw	2
  1801  04D9  120A  118A  255E  120A  118A  	fcall	_SSD_SetState
  1802  04DE                     l987:	
  1803                           
  1804                           ;SSD.c: 156:     ((((PORTD))) = (SSD_Data[ssd_symbol]));
  1805  04DE  0874               	movf	SSD_Out@ssd_symbol,w
  1806  04DF  3E2B               	addlw	(low (_SSD_Data| 0))& (0+255)
  1807  04E0  0084               	movwf	4
  1808  04E1  1383               	bcf	3,7	;select IRP bank0
  1809  04E2  0800               	movf	0,w
  1810  04E3  1283               	bcf	3,5	;RP0=0, select bank0
  1811  04E4  1303               	bcf	3,6	;RP1=0, select bank0
  1812  04E5  0088               	movwf	8	;volatile
  1813  04E6                     l989:	
  1814                           
  1815                           ;SSD.c: 160:     SSD_SetState(ssd, SSD_ON);
  1816  04E6  01F0               	clrf	SSD_SetState@state
  1817  04E7  0AF0               	incf	SSD_SetState@state,f
  1818  04E8  0875               	movf	SSD_Out@ssd,w
  1819  04E9  120A  118A  255E  120A  118A  	fcall	_SSD_SetState
  1820  04EE                     l130:	
  1821  04EE  0008               	return
  1822  04EF                     __end_of_SSD_Out:	
  1823                           
  1824                           	psect	text9
  1825  055E                     __ptext9:	
  1826 ;; *************** function _SSD_SetState *****************
  1827 ;; Defined at:
  1828 ;;		line 127 in file "SSD.c"
  1829 ;; Parameters:    Size  Location     Type
  1830 ;;  ssd             1    wreg     enum E852
  1831 ;;  state           1    0[COMMON] enum E857
  1832 ;; Auto vars:     Size  Location     Type
  1833 ;;  ssd             1    3[COMMON] enum E852
  1834 ;; Return value:  Size  Location     Type
  1835 ;;                  1    wreg      void 
  1836 ;; Registers used:
  1837 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1838 ;; Tracked objects:
  1839 ;;		On entry : 0/0
  1840 ;;		On exit  : 0/0
  1841 ;;		Unchanged: 0/0
  1842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1843 ;;      Params:         1       0       0       0       0
  1844 ;;      Locals:         1       0       0       0       0
  1845 ;;      Temps:          2       0       0       0       0
  1846 ;;      Totals:         4       0       0       0       0
  1847 ;;Total ram usage:        4 bytes
  1848 ;; Hardware stack levels used:    1
  1849 ;; This function calls:
  1850 ;;		Nothing
  1851 ;; This function is called by:
  1852 ;;		_SSD_Init
  1853 ;;		_SSD_Out
  1854 ;; This function uses a non-reentrant model
  1855 ;;
  1856                           
  1857                           
  1858                           ;psect for function _SSD_SetState
  1859  055E                     _SSD_SetState:	
  1860                           
  1861                           ;incstack = 0
  1862                           ; Regs used in _SSD_SetState: [wreg-fsr0h+status,2+status,0]
  1863                           ;SSD_SetState@ssd stored from wreg
  1864  055E  00F3               	movwf	SSD_SetState@ssd
  1865  055F                     l969:	
  1866                           
  1867                           ;SSD.c: 127: void SSD_SetState(tSSD ssd, tSSD_State state);SSD.c: 128: {;SSD.c: 130:    
      +                           switch (ssd)
  1868  055F  2D8D               	goto	l979
  1869  0560                     l971:	
  1870                           
  1871                           ;SSD.c: 133:             ((((PORTB))) = (((PORTB)) & (~(1 << ((7)))))|(state << ((7))));
  1872  0560  0870               	movf	SSD_SetState@state,w
  1873  0561  00F1               	movwf	??_SSD_SetState
  1874  0562  3007               	movlw	7
  1875  0563                     u245:	
  1876  0563  1003               	clrc
  1877  0564  0DF1               	rlf	??_SSD_SetState,f
  1878  0565  3EFF               	addlw	-1
  1879  0566  1D03               	skipz
  1880  0567  2D63               	goto	u245
  1881  0568  1283               	bcf	3,5	;RP0=0, select bank0
  1882  0569  1303               	bcf	3,6	;RP1=0, select bank0
  1883  056A  0806               	movf	6,w	;volatile
  1884  056B  397F               	andlw	127
  1885  056C  0471               	iorwf	??_SSD_SetState,w
  1886  056D  0086               	movwf	6	;volatile
  1887                           
  1888                           ;SSD.c: 134:             break;
  1889  056E  2DA0               	goto	l127
  1890  056F                     l973:	
  1891                           
  1892                           ;SSD.c: 136:             ((((PORTB))) = (((PORTB)) & (~(1 << ((6)))))|(state << ((6))));
  1893  056F  0870               	movf	SSD_SetState@state,w
  1894  0570  00F1               	movwf	??_SSD_SetState
  1895  0571  3006               	movlw	6
  1896  0572                     u255:	
  1897  0572  1003               	clrc
  1898  0573  0DF1               	rlf	??_SSD_SetState,f
  1899  0574  3EFF               	addlw	-1
  1900  0575  1D03               	skipz
  1901  0576  2D72               	goto	u255
  1902  0577  1283               	bcf	3,5	;RP0=0, select bank0
  1903  0578  1303               	bcf	3,6	;RP1=0, select bank0
  1904  0579  0806               	movf	6,w	;volatile
  1905  057A  39BF               	andlw	191
  1906  057B  0471               	iorwf	??_SSD_SetState,w
  1907  057C  0086               	movwf	6	;volatile
  1908                           
  1909                           ;SSD.c: 137:             break;
  1910  057D  2DA0               	goto	l127
  1911  057E                     l975:	
  1912                           
  1913                           ;SSD.c: 139:             ((((PORTB))) = (((PORTB)) & (~(1 << ((5)))))|(state << ((5))));
  1914  057E  0870               	movf	SSD_SetState@state,w
  1915  057F  00F1               	movwf	??_SSD_SetState
  1916  0580  3005               	movlw	5
  1917  0581                     u265:	
  1918  0581  1003               	clrc
  1919  0582  0DF1               	rlf	??_SSD_SetState,f
  1920  0583  3EFF               	addlw	-1
  1921  0584  1D03               	skipz
  1922  0585  2D81               	goto	u265
  1923  0586  1283               	bcf	3,5	;RP0=0, select bank0
  1924  0587  1303               	bcf	3,6	;RP1=0, select bank0
  1925  0588  0806               	movf	6,w	;volatile
  1926  0589  39DF               	andlw	223
  1927  058A  0471               	iorwf	??_SSD_SetState,w
  1928  058B  0086               	movwf	6	;volatile
  1929                           
  1930                           ;SSD.c: 140:             break;
  1931  058C  2DA0               	goto	l127
  1932  058D                     l979:	
  1933  058D  0873               	movf	SSD_SetState@ssd,w
  1934  058E  00F1               	movwf	??_SSD_SetState
  1935  058F  01F2               	clrf	??_SSD_SetState+1
  1936                           
  1937                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1938                           ; Switch size 1, requested type "simple"
  1939                           ; Number of cases is 1, Range of values is 0 to 0
  1940                           ; switch strategies available:
  1941                           ; Name         Instructions Cycles
  1942                           ; simple_byte            4     3 (average)
  1943                           ; direct_byte           11     8 (fixed)
  1944                           ; jumptable            260     6 (fixed)
  1945                           ;	Chosen strategy is simple_byte
  1946  0590  0872               	movf	??_SSD_SetState+1,w
  1947  0591  3A00               	xorlw	0	; case 0
  1948  0592  1903               	skipnz
  1949  0593  2D95               	goto	l1191
  1950  0594  2DA0               	goto	l127
  1951  0595                     l1191:	
  1952                           
  1953                           ; Switch size 1, requested type "simple"
  1954                           ; Number of cases is 3, Range of values is 0 to 2
  1955                           ; switch strategies available:
  1956                           ; Name         Instructions Cycles
  1957                           ; simple_byte           10     6 (average)
  1958                           ; direct_byte           17     8 (fixed)
  1959                           ; jumptable            260     6 (fixed)
  1960                           ;	Chosen strategy is simple_byte
  1961  0595  0871               	movf	??_SSD_SetState,w
  1962  0596  3A00               	xorlw	0	; case 0
  1963  0597  1903               	skipnz
  1964  0598  2D60               	goto	l971
  1965  0599  3A01               	xorlw	1	; case 1
  1966  059A  1903               	skipnz
  1967  059B  2D6F               	goto	l973
  1968  059C  3A03               	xorlw	3	; case 2
  1969  059D  1903               	skipnz
  1970  059E  2D7E               	goto	l975
  1971  059F  2DA0               	goto	l127
  1972  05A0                     l127:	
  1973  05A0  0008               	return
  1974  05A1                     __end_of_SSD_SetState:	
  1975  007E                     btemp	set	126	;btemp
  1976  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        7
    BSS         14
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      14
    BANK0            80      0      18
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_SSD_Init
    _SW_Update->___bmul
    _SW_Init->___bmul
    _SW_GetState->___bmul
    _SSD_Update->_SSD_Out
    _SSD_Init->_SSD_Out
    _SSD_Out->_SSD_SetState

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    5744
                                              9 COMMON     2     2      0
                           _SSD_Init
                       _SSD_SetValue
                         _SSD_Update
                        _SW_GetState
                            _SW_Init
                          _SW_Update
 ---------------------------------------------------------------------------------
 (1) _SW_Update                                            4     4      0    1077
                                              4 COMMON     4     4      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (1) _SW_Init                                              2     2      0     725
                                              4 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (1) _SW_GetState                                          2     2      0     634
                                              4 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) ___bmul                                               4     3      1     612
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _SSD_Update                                           1     1      0     968
                                              6 COMMON     1     1      0
                            _SSD_Out
 ---------------------------------------------------------------------------------
 (1) _SSD_SetValue                                         3     2      1     728
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _SSD_Init                                             3     3      0    1612
                                              6 COMMON     3     3      0
                            _SSD_Out
                       _SSD_SetState
 ---------------------------------------------------------------------------------
 (2) _SSD_Out                                              2     1      1     968
                                              4 COMMON     2     1      1
                       _SSD_SetState
 ---------------------------------------------------------------------------------
 (3) _SSD_SetState                                         4     3      1     620
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SSD_Init
     _SSD_Out
       _SSD_SetState
     _SSD_SetState
   _SSD_SetValue
   _SSD_Update
     _SSD_Out
       _SSD_SetState
   _SW_GetState
     ___bmul
   _SW_Init
     ___bmul
   _SW_Update
     ___bmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0      12       5       22.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      B       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      20      12        0.0%
ABS                  0      0      20       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Wed Jan 15 14:08:31 2020

             _SSD_Values 002F                        pc 0002               _SSD_Update 04EF  
         ___bmul@product 0072              __CFG_CP$OFF 0000      __end_of_SW_GetState 04A0  
                     l21 0675                       l41 049F                       l51 0702  
                     l38 05E6                       l47 07DF                       l94 051C  
                     l95 055D                       fsr 0004             _SSD_SetValue 0486  
           _SSD_SetState 055E                      l101 051B                      l130 04EE  
                    l109 048F                      l127 05A0                      l251 04C7  
                    l971 0560                      l973 056F                      l975 057E  
                    l991 04B4                      l969 055F                      l985 04C9  
                    l993 04B5                      l979 058D                      l987 04DE  
                    l995 04B9                      l989 04E6                      l997 04BD  
                    l999 04BF                      u300 0686                      u301 0685  
                    u310 06AD                      u311 06AC                      u400 07A3  
                    u320 06C7                      u401 07A2                      u321 06C6  
                    u410 07DF                      u330 06E5                      u411 07DE  
                    u331 06E4                      u420 04FE                      u245 0563  
                    u421 04FD                      u430 0515                      u270 04B9  
                    u350 0715                      u255 0572                      u431 0514  
                    u271 04B8                      u351 0714                      u280 04C6  
                    u360 0727                      u440 060F                      u265 0581  
                    u281 04C5                      u361 0726                      u345 06EA  
                    u441 060E                      u290 05E6                      u370 0749  
                    u450 0636             __CFG_CPD$OFF 0000                      u291 05E5  
                    u371 0748                      u451 0635                      u380 076D  
                    u460 065B                      u381 076C                      u461 065A  
                    u390 077F                      u391 077E                      u477 05F5  
                    fsr0 0004                      indf 0000      SW_Update@SW_counter 007B  
           __CFG_FOSC$XT 0000              _SSD_current 007D             __CFG_LVP$OFF 0000  
                   l1001 04C6                     l1011 05AB                     l1021 05DC  
                   l1013 05AF                     l1005 05A1                     l1101 07D9  
                   l1031 0529                     l1023 05E0                     l1007 05A1  
                   l1041 0548                     l1033 0533                     l1025 051C  
                   l1121 0517                     l1113 04FF                     l1009 05A7  
                   l1043 054F                     l1035 053D                     l1115 0501  
                   l1107 04EF                     l1123 0491                     l1019 05B0  
                   l1051 067F                     l1131 05F1                     l1045 0556  
                   l1037 0542                     l1029 051F                     l1117 050F  
                   l1109 04F7                     l1061 068A                     l1141 062B  
                   l1133 05FA                     l1039 0545                     l1127 0487  
                   l1119 0515                     l1071 06DF                     l1063 06A8  
                   l1055 0687                     l1047 0679                     l1143 0636  
                   l1135 05FF                     l1081 0737                     l1073 06E5  
                   l1065 06AD                     l1049 0679                     l1145 0650  
                   l1137 0604                     l1129 05E7                     l1091 0791  
                   l1083 0749                     l1075 0703                     l1067 06C2  
                   l1147 065B                     l1139 060F                     l1093 07A3  
                   l1085 075B                     l1077 0715                     l1069 06C7  
                   l1191 0595                     l1087 076D                     l1079 0727  
                   l1089 077F                     l1097 07B2                     l1099 07D5  
                   l1189 07C7             __CFG_WRT$OFF 0000                     _main 05E7  
                   btemp 007E          __end_of_SSD_Out 04EF                     start 0000  
        __end_of_SW_Init 05E7        ___bmul@multiplier 0073                    ?_main 0070  
          __CFG_WDTE$OFF 0000                    _PORTB 0006                    _PORTD 0008  
                  _TRISB 0086                    _TRISD 0088         __end_of_SSD_Init 055E  
         __CFG_BOREN$OFF 0000                    pclath 000A                    status 0003  
                  wtemp0 007E              _SW_GetState 0490          __initialization 07E0  
           __end_of_main 0679              ?_SSD_Update 0070                   ??_main 0079  
     __size_of_SW_Update 0167           SW_Update@index 0077                ??_SSD_Out 0075  
              ??_SW_Init 0074           __CFG_PWRTE$OFF 0000                   ___bmul 04B3  
    __size_of_SSD_Update 002D  __end_of__initialization 07FC        __end_of_SW_Update 07E0  
    ___bmul@multiplicand 0070           __pcstackCOMMON 0070             __pidataBANK0 047F  
              ?_SSD_Init 0070   SSD_SetValue@ssd_symbol 0070            SW_GetState@sw 0075  
             __pbssBANK0 0020               __pmaintext 05E7                  ?___bmul 0070  
             ??_SSD_Init 0076                  _SSD_Out 04C8          SSD_SetValue@ssd 0072  
                _SW_Init 05A1          SSD_SetState@ssd 0073             ?_SW_GetState 0070  
        __size_of___bmul 0015             ??_SSD_Update 0076                  __ptext1 0679  
                __ptext2 05A1                  __ptext3 0490                  __ptext4 04B3  
                __ptext5 04EF                  __ptext6 0486                  __ptext7 051C  
                __ptext8 04C8                  __ptext9 055E     end_of_initialization 07FC  
     __end_of_SSD_Update 051C                _SW_Update 0679           __end_of___bmul 04C8  
          ?_SSD_SetValue 0070            ?_SSD_SetState 0070        __size_of_SSD_Init 0042  
    start_initialization 07E0        SSD_SetState@state 0070                 ??___bmul 0071  
   __size_of_SW_GetState 0010               init_fetch0 04A0               ?_SW_Update 0070  
            __pdataBANK0 002B           ??_SSD_SetValue 0071           ??_SSD_SetState 0071  
            __pbssCOMMON 007B                ___latbits 0002    SSD_Update@SSD_counter 0029  
               ?_SSD_Out 0074                 ?_SW_Init 0070             SW_Init@index 0075  
            ??_SW_Update 0074                 _SSD_Data 002B                 _SSD_Init 051C  
               _SWs_Info 0020         __size_of_SSD_Out 0027     __end_of_SSD_SetValue 0490  
   __end_of_SSD_SetState 05A1         __size_of_SW_Init 0046               SSD_Out@ssd 0075  
      SSD_Out@ssd_symbol 0074            __size_of_main 0092                 init_ram0 04A4  
          ??_SW_GetState 0074    __size_of_SSD_SetValue 000A    __size_of_SSD_SetState 0043  
