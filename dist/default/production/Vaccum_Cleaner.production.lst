

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Wed Jan 15 18:18:00 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	inittext,global,class=CODE,delta=2
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	dabs	1,0x7E,2
    26  0000                     
    27                           ; Version 2.10
    28                           ; Generated 31/07/2019 GMT
    29                           ; 
    30                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    31                           ; All rights reserved.
    32                           ; 
    33                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    34                           ; 
    35                           ; Redistribution and use in source and binary forms, with or without modification, are
    36                           ; permitted provided that the following conditions are met:
    37                           ; 
    38                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    39                           ;        conditions and the following disclaimer.
    40                           ; 
    41                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    42                           ;        of conditions and the following disclaimer in the documentation and/or other
    43                           ;        materials provided with the distribution.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC16F877A Definitions
    59                           ; 
    60                           ; SFR Addresses
    61  0000                     	;# 
    62  0001                     	;# 
    63  0002                     	;# 
    64  0003                     	;# 
    65  0004                     	;# 
    66  0005                     	;# 
    67  0006                     	;# 
    68  0007                     	;# 
    69  0008                     	;# 
    70  0009                     	;# 
    71  000A                     	;# 
    72  000B                     	;# 
    73  000C                     	;# 
    74  000D                     	;# 
    75  000E                     	;# 
    76  000E                     	;# 
    77  000F                     	;# 
    78  0010                     	;# 
    79  0011                     	;# 
    80  0012                     	;# 
    81  0013                     	;# 
    82  0014                     	;# 
    83  0015                     	;# 
    84  0015                     	;# 
    85  0016                     	;# 
    86  0017                     	;# 
    87  0018                     	;# 
    88  0019                     	;# 
    89  001A                     	;# 
    90  001B                     	;# 
    91  001B                     	;# 
    92  001C                     	;# 
    93  001D                     	;# 
    94  001E                     	;# 
    95  001F                     	;# 
    96  0081                     	;# 
    97  0085                     	;# 
    98  0086                     	;# 
    99  0087                     	;# 
   100  0088                     	;# 
   101  0089                     	;# 
   102  008C                     	;# 
   103  008D                     	;# 
   104  008E                     	;# 
   105  0091                     	;# 
   106  0092                     	;# 
   107  0093                     	;# 
   108  0094                     	;# 
   109  0098                     	;# 
   110  0099                     	;# 
   111  009C                     	;# 
   112  009D                     	;# 
   113  009E                     	;# 
   114  009F                     	;# 
   115  010C                     	;# 
   116  010D                     	;# 
   117  010E                     	;# 
   118  010F                     	;# 
   119  018C                     	;# 
   120  018D                     	;# 
   121  0000                     	;# 
   122  0001                     	;# 
   123  0002                     	;# 
   124  0003                     	;# 
   125  0004                     	;# 
   126  0005                     	;# 
   127  0006                     	;# 
   128  0007                     	;# 
   129  0008                     	;# 
   130  0009                     	;# 
   131  000A                     	;# 
   132  000B                     	;# 
   133  000C                     	;# 
   134  000D                     	;# 
   135  000E                     	;# 
   136  000E                     	;# 
   137  000F                     	;# 
   138  0010                     	;# 
   139  0011                     	;# 
   140  0012                     	;# 
   141  0013                     	;# 
   142  0014                     	;# 
   143  0015                     	;# 
   144  0015                     	;# 
   145  0016                     	;# 
   146  0017                     	;# 
   147  0018                     	;# 
   148  0019                     	;# 
   149  001A                     	;# 
   150  001B                     	;# 
   151  001B                     	;# 
   152  001C                     	;# 
   153  001D                     	;# 
   154  001E                     	;# 
   155  001F                     	;# 
   156  0081                     	;# 
   157  0085                     	;# 
   158  0086                     	;# 
   159  0087                     	;# 
   160  0088                     	;# 
   161  0089                     	;# 
   162  008C                     	;# 
   163  008D                     	;# 
   164  008E                     	;# 
   165  0091                     	;# 
   166  0092                     	;# 
   167  0093                     	;# 
   168  0094                     	;# 
   169  0098                     	;# 
   170  0099                     	;# 
   171  009C                     	;# 
   172  009D                     	;# 
   173  009E                     	;# 
   174  009F                     	;# 
   175  010C                     	;# 
   176  010D                     	;# 
   177  010E                     	;# 
   178  010F                     	;# 
   179  018C                     	;# 
   180  018D                     	;# 
   181  0000                     	;# 
   182  0001                     	;# 
   183  0002                     	;# 
   184  0003                     	;# 
   185  0004                     	;# 
   186  0005                     	;# 
   187  0006                     	;# 
   188  0007                     	;# 
   189  0008                     	;# 
   190  0009                     	;# 
   191  000A                     	;# 
   192  000B                     	;# 
   193  000C                     	;# 
   194  000D                     	;# 
   195  000E                     	;# 
   196  000E                     	;# 
   197  000F                     	;# 
   198  0010                     	;# 
   199  0011                     	;# 
   200  0012                     	;# 
   201  0013                     	;# 
   202  0014                     	;# 
   203  0015                     	;# 
   204  0015                     	;# 
   205  0016                     	;# 
   206  0017                     	;# 
   207  0018                     	;# 
   208  0019                     	;# 
   209  001A                     	;# 
   210  001B                     	;# 
   211  001B                     	;# 
   212  001C                     	;# 
   213  001D                     	;# 
   214  001E                     	;# 
   215  001F                     	;# 
   216  0081                     	;# 
   217  0085                     	;# 
   218  0086                     	;# 
   219  0087                     	;# 
   220  0088                     	;# 
   221  0089                     	;# 
   222  008C                     	;# 
   223  008D                     	;# 
   224  008E                     	;# 
   225  0091                     	;# 
   226  0092                     	;# 
   227  0093                     	;# 
   228  0094                     	;# 
   229  0098                     	;# 
   230  0099                     	;# 
   231  009C                     	;# 
   232  009D                     	;# 
   233  009E                     	;# 
   234  009F                     	;# 
   235  010C                     	;# 
   236  010D                     	;# 
   237  010E                     	;# 
   238  010F                     	;# 
   239  018C                     	;# 
   240  018D                     	;# 
   241  0000                     	;# 
   242  0001                     	;# 
   243  0002                     	;# 
   244  0003                     	;# 
   245  0004                     	;# 
   246  0005                     	;# 
   247  0006                     	;# 
   248  0007                     	;# 
   249  0008                     	;# 
   250  0009                     	;# 
   251  000A                     	;# 
   252  000B                     	;# 
   253  000C                     	;# 
   254  000D                     	;# 
   255  000E                     	;# 
   256  000E                     	;# 
   257  000F                     	;# 
   258  0010                     	;# 
   259  0011                     	;# 
   260  0012                     	;# 
   261  0013                     	;# 
   262  0014                     	;# 
   263  0015                     	;# 
   264  0015                     	;# 
   265  0016                     	;# 
   266  0017                     	;# 
   267  0018                     	;# 
   268  0019                     	;# 
   269  001A                     	;# 
   270  001B                     	;# 
   271  001B                     	;# 
   272  001C                     	;# 
   273  001D                     	;# 
   274  001E                     	;# 
   275  001F                     	;# 
   276  0081                     	;# 
   277  0085                     	;# 
   278  0086                     	;# 
   279  0087                     	;# 
   280  0088                     	;# 
   281  0089                     	;# 
   282  008C                     	;# 
   283  008D                     	;# 
   284  008E                     	;# 
   285  0091                     	;# 
   286  0092                     	;# 
   287  0093                     	;# 
   288  0094                     	;# 
   289  0098                     	;# 
   290  0099                     	;# 
   291  009C                     	;# 
   292  009D                     	;# 
   293  009E                     	;# 
   294  009F                     	;# 
   295  010C                     	;# 
   296  010D                     	;# 
   297  010E                     	;# 
   298  010F                     	;# 
   299  018C                     	;# 
   300  018D                     	;# 
   301  0000                     	;# 
   302  0001                     	;# 
   303  0002                     	;# 
   304  0003                     	;# 
   305  0004                     	;# 
   306  0005                     	;# 
   307  0006                     	;# 
   308  0007                     	;# 
   309  0008                     	;# 
   310  0009                     	;# 
   311  000A                     	;# 
   312  000B                     	;# 
   313  000C                     	;# 
   314  000D                     	;# 
   315  000E                     	;# 
   316  000E                     	;# 
   317  000F                     	;# 
   318  0010                     	;# 
   319  0011                     	;# 
   320  0012                     	;# 
   321  0013                     	;# 
   322  0014                     	;# 
   323  0015                     	;# 
   324  0015                     	;# 
   325  0016                     	;# 
   326  0017                     	;# 
   327  0018                     	;# 
   328  0019                     	;# 
   329  001A                     	;# 
   330  001B                     	;# 
   331  001B                     	;# 
   332  001C                     	;# 
   333  001D                     	;# 
   334  001E                     	;# 
   335  001F                     	;# 
   336  0081                     	;# 
   337  0085                     	;# 
   338  0086                     	;# 
   339  0087                     	;# 
   340  0088                     	;# 
   341  0089                     	;# 
   342  008C                     	;# 
   343  008D                     	;# 
   344  008E                     	;# 
   345  0091                     	;# 
   346  0092                     	;# 
   347  0093                     	;# 
   348  0094                     	;# 
   349  0098                     	;# 
   350  0099                     	;# 
   351  009C                     	;# 
   352  009D                     	;# 
   353  009E                     	;# 
   354  009F                     	;# 
   355  010C                     	;# 
   356  010D                     	;# 
   357  010E                     	;# 
   358  010F                     	;# 
   359  018C                     	;# 
   360  018D                     	;# 
   361                           
   362                           	psect	idataBANK0
   363  03CF                     __pidataBANK0:	
   364                           
   365                           ;initializer for _SSD_Data
   366  03CF  3408               	retlw	8
   367  03D0  3448               	retlw	72
   368  03D1  3449               	retlw	73
   369  03D2  3400               	retlw	0
   370                           
   371                           ;initializer for _SSD_Values
   372  03D3  3403               	retlw	3
   373  03D4  3400               	retlw	0
   374  03D5  3400               	retlw	0
   375  0008                     _PORTD	set	8
   376  0006                     _PORTB	set	6
   377  0088                     _TRISD	set	136
   378  0086                     _TRISB	set	134
   379                           
   380                           ; #config settings
   381  0000                     
   382                           	psect	cinit
   383  07E4                     start_initialization:	
   384  07E4                     __initialization:	
   385                           
   386                           ; Initialize objects allocated to BANK0
   387  07E4  1383               	bcf	3,7	;select IRP bank0
   388  07E5  3038               	movlw	low (__pdataBANK0+7)
   389  07E6  00FD               	movwf	btemp+-1
   390  07E7  3003               	movlw	high __pidataBANK0
   391  07E8  00FE               	movwf	btemp
   392  07E9  30CF               	movlw	low __pidataBANK0
   393  07EA  00FF               	movwf	btemp+1
   394  07EB  3031               	movlw	low __pdataBANK0
   395  07EC  0084               	movwf	4
   396  07ED  120A  118A  23FC  120A  118A  	fcall	init_ram0
   397                           
   398                           ; Clear objects allocated to BANK0
   399  07F2  3020               	movlw	low __pbssBANK0
   400  07F3  0084               	movwf	4
   401  07F4  3031               	movlw	low (__pbssBANK0+17)
   402  07F5  120A  118A  23D6  120A  118A  	fcall	clear_ram0
   403                           
   404                           ; Clear objects allocated to COMMON
   405  07FA  01FB               	clrf	__pbssCOMMON& (0+127)
   406  07FB  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
   407  07FC                     end_of_initialization:	
   408                           ;End of C runtime variable initialization code
   409                           
   410  07FC                     __end_of__initialization:	
   411  07FC  0183               	clrf	3
   412  07FD  120A  118A  2DD8   	ljmp	_main	;jump to C main() function
   413                           
   414                           	psect	bssCOMMON
   415  007B                     __pbssCOMMON:	
   416  007B                     _TargetSpeed:	
   417  007B                     	ds	1
   418  007C                     _SSD_current:	
   419  007C                     	ds	1
   420                           
   421                           	psect	bssBANK0
   422  0020                     __pbssBANK0:	
   423  0020                     _SWs_Info:	
   424  0020                     	ds	9
   425  0029                     VC_Update@PRESSURE_counter:	
   426  0029                     	ds	2
   427  002B                     VC_Update@VC_counter:	
   428  002B                     	ds	2
   429  002D                     SSD_Update@SSD_counter:	
   430  002D                     	ds	2
   431  002F                     SW_Update@SW_counter:	
   432  002F                     	ds	2
   433                           
   434                           	psect	dataBANK0
   435  0031                     __pdataBANK0:	
   436  0031                     _SSD_Data:	
   437  0031                     	ds	4
   438  0035                     _SSD_Values:	
   439  0035                     	ds	3
   440                           
   441                           	psect	inittext
   442  03F8                     init_fetch0:	
   443                           ;	Called with low address in FSR and high address in W
   444                           
   445  03F8  087E               	movf	btemp,w
   446  03F9  008A               	movwf	10
   447  03FA  087F               	movf	btemp+1,w
   448  03FB  0082               	movwf	2
   449  03FC                     init_ram0:	
   450                           ;Called with:
   451                           ;	high address of idata address in btemp 
   452                           ;	low address of idata address in btemp+1 
   453                           ;	low address of data in FSR
   454                           ;	high address + 1 of data in btemp-1
   455                           
   456  03FC  120A  118A  23F8  120A  118A  	fcall	init_fetch0
   457  0401  0080               	movwf	0
   458  0402  0A84               	incf	4,f
   459  0403  0804               	movf	4,w
   460  0404  067D               	xorwf	btemp+-1,w
   461  0405  1903               	btfsc	3,2
   462  0406  3400               	retlw	0
   463  0407  0AFF               	incf	btemp+1,f
   464  0408  1903               	btfsc	3,2
   465  0409  0AFE               	incf	btemp,f
   466  040A  2BFC               	goto	init_ram0
   467                           
   468                           	psect	clrtext
   469  03D6                     clear_ram0:	
   470                           ;	Called with FSR containing the base address, and
   471                           ;	W with the last address+1
   472                           
   473  03D6  0064               	clrwdt	;clear the watchdog before getting into this loop
   474  03D7                     clrloop0:	
   475  03D7  0180               	clrf	0	;clear RAM location pointed to by FSR
   476  03D8  0A84               	incf	4,f	;increment pointer
   477  03D9  0604               	xorwf	4,w	;XOR with final address
   478  03DA  1903               	btfsc	3,2	;have we reached the end yet?
   479  03DB  3400               	retlw	0	;all done for this memory range, return
   480  03DC  0604               	xorwf	4,w	;XOR again to restore value
   481  03DD  2BD7               	goto	clrloop0	;do the next byte
   482                           
   483                           	psect	cstackCOMMON
   484  0070                     __pcstackCOMMON:	
   485  0070                     ?_SW_Init:	
   486  0070                     ?_SSD_Init:	
   487                           ; 1 bytes @ 0x0
   488                           
   489  0070                     ?_VC_Init:	
   490                           ; 1 bytes @ 0x0
   491                           
   492  0070                     ??_VC_Init:	
   493                           ; 1 bytes @ 0x0
   494                           
   495  0070                     ?_SW_Update:	
   496                           ; 1 bytes @ 0x0
   497                           
   498  0070                     ?_SSD_Update:	
   499                           ; 1 bytes @ 0x0
   500                           
   501  0070                     ?_VC_Update:	
   502                           ; 1 bytes @ 0x0
   503                           
   504  0070                     ?_VC_GetSpeed:	
   505                           ; 1 bytes @ 0x0
   506                           
   507  0070                     ??_VC_GetSpeed:	
   508                           ; 1 bytes @ 0x0
   509                           
   510  0070                     ?_SSD_SetValue:	
   511                           ; 1 bytes @ 0x0
   512                           
   513  0070                     ?_SSD_SetState:	
   514                           ; 1 bytes @ 0x0
   515                           
   516  0070                     ?_SW_GetState:	
   517                           ; 1 bytes @ 0x0
   518                           
   519  0070                     ?___bmul:	
   520                           ; 1 bytes @ 0x0
   521                           
   522  0070                     ?_main:	
   523                           ; 1 bytes @ 0x0
   524                           
   525  0070                     SSD_SetValue@ssd_symbol:	
   526                           ; 2 bytes @ 0x0
   527                           
   528  0070                     SSD_SetState@state:	
   529                           ; 1 bytes @ 0x0
   530                           
   531  0070                     ___bmul@multiplicand:	
   532                           ; 1 bytes @ 0x0
   533                           
   534                           
   535                           ; 1 bytes @ 0x0
   536  0070                     	ds	1
   537  0071                     ??_SSD_SetValue:	
   538  0071                     ??_SSD_SetState:	
   539                           ; 1 bytes @ 0x1
   540                           
   541  0071                     ??___bmul:	
   542                           ; 1 bytes @ 0x1
   543                           
   544                           
   545                           ; 1 bytes @ 0x1
   546  0071                     	ds	1
   547  0072                     SSD_SetValue@ssd:	
   548  0072                     ___bmul@product:	
   549                           ; 1 bytes @ 0x2
   550                           
   551                           
   552                           ; 1 bytes @ 0x2
   553  0072                     	ds	1
   554  0073                     SSD_SetState@ssd:	
   555  0073                     ___bmul@multiplier:	
   556                           ; 1 bytes @ 0x3
   557                           
   558                           
   559                           ; 1 bytes @ 0x3
   560  0073                     	ds	1
   561  0074                     ??_SW_Init:	
   562  0074                     ??_SW_Update:	
   563                           ; 1 bytes @ 0x4
   564                           
   565  0074                     ?_SSD_Out:	
   566                           ; 1 bytes @ 0x4
   567                           
   568  0074                     ??_SW_GetState:	
   569                           ; 1 bytes @ 0x4
   570                           
   571  0074                     SSD_Out@ssd_symbol:	
   572                           ; 1 bytes @ 0x4
   573                           
   574                           
   575                           ; 1 bytes @ 0x4
   576  0074                     	ds	1
   577  0075                     ??_SSD_Out:	
   578  0075                     SW_Init@index:	
   579                           ; 1 bytes @ 0x5
   580                           
   581  0075                     SW_GetState@sw:	
   582                           ; 1 bytes @ 0x5
   583                           
   584  0075                     SSD_Out@ssd:	
   585                           ; 1 bytes @ 0x5
   586                           
   587                           
   588                           ; 1 bytes @ 0x5
   589  0075                     	ds	1
   590  0076                     ??_SSD_Init:	
   591  0076                     ??_SSD_Update:	
   592                           ; 1 bytes @ 0x6
   593                           
   594  0076                     ??_VC_Update:	
   595                           ; 1 bytes @ 0x6
   596                           
   597                           
   598                           ; 1 bytes @ 0x6
   599  0076                     	ds	1
   600  0077                     SW_Update@index:	
   601                           
   602                           ; 1 bytes @ 0x7
   603  0077                     	ds	1
   604  0078                     VC_Update@Index:	
   605                           
   606                           ; 1 bytes @ 0x8
   607  0078                     	ds	1
   608  0079                     ??_main:	
   609                           
   610                           ; 1 bytes @ 0x9
   611  0079                     	ds	2
   612                           
   613                           	psect	maintext
   614  05D8                     __pmaintext:	
   615 ;;
   616 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   617 ;;
   618 ;; *************** function _main *****************
   619 ;; Defined at:
   620 ;;		line 10 in file "vaccum.c"
   621 ;; Parameters:    Size  Location     Type
   622 ;;		None
   623 ;; Auto vars:     Size  Location     Type
   624 ;;		None
   625 ;; Return value:  Size  Location     Type
   626 ;;                  2   26[None  ] int 
   627 ;; Registers used:
   628 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   629 ;; Tracked objects:
   630 ;;		On entry : B00/0
   631 ;;		On exit  : 0/0
   632 ;;		Unchanged: 0/0
   633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   634 ;;      Params:         0       0       0       0       0
   635 ;;      Locals:         0       0       0       0       0
   636 ;;      Temps:          2       0       0       0       0
   637 ;;      Totals:         2       0       0       0       0
   638 ;;Total ram usage:        2 bytes
   639 ;; Hardware stack levels required when called:    3
   640 ;; This function calls:
   641 ;;		_SSD_Init
   642 ;;		_SSD_SetValue
   643 ;;		_SSD_Update
   644 ;;		_SW_Init
   645 ;;		_SW_Update
   646 ;;		_VC_GetSpeed
   647 ;;		_VC_Init
   648 ;;		_VC_Update
   649 ;; This function is called by:
   650 ;;		Startup code after reset
   651 ;; This function uses a non-reentrant model
   652 ;;
   653                           
   654                           
   655                           ;psect for function _main
   656  05D8                     _main:	
   657  05D8                     l1319:	
   658                           ;incstack = 0
   659                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   660                           
   661                           
   662                           ;vaccum.c: 12:     SW_Init();
   663  05D8  120A  118A  24F9  120A  118A  	fcall	_SW_Init
   664                           
   665                           ;vaccum.c: 13:     SSD_Init();
   666  05DD  120A  118A  2474  120A  118A  	fcall	_SSD_Init
   667  05E2                     l1321:	
   668                           
   669                           ;vaccum.c: 14:     VC_Init();
   670  05E2  120A  118A  23CC  120A  118A  	fcall	_VC_Init
   671  05E7                     l1323:	
   672                           
   673                           ;vaccum.c: 15:     ((((TRISB))) = (((TRISB)) & (~(1 << ((3)))))|((0) << ((3))));
   674  05E7  1683               	bsf	3,5	;RP0=1, select bank1
   675  05E8  1303               	bcf	3,6	;RP1=0, select bank1
   676  05E9  0806               	movf	6,w	;volatile
   677  05EA  39F7               	andlw	247
   678  05EB  0086               	movwf	6	;volatile
   679  05EC                     l1325:	
   680                           
   681                           ;vaccum.c: 16:     ((((PORTB))) = (((PORTB)) & (~(1 << ((3)))))|(0 << ((3))));
   682  05EC  1283               	bcf	3,5	;RP0=0, select bank0
   683  05ED  1303               	bcf	3,6	;RP1=0, select bank0
   684  05EE  0806               	movf	6,w	;volatile
   685  05EF  39F7               	andlw	247
   686  05F0  0086               	movwf	6	;volatile
   687  05F1                     l1327:	
   688                           
   689                           ;vaccum.c: 20:     {;vaccum.c: 22:         _delay((unsigned long)((1)*(80000000/4000.0))
      +                          );
   690  05F1  301A               	movlw	26
   691  05F2  00FA               	movwf	??_main+1
   692  05F3  30F8               	movlw	248
   693  05F4  00F9               	movwf	??_main
   694  05F5                     u677:	
   695  05F5  0BF9               	decfsz	??_main,f
   696  05F6  2DF5               	goto	u677
   697  05F7  0BFA               	decfsz	??_main+1,f
   698  05F8  2DF5               	goto	u677
   699  05F9  0000               	nop
   700  05FA                     l1329:	
   701                           
   702                           ;vaccum.c: 23:         SW_Update();
   703  05FA  120A  118A  267B  120A  118A  	fcall	_SW_Update
   704  05FF                     l1331:	
   705                           
   706                           ;vaccum.c: 24:         SSD_Update();
   707  05FF  120A  118A  2447  120A  118A  	fcall	_SSD_Update
   708  0604                     l1333:	
   709                           
   710                           ;vaccum.c: 25:         VC_Update();
   711  0604  120A  118A  253F  120A  118A  	fcall	_VC_Update
   712  0609                     l1335:	
   713                           
   714                           ;vaccum.c: 30:         if( VC_GetSpeed() == LOW_SPEED )
   715  0609  120A  118A  23CA  120A  118A  	fcall	_VC_GetSpeed
   716  060E  3A00               	xorlw	0
   717  060F  1D03               	skipz
   718  0610  2E12               	goto	u641
   719  0611  2E13               	goto	u640
   720  0612                     u641:	
   721  0612  2E2F               	goto	l1339
   722  0613                     u640:	
   723  0613                     l1337:	
   724                           
   725                           ;vaccum.c: 32:         {;vaccum.c: 35:           SSD_SetValue(SSD_FIRST,SSD_LOW);
   726  0613  01F0               	clrf	SSD_SetValue@ssd_symbol
   727  0614  3000               	movlw	0
   728  0615  120A  118A  23DE  120A  118A  	fcall	_SSD_SetValue
   729                           
   730                           ;vaccum.c: 36:           SSD_SetValue(SSD_SECOND,SSD_NULL);
   731  061A  3003               	movlw	3
   732  061B  00F9               	movwf	??_main
   733  061C  0879               	movf	??_main,w
   734  061D  00F0               	movwf	SSD_SetValue@ssd_symbol
   735  061E  3001               	movlw	1
   736  061F  120A  118A  23DE  120A  118A  	fcall	_SSD_SetValue
   737                           
   738                           ;vaccum.c: 37:           SSD_SetValue(SSD_THIRD,SSD_NULL);
   739  0624  3003               	movlw	3
   740  0625  00F9               	movwf	??_main
   741  0626  0879               	movf	??_main,w
   742  0627  00F0               	movwf	SSD_SetValue@ssd_symbol
   743  0628  3002               	movlw	2
   744  0629  120A  118A  23DE  120A  118A  	fcall	_SSD_SetValue
   745                           
   746                           ;vaccum.c: 38:         }
   747  062E  2DF1               	goto	l1327
   748  062F                     l1339:	
   749  062F  120A  118A  23CA  120A  118A  	fcall	_VC_GetSpeed
   750  0634  3A01               	xorlw	1
   751  0635  1D03               	skipz
   752  0636  2E38               	goto	u651
   753  0637  2E39               	goto	u650
   754  0638                     u651:	
   755  0638  2E53               	goto	l1343
   756  0639                     u650:	
   757  0639                     l1341:	
   758                           
   759                           ;vaccum.c: 41:         {;vaccum.c: 44:           SSD_SetValue(SSD_FIRST,SSD_LOW);
   760  0639  01F0               	clrf	SSD_SetValue@ssd_symbol
   761  063A  3000               	movlw	0
   762  063B  120A  118A  23DE  120A  118A  	fcall	_SSD_SetValue
   763                           
   764                           ;vaccum.c: 45:           SSD_SetValue(SSD_SECOND,SSD_MID);
   765  0640  01F0               	clrf	SSD_SetValue@ssd_symbol
   766  0641  0AF0               	incf	SSD_SetValue@ssd_symbol,f
   767  0642  3001               	movlw	1
   768  0643  120A  118A  23DE  120A  118A  	fcall	_SSD_SetValue
   769                           
   770                           ;vaccum.c: 46:           SSD_SetValue(SSD_THIRD,SSD_NULL);
   771  0648  3003               	movlw	3
   772  0649  00F9               	movwf	??_main
   773  064A  0879               	movf	??_main,w
   774  064B  00F0               	movwf	SSD_SetValue@ssd_symbol
   775  064C  3002               	movlw	2
   776  064D  120A  118A  23DE  120A  118A  	fcall	_SSD_SetValue
   777                           
   778                           ;vaccum.c: 48:         }
   779  0652  2DF1               	goto	l1327
   780  0653                     l1343:	
   781  0653  120A  118A  23CA  120A  118A  	fcall	_VC_GetSpeed
   782  0658  3A02               	xorlw	2
   783  0659  1D03               	skipz
   784  065A  2E5C               	goto	u661
   785  065B  2E5D               	goto	u660
   786  065C                     u661:	
   787  065C  2E77               	goto	l29
   788  065D                     u660:	
   789  065D                     l1345:	
   790                           
   791                           ;vaccum.c: 51:         {;vaccum.c: 54:           SSD_SetValue(SSD_FIRST,SSD_LOW);
   792  065D  01F0               	clrf	SSD_SetValue@ssd_symbol
   793  065E  3000               	movlw	0
   794  065F  120A  118A  23DE  120A  118A  	fcall	_SSD_SetValue
   795                           
   796                           ;vaccum.c: 55:           SSD_SetValue(SSD_SECOND,SSD_MID);
   797  0664  01F0               	clrf	SSD_SetValue@ssd_symbol
   798  0665  0AF0               	incf	SSD_SetValue@ssd_symbol,f
   799  0666  3001               	movlw	1
   800  0667  120A  118A  23DE  120A  118A  	fcall	_SSD_SetValue
   801                           
   802                           ;vaccum.c: 56:           SSD_SetValue(SSD_THIRD,SSD_HIGH);
   803  066C  3002               	movlw	2
   804  066D  00F9               	movwf	??_main
   805  066E  0879               	movf	??_main,w
   806  066F  00F0               	movwf	SSD_SetValue@ssd_symbol
   807  0670  3002               	movlw	2
   808  0671  120A  118A  23DE  120A  118A  	fcall	_SSD_SetValue
   809  0676  2DF1               	goto	l1327
   810  0677                     l29:	
   811  0677  2DF1               	goto	l1327
   812  0678  120A  118A  2800   	ljmp	start
   813  067B                     __end_of_main:	
   814                           
   815                           	psect	text1
   816  053F                     __ptext1:	
   817 ;; *************** function _VC_Update *****************
   818 ;; Defined at:
   819 ;;		line 27 in file "VC.c"
   820 ;; Parameters:    Size  Location     Type
   821 ;;		None
   822 ;; Auto vars:     Size  Location     Type
   823 ;;  Index           1    8[COMMON] unsigned char 
   824 ;; Return value:  Size  Location     Type
   825 ;;                  1    wreg      void 
   826 ;; Registers used:
   827 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   828 ;; Tracked objects:
   829 ;;		On entry : 0/0
   830 ;;		On exit  : 0/0
   831 ;;		Unchanged: 0/0
   832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   833 ;;      Params:         0       0       0       0       0
   834 ;;      Locals:         1       0       0       0       0
   835 ;;      Temps:          2       0       0       0       0
   836 ;;      Totals:         3       0       0       0       0
   837 ;;Total ram usage:        3 bytes
   838 ;; Hardware stack levels used:    1
   839 ;; Hardware stack levels required when called:    2
   840 ;; This function calls:
   841 ;;		_SW_GetState
   842 ;; This function is called by:
   843 ;;		_main
   844 ;; This function uses a non-reentrant model
   845 ;;
   846                           
   847                           
   848                           ;psect for function _VC_Update
   849  053F                     _VC_Update:	
   850  053F                     l1257:	
   851                           ;incstack = 0
   852                           ; Regs used in _VC_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   853                           
   854                           
   855                           ;VC.c: 29:     static tWord VC_counter = 0;;VC.c: 30:     tByte Index;;VC.c: 32:     VC_
      +                          counter += (5);
   856  053F  3005               	movlw	5
   857  0540  1283               	bcf	3,5	;RP0=0, select bank0
   858  0541  1303               	bcf	3,6	;RP1=0, select bank0
   859  0542  07AB               	addwf	VC_Update@VC_counter,f
   860  0543  1803               	skipnc
   861  0544  0AAC               	incf	VC_Update@VC_counter+1,f
   862  0545  3000               	movlw	0
   863  0546  07AC               	addwf	VC_Update@VC_counter+1,f
   864  0547                     l1259:	
   865                           
   866                           ;VC.c: 34:     if(VC_counter != (20))
   867  0547  3014               	movlw	20
   868  0548  062B               	xorwf	VC_Update@VC_counter,w
   869  0549  042C               	iorwf	VC_Update@VC_counter+1,w
   870  054A  1903               	btfsc	3,2
   871  054B  2D4D               	goto	u541
   872  054C  2D4E               	goto	u540
   873  054D                     u541:	
   874  054D  2D4F               	goto	l1263
   875  054E                     u540:	
   876  054E  2DD7               	goto	l153
   877  054F                     l1263:	
   878                           
   879                           ;VC.c: 39:     VC_counter = 0;
   880  054F  01AB               	clrf	VC_Update@VC_counter
   881  0550  01AC               	clrf	VC_Update@VC_counter+1
   882                           
   883                           ;VC.c: 40:     for(Index = SW_PLUS ; Index < (3) ; Index ++ )
   884  0551  01F8               	clrf	VC_Update@Index
   885  0552  2D8F               	goto	l1291
   886  0553                     l1269:	
   887                           
   888                           ;VC.c: 47:                     if(SW_GetState(SW_PLUS) == SW_PRE_RELEASED)
   889  0553  3000               	movlw	0
   890  0554  120A  118A  23E8  120A  118A  	fcall	_SW_GetState
   891  0559  3A03               	xorlw	3
   892  055A  1D03               	skipz
   893  055B  2D5D               	goto	u551
   894  055C  2D5E               	goto	u550
   895  055D                     u551:	
   896  055D  2DA2               	goto	l1293
   897  055E                     u550:	
   898  055E                     l1271:	
   899                           
   900                           ;VC.c: 48:                     {;VC.c: 49:                          if( TargetSpeed == H
      +                          IGH_SPEED)
   901  055E  3002               	movlw	2
   902  055F  067B               	xorwf	_TargetSpeed,w
   903  0560  1D03               	btfss	3,2
   904  0561  2D63               	goto	u561
   905  0562  2D64               	goto	u560
   906  0563                     u561:	
   907  0563  2D65               	goto	l1275
   908  0564                     u560:	
   909  0564  2DCD               	goto	l160
   910  0565                     l1275:	
   911                           
   912                           ;VC.c: 54:                               TargetSpeed ++;
   913  0565  3001               	movlw	1
   914  0566  00F6               	movwf	??_VC_Update
   915  0567  0876               	movf	??_VC_Update,w
   916  0568  07FB               	addwf	_TargetSpeed,f
   917  0569  2DA2               	goto	l1293
   918  056A                     l1277:	
   919                           
   920                           ;VC.c: 58:                     if(SW_GetState(SW_MINUS) == SW_PRE_RELEASED)
   921  056A  3001               	movlw	1
   922  056B  120A  118A  23E8  120A  118A  	fcall	_SW_GetState
   923  0570  3A03               	xorlw	3
   924  0571  1D03               	skipz
   925  0572  2D74               	goto	u571
   926  0573  2D75               	goto	u570
   927  0574                     u571:	
   928  0574  2DA2               	goto	l1293
   929  0575                     u570:	
   930  0575                     l1279:	
   931                           
   932                           ;VC.c: 59:                     {;VC.c: 60:                         if( TargetSpeed == LO
      +                          W_SPEED)
   933  0575  087B               	movf	_TargetSpeed,w
   934  0576  1D03               	btfss	3,2
   935  0577  2D79               	goto	u581
   936  0578  2D7A               	goto	u580
   937  0579                     u581:	
   938  0579  2D7B               	goto	l1283
   939  057A                     u580:	
   940  057A  2DCD               	goto	l160
   941  057B                     l1283:	
   942                           
   943                           ;VC.c: 64:                              TargetSpeed --;
   944  057B  3001               	movlw	1
   945  057C  02FB               	subwf	_TargetSpeed,f
   946  057D  2DA2               	goto	l1293
   947  057E                     l1285:	
   948                           
   949                           ;VC.c: 68:                     if(SW_GetState(SW_PRESSURE) == SW_PRE_RELEASED)
   950  057E  3002               	movlw	2
   951  057F  120A  118A  23E8  120A  118A  	fcall	_SW_GetState
   952  0584  3A03               	xorlw	3
   953  0585  1D03               	skipz
   954  0586  2D88               	goto	u591
   955  0587  2D89               	goto	u590
   956  0588                     u591:	
   957  0588  2DA2               	goto	l1293
   958  0589                     u590:	
   959  0589                     l1287:	
   960                           
   961                           ;VC.c: 69:                     {;VC.c: 70:                          ((((PORTB))) = (((PO
      +                          RTB)) & (~(1 << ((3)))))|(0 << ((3))));
   962  0589  1283               	bcf	3,5	;RP0=0, select bank0
   963  058A  1303               	bcf	3,6	;RP1=0, select bank0
   964  058B  0806               	movf	6,w	;volatile
   965  058C  39F7               	andlw	247
   966  058D  0086               	movwf	6	;volatile
   967  058E  2DA2               	goto	l1293
   968  058F                     l1291:	
   969  058F  0878               	movf	VC_Update@Index,w
   970  0590  00F6               	movwf	??_VC_Update
   971  0591  01F7               	clrf	??_VC_Update+1
   972                           
   973                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   974                           ; Switch size 1, requested type "simple"
   975                           ; Number of cases is 1, Range of values is 0 to 0
   976                           ; switch strategies available:
   977                           ; Name         Instructions Cycles
   978                           ; simple_byte            4     3 (average)
   979                           ; direct_byte           11     8 (fixed)
   980                           ; jumptable            260     6 (fixed)
   981                           ;	Chosen strategy is simple_byte
   982  0592  0877               	movf	??_VC_Update+1,w
   983  0593  3A00               	xorlw	0	; case 0
   984  0594  1903               	skipnz
   985  0595  2D97               	goto	l1407
   986  0596  2DA2               	goto	l1293
   987  0597                     l1407:	
   988                           
   989                           ; Switch size 1, requested type "simple"
   990                           ; Number of cases is 3, Range of values is 0 to 2
   991                           ; switch strategies available:
   992                           ; Name         Instructions Cycles
   993                           ; simple_byte           10     6 (average)
   994                           ; direct_byte           17     8 (fixed)
   995                           ; jumptable            260     6 (fixed)
   996                           ;	Chosen strategy is simple_byte
   997  0597  0876               	movf	??_VC_Update,w
   998  0598  3A00               	xorlw	0	; case 0
   999  0599  1903               	skipnz
  1000  059A  2D53               	goto	l1269
  1001  059B  3A01               	xorlw	1	; case 1
  1002  059C  1903               	skipnz
  1003  059D  2D6A               	goto	l1277
  1004  059E  3A03               	xorlw	3	; case 2
  1005  059F  1903               	skipnz
  1006  05A0  2D7E               	goto	l1285
  1007  05A1  2DA2               	goto	l1293
  1008  05A2                     l1293:	
  1009                           
  1010                           ;VC.c: 80:         if(SW_GetState(SW_PRESSURE) == SW_PRESSED)
  1011  05A2  3002               	movlw	2
  1012  05A3  120A  118A  23E8  120A  118A  	fcall	_SW_GetState
  1013  05A8  3A02               	xorlw	2
  1014  05A9  1D03               	skipz
  1015  05AA  2DAC               	goto	u601
  1016  05AB  2DAD               	goto	u600
  1017  05AC                     u601:	
  1018  05AC  2DCD               	goto	l160
  1019  05AD                     u600:	
  1020  05AD                     l1295:	
  1021                           
  1022                           ;VC.c: 81:         {;VC.c: 82:             ((((PORTB))) = (((PORTB)) & (~(1 << ((3)))))|
      +                          (1 << ((3))));
  1023  05AD  1283               	bcf	3,5	;RP0=0, select bank0
  1024  05AE  1303               	bcf	3,6	;RP1=0, select bank0
  1025  05AF  0806               	movf	6,w	;volatile
  1026  05B0  39F7               	andlw	247
  1027  05B1  3808               	iorlw	8
  1028  05B2  0086               	movwf	6	;volatile
  1029  05B3                     l1297:	
  1030                           
  1031                           ;VC.c: 84:            static tWord PRESSURE_counter = 0;;VC.c: 86:             PRESSURE_
      +                          counter += (20);
  1032  05B3  3014               	movlw	20
  1033  05B4  07A9               	addwf	VC_Update@PRESSURE_counter,f
  1034  05B5  1803               	skipnc
  1035  05B6  0AAA               	incf	VC_Update@PRESSURE_counter+1,f
  1036  05B7  3000               	movlw	0
  1037  05B8  07AA               	addwf	VC_Update@PRESSURE_counter+1,f
  1038  05B9                     l1299:	
  1039                           
  1040                           ;VC.c: 87:             if( PRESSURE_counter != (3000) )
  1041  05B9  30B8               	movlw	184
  1042  05BA  0629               	xorwf	VC_Update@PRESSURE_counter,w
  1043  05BB  300B               	movlw	11
  1044  05BC  1903               	skipnz
  1045  05BD  062A               	xorwf	VC_Update@PRESSURE_counter+1,w
  1046  05BE  1903               	btfsc	3,2
  1047  05BF  2DC1               	goto	u611
  1048  05C0  2DC2               	goto	u610
  1049  05C1                     u611:	
  1050  05C1  2DC3               	goto	l1303
  1051  05C2                     u610:	
  1052  05C2  2DD7               	goto	l153
  1053  05C3                     l1303:	
  1054                           
  1055                           ;VC.c: 91:             PRESSURE_counter = 0;
  1056  05C3  01A9               	clrf	VC_Update@PRESSURE_counter
  1057  05C4  01AA               	clrf	VC_Update@PRESSURE_counter+1
  1058  05C5                     l1305:	
  1059                           
  1060                           ;VC.c: 93:             if( TargetSpeed == LOW_SPEED)
  1061  05C5  087B               	movf	_TargetSpeed,w
  1062  05C6  1D03               	btfss	3,2
  1063  05C7  2DC9               	goto	u621
  1064  05C8  2DCA               	goto	u620
  1065  05C9                     u621:	
  1066  05C9  2DCB               	goto	l1309
  1067  05CA                     u620:	
  1068  05CA  2DD7               	goto	l153
  1069  05CB                     l1309:	
  1070                           
  1071                           ;VC.c: 98:                     TargetSpeed --;
  1072  05CB  3001               	movlw	1
  1073  05CC  02FB               	subwf	_TargetSpeed,f
  1074  05CD                     l160:	
  1075                           ;VC.c: 102: }
  1076                           
  1077  05CD  3001               	movlw	1
  1078  05CE  00F6               	movwf	??_VC_Update
  1079  05CF  0876               	movf	??_VC_Update,w
  1080  05D0  07F8               	addwf	VC_Update@Index,f
  1081  05D1                     l1311:	
  1082  05D1  3003               	movlw	3
  1083  05D2  0278               	subwf	VC_Update@Index,w
  1084  05D3  1C03               	skipc
  1085  05D4  2DD6               	goto	u631
  1086  05D5  2DD7               	goto	u630
  1087  05D6                     u631:	
  1088  05D6  2D8F               	goto	l1291
  1089  05D7                     u630:	
  1090  05D7                     l153:	
  1091  05D7  0008               	return
  1092  05D8                     __end_of_VC_Update:	
  1093                           
  1094                           	psect	text2
  1095  03E8                     __ptext2:	
  1096 ;; *************** function _SW_GetState *****************
  1097 ;; Defined at:
  1098 ;;		line 60 in file "SW.c"
  1099 ;; Parameters:    Size  Location     Type
  1100 ;;  sw              1    wreg     enum E852
  1101 ;; Auto vars:     Size  Location     Type
  1102 ;;  sw              1    5[COMMON] enum E852
  1103 ;; Return value:  Size  Location     Type
  1104 ;;                  1    wreg      enum E857
  1105 ;; Registers used:
  1106 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1107 ;; Tracked objects:
  1108 ;;		On entry : 0/0
  1109 ;;		On exit  : 0/0
  1110 ;;		Unchanged: 0/0
  1111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1112 ;;      Params:         0       0       0       0       0
  1113 ;;      Locals:         1       0       0       0       0
  1114 ;;      Temps:          1       0       0       0       0
  1115 ;;      Totals:         2       0       0       0       0
  1116 ;;Total ram usage:        2 bytes
  1117 ;; Hardware stack levels used:    1
  1118 ;; Hardware stack levels required when called:    1
  1119 ;; This function calls:
  1120 ;;		___bmul
  1121 ;; This function is called by:
  1122 ;;		_VC_Update
  1123 ;; This function uses a non-reentrant model
  1124 ;;
  1125                           
  1126                           
  1127                           ;psect for function _SW_GetState
  1128  03E8                     _SW_GetState:	
  1129                           
  1130                           ;incstack = 0
  1131                           ; Regs used in _SW_GetState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1132                           ;SW_GetState@sw stored from wreg
  1133  03E8  00F5               	movwf	SW_GetState@sw
  1134  03E9                     l1129:	
  1135                           
  1136                           ;SW.c: 60: tSW_State SW_GetState(tSW sw);SW.c: 61: {;SW.c: 64:     return SWs_Info[sw].s
      +                          w_state;
  1137  03E9  3003               	movlw	3
  1138  03EA  00F4               	movwf	??_SW_GetState
  1139  03EB  0874               	movf	??_SW_GetState,w
  1140  03EC  00F0               	movwf	___bmul@multiplicand
  1141  03ED  0875               	movf	SW_GetState@sw,w
  1142  03EE  120A  118A  240B  120A  118A  	fcall	___bmul
  1143  03F3  3E22               	addlw	(low ((_SWs_Info| 0+2)))& (0+255)
  1144  03F4  0084               	movwf	4
  1145  03F5  1383               	bcf	3,7	;select IRP bank0
  1146  03F6  0800               	movf	0,w
  1147  03F7                     l49:	
  1148  03F7  0008               	return
  1149  03F8                     __end_of_SW_GetState:	
  1150                           
  1151                           	psect	text3
  1152  03CC                     __ptext3:	
  1153 ;; *************** function _VC_Init *****************
  1154 ;; Defined at:
  1155 ;;		line 20 in file "VC.c"
  1156 ;; Parameters:    Size  Location     Type
  1157 ;;		None
  1158 ;; Auto vars:     Size  Location     Type
  1159 ;;		None
  1160 ;; Return value:  Size  Location     Type
  1161 ;;                  1    wreg      void 
  1162 ;; Registers used:
  1163 ;;		None
  1164 ;; Tracked objects:
  1165 ;;		On entry : 0/0
  1166 ;;		On exit  : 0/0
  1167 ;;		Unchanged: 0/0
  1168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1169 ;;      Params:         0       0       0       0       0
  1170 ;;      Locals:         0       0       0       0       0
  1171 ;;      Temps:          0       0       0       0       0
  1172 ;;      Totals:         0       0       0       0       0
  1173 ;;Total ram usage:        0 bytes
  1174 ;; Hardware stack levels used:    1
  1175 ;; This function calls:
  1176 ;;		Nothing
  1177 ;; This function is called by:
  1178 ;;		_main
  1179 ;; This function uses a non-reentrant model
  1180 ;;
  1181                           
  1182                           
  1183                           ;psect for function _VC_Init
  1184  03CC                     _VC_Init:	
  1185  03CC                     l849:	
  1186                           ;incstack = 0
  1187                           ; Regs used in _VC_Init: []
  1188                           
  1189                           
  1190                           ;VC.c: 23:     TargetSpeed = MID_SPEED;
  1191  03CC  01FB               	clrf	_TargetSpeed
  1192  03CD  0AFB               	incf	_TargetSpeed,f
  1193  03CE                     l147:	
  1194  03CE  0008               	return
  1195  03CF                     __end_of_VC_Init:	
  1196                           
  1197                           	psect	text4
  1198  03CA                     __ptext4:	
  1199 ;; *************** function _VC_GetSpeed *****************
  1200 ;; Defined at:
  1201 ;;		line 118 in file "VC.c"
  1202 ;; Parameters:    Size  Location     Type
  1203 ;;		None
  1204 ;; Auto vars:     Size  Location     Type
  1205 ;;		None
  1206 ;; Return value:  Size  Location     Type
  1207 ;;                  1    wreg      enum E1071
  1208 ;; Registers used:
  1209 ;;		wreg
  1210 ;; Tracked objects:
  1211 ;;		On entry : 0/0
  1212 ;;		On exit  : 0/0
  1213 ;;		Unchanged: 0/0
  1214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1215 ;;      Params:         0       0       0       0       0
  1216 ;;      Locals:         0       0       0       0       0
  1217 ;;      Temps:          0       0       0       0       0
  1218 ;;      Totals:         0       0       0       0       0
  1219 ;;Total ram usage:        0 bytes
  1220 ;; Hardware stack levels used:    1
  1221 ;; This function calls:
  1222 ;;		Nothing
  1223 ;; This function is called by:
  1224 ;;		_main
  1225 ;; This function uses a non-reentrant model
  1226 ;;
  1227                           
  1228                           
  1229                           ;psect for function _VC_GetSpeed
  1230  03CA                     _VC_GetSpeed:	
  1231  03CA                     l987:	
  1232                           ;incstack = 0
  1233                           ; Regs used in _VC_GetSpeed: [wreg]
  1234                           
  1235                           
  1236                           ;VC.c: 121:     return TargetSpeed;
  1237  03CA  087B               	movf	_TargetSpeed,w
  1238  03CB                     l175:	
  1239  03CB  0008               	return
  1240  03CC                     __end_of_VC_GetSpeed:	
  1241                           
  1242                           	psect	text5
  1243  067B                     __ptext5:	
  1244 ;; *************** function _SW_Update *****************
  1245 ;; Defined at:
  1246 ;;		line 75 in file "SW.c"
  1247 ;; Parameters:    Size  Location     Type
  1248 ;;		None
  1249 ;; Auto vars:     Size  Location     Type
  1250 ;;  index           1    7[COMMON] unsigned char 
  1251 ;; Return value:  Size  Location     Type
  1252 ;;                  1    wreg      void 
  1253 ;; Registers used:
  1254 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1255 ;; Tracked objects:
  1256 ;;		On entry : 0/0
  1257 ;;		On exit  : 0/0
  1258 ;;		Unchanged: 0/0
  1259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1260 ;;      Params:         0       0       0       0       0
  1261 ;;      Locals:         1       0       0       0       0
  1262 ;;      Temps:          3       0       0       0       0
  1263 ;;      Totals:         4       0       0       0       0
  1264 ;;Total ram usage:        4 bytes
  1265 ;; Hardware stack levels used:    1
  1266 ;; Hardware stack levels required when called:    1
  1267 ;; This function calls:
  1268 ;;		___bmul
  1269 ;; This function is called by:
  1270 ;;		_main
  1271 ;; This function uses a non-reentrant model
  1272 ;;
  1273                           
  1274                           
  1275                           ;psect for function _SW_Update
  1276  067B                     _SW_Update:	
  1277  067B                     l1181:	
  1278                           ;incstack = 0
  1279                           ; Regs used in _SW_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1280                           
  1281  067B                     l1183:	
  1282                           
  1283                           ;SW.c: 81:     SW_counter += (5);
  1284  067B  3005               	movlw	5
  1285  067C  1283               	bcf	3,5	;RP0=0, select bank0
  1286  067D  1303               	bcf	3,6	;RP1=0, select bank0
  1287  067E  07AF               	addwf	SW_Update@SW_counter,f
  1288  067F  1803               	skipnc
  1289  0680  0AB0               	incf	SW_Update@SW_counter+1,f
  1290  0681  3000               	movlw	0
  1291  0682  07B0               	addwf	SW_Update@SW_counter+1,f
  1292  0683                     l1185:	
  1293                           
  1294                           ;SW.c: 83:     if (SW_counter != (20)){
  1295  0683  3014               	movlw	20
  1296  0684  062F               	xorwf	SW_Update@SW_counter,w
  1297  0685  0430               	iorwf	SW_Update@SW_counter+1,w
  1298  0686  1903               	btfsc	3,2
  1299  0687  2E89               	goto	u401
  1300  0688  2E8A               	goto	u400
  1301  0689                     u401:	
  1302  0689  2E8B               	goto	l1189
  1303  068A                     u400:	
  1304  068A  2FE3               	goto	l55
  1305  068B                     l1189:	
  1306                           
  1307                           ;SW.c: 87:     SW_counter = 0;
  1308  068B  01AF               	clrf	SW_Update@SW_counter
  1309  068C  01B0               	clrf	SW_Update@SW_counter+1
  1310                           
  1311                           ;SW.c: 90:     for (index = SW_PLUS; index < (3); index++)
  1312  068D  01F7               	clrf	SW_Update@index
  1313  068E                     l1195:	
  1314                           
  1315                           ;SW.c: 91:     {;SW.c: 94:         SWs_Info[index].sw_samples[0] = SWs_Info[index].sw_sa
      +                          mples[1];
  1316  068E  3003               	movlw	3
  1317  068F  00F4               	movwf	??_SW_Update
  1318  0690  0874               	movf	??_SW_Update,w
  1319  0691  00F0               	movwf	___bmul@multiplicand
  1320  0692  0877               	movf	SW_Update@index,w
  1321  0693  120A  118A  240B  120A  118A  	fcall	___bmul
  1322  0698  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
  1323  0699  0084               	movwf	4
  1324  069A  1383               	bcf	3,7	;select IRP bank0
  1325  069B  0800               	movf	0,w
  1326  069C  00F5               	movwf	??_SW_Update+1
  1327  069D  3003               	movlw	3
  1328  069E  00F6               	movwf	??_SW_Update+2
  1329  069F  0876               	movf	??_SW_Update+2,w
  1330  06A0  00F0               	movwf	___bmul@multiplicand
  1331  06A1  0877               	movf	SW_Update@index,w
  1332  06A2  120A  118A  240B  120A  118A  	fcall	___bmul
  1333  06A7  3E20               	addlw	(low (_SWs_Info| 0))& (0+255)
  1334  06A8  0084               	movwf	4
  1335  06A9  0875               	movf	??_SW_Update+1,w
  1336  06AA  1383               	bcf	3,7	;select IRP bank0
  1337  06AB  0080               	movwf	0
  1338  06AC                     l1197:	
  1339                           
  1340                           ;SW.c: 96:         if (index == SW_PLUS)
  1341  06AC  0877               	movf	SW_Update@index,w
  1342  06AD  1D03               	btfss	3,2
  1343  06AE  2EB0               	goto	u411
  1344  06AF  2EB1               	goto	u410
  1345  06B0                     u411:	
  1346  06B0  2EC6               	goto	l1201
  1347  06B1                     u410:	
  1348  06B1                     l1199:	
  1349                           
  1350                           ;SW.c: 97:         {;SW.c: 98:             SWs_Info[index].sw_samples[1] = (((((PORTB)))
      +                           & (1 << ((0)))) >> (((0))));
  1351  06B1  1283               	bcf	3,5	;RP0=0, select bank0
  1352  06B2  1303               	bcf	3,6	;RP1=0, select bank0
  1353  06B3  0806               	movf	6,w	;volatile
  1354  06B4  3901               	andlw	1
  1355  06B5  00F4               	movwf	??_SW_Update
  1356  06B6  3003               	movlw	3
  1357  06B7  00F5               	movwf	??_SW_Update+1
  1358  06B8  0875               	movf	??_SW_Update+1,w
  1359  06B9  00F0               	movwf	___bmul@multiplicand
  1360  06BA  0877               	movf	SW_Update@index,w
  1361  06BB  120A  118A  240B  120A  118A  	fcall	___bmul
  1362  06C0  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
  1363  06C1  0084               	movwf	4
  1364  06C2  0874               	movf	??_SW_Update,w
  1365  06C3  1383               	bcf	3,7	;select IRP bank0
  1366  06C4  0080               	movwf	0
  1367                           
  1368                           ;SW.c: 99:         } else if (index == SW_MINUS)
  1369  06C5  2FB6               	goto	l1231
  1370  06C6                     l1201:	
  1371  06C6  0377               	decf	SW_Update@index,w
  1372  06C7  1D03               	btfss	3,2
  1373  06C8  2ECA               	goto	u421
  1374  06C9  2ECB               	goto	u420
  1375  06CA                     u421:	
  1376  06CA  2EE3               	goto	l1205
  1377  06CB                     u420:	
  1378  06CB                     l1203:	
  1379                           
  1380                           ;SW.c: 100:         {;SW.c: 101:             SWs_Info[index].sw_samples[1] = (((((PORTB)
      +                          )) & (1 << ((1)))) >> (((1))));
  1381  06CB  1283               	bcf	3,5	;RP0=0, select bank0
  1382  06CC  1303               	bcf	3,6	;RP1=0, select bank0
  1383  06CD  0806               	movf	6,w	;volatile
  1384  06CE  00F4               	movwf	??_SW_Update
  1385  06CF  1003               	clrc
  1386  06D0  0C74               	rrf	??_SW_Update,w
  1387  06D1  3901               	andlw	1
  1388  06D2  00F5               	movwf	??_SW_Update+1
  1389  06D3  3003               	movlw	3
  1390  06D4  00F6               	movwf	??_SW_Update+2
  1391  06D5  0876               	movf	??_SW_Update+2,w
  1392  06D6  00F0               	movwf	___bmul@multiplicand
  1393  06D7  0877               	movf	SW_Update@index,w
  1394  06D8  120A  118A  240B  120A  118A  	fcall	___bmul
  1395  06DD  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
  1396  06DE  0084               	movwf	4
  1397  06DF  0875               	movf	??_SW_Update+1,w
  1398  06E0  1383               	bcf	3,7	;select IRP bank0
  1399  06E1  0080               	movwf	0
  1400                           
  1401                           ;SW.c: 102:         } else if (index == SW_PRESSURE)
  1402  06E2  2FB6               	goto	l1231
  1403  06E3                     l1205:	
  1404  06E3  3002               	movlw	2
  1405  06E4  0677               	xorwf	SW_Update@index,w
  1406  06E5  1D03               	btfss	3,2
  1407  06E6  2EE8               	goto	u431
  1408  06E7  2EE9               	goto	u430
  1409  06E8                     u431:	
  1410  06E8  2F06               	goto	l59
  1411  06E9                     u430:	
  1412  06E9                     l1207:	
  1413                           
  1414                           ;SW.c: 103:         {;SW.c: 104:             SWs_Info[index].sw_samples[1] = (((((PORTB)
      +                          )) & (1 << ((2)))) >> (((2))));
  1415  06E9  1283               	bcf	3,5	;RP0=0, select bank0
  1416  06EA  1303               	bcf	3,6	;RP1=0, select bank0
  1417  06EB  0806               	movf	6,w	;volatile
  1418  06EC  00F4               	movwf	??_SW_Update
  1419  06ED  3002               	movlw	2
  1420  06EE                     u445:	
  1421  06EE  1003               	clrc
  1422  06EF  0CF4               	rrf	??_SW_Update,f
  1423  06F0  3EFF               	addlw	-1
  1424  06F1  1D03               	skipz
  1425  06F2  2EEE               	goto	u445
  1426  06F3  0874               	movf	??_SW_Update,w
  1427  06F4  3901               	andlw	1
  1428  06F5  00F5               	movwf	??_SW_Update+1
  1429  06F6  3003               	movlw	3
  1430  06F7  00F6               	movwf	??_SW_Update+2
  1431  06F8  0876               	movf	??_SW_Update+2,w
  1432  06F9  00F0               	movwf	___bmul@multiplicand
  1433  06FA  0877               	movf	SW_Update@index,w
  1434  06FB  120A  118A  240B  120A  118A  	fcall	___bmul
  1435  0700  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
  1436  0701  0084               	movwf	4
  1437  0702  0875               	movf	??_SW_Update+1,w
  1438  0703  1383               	bcf	3,7	;select IRP bank0
  1439  0704  0080               	movwf	0
  1440                           
  1441                           ;SW.c: 105:         } else
  1442  0705  2FB6               	goto	l1231
  1443  0706                     l59:	
  1444                           
  1445                           ;SW.c: 113:         switch(SWs_Info[index].sw_state)
  1446  0706  2FB6               	goto	l1231
  1447  0707                     l1209:	
  1448                           
  1449                           ;SW.c: 118:                 if ((SWs_Info[index].sw_samples[0] == (0)) &&
  1450  0707  3003               	movlw	3
  1451  0708  00F4               	movwf	??_SW_Update
  1452  0709  0874               	movf	??_SW_Update,w
  1453  070A  00F0               	movwf	___bmul@multiplicand
  1454  070B  0877               	movf	SW_Update@index,w
  1455  070C  120A  118A  240B  120A  118A  	fcall	___bmul
  1456  0711  3E20               	addlw	(low (_SWs_Info| 0))& (0+255)
  1457  0712  0084               	movwf	4
  1458  0713  1383               	bcf	3,7	;select IRP bank0
  1459  0714  0800               	movf	0,w
  1460  0715  1D03               	btfss	3,2
  1461  0716  2F18               	goto	u451
  1462  0717  2F19               	goto	u450
  1463  0718                     u451:	
  1464  0718  2FD9               	goto	l1233
  1465  0719                     u450:	
  1466  0719                     l1211:	
  1467  0719  3003               	movlw	3
  1468  071A  00F4               	movwf	??_SW_Update
  1469  071B  0874               	movf	??_SW_Update,w
  1470  071C  00F0               	movwf	___bmul@multiplicand
  1471  071D  0877               	movf	SW_Update@index,w
  1472  071E  120A  118A  240B  120A  118A  	fcall	___bmul
  1473  0723  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
  1474  0724  0084               	movwf	4
  1475  0725  1383               	bcf	3,7	;select IRP bank0
  1476  0726  0800               	movf	0,w
  1477  0727  1D03               	btfss	3,2
  1478  0728  2F2A               	goto	u461
  1479  0729  2F2B               	goto	u460
  1480  072A                     u461:	
  1481  072A  2FD9               	goto	l1233
  1482  072B                     u460:	
  1483  072B                     l1213:	
  1484                           
  1485                           ;SW.c: 120:                 {;SW.c: 121:                     SWs_Info[index].sw_state = 
      +                          SW_PRE_PRESSED;
  1486  072B  3003               	movlw	3
  1487  072C  00F4               	movwf	??_SW_Update
  1488  072D  0874               	movf	??_SW_Update,w
  1489  072E  00F0               	movwf	___bmul@multiplicand
  1490  072F  0877               	movf	SW_Update@index,w
  1491  0730  120A  118A  240B  120A  118A  	fcall	___bmul
  1492  0735  3E22               	addlw	(low ((_SWs_Info| 0+2)))& (0+255)
  1493  0736  0084               	movwf	4
  1494  0737  1383               	bcf	3,7	;select IRP bank0
  1495  0738  0180               	clrf	0
  1496  0739  0A80               	incf	0,f
  1497                           
  1498                           ;SW.c: 122:                 } else
  1499  073A  2FD9               	goto	l1233
  1500  073B                     l1215:	
  1501                           
  1502                           ;SW.c: 129:                 if (SWs_Info[index].sw_samples[1] == (0))
  1503  073B  3003               	movlw	3
  1504  073C  00F4               	movwf	??_SW_Update
  1505  073D  0874               	movf	??_SW_Update,w
  1506  073E  00F0               	movwf	___bmul@multiplicand
  1507  073F  0877               	movf	SW_Update@index,w
  1508  0740  120A  118A  240B  120A  118A  	fcall	___bmul
  1509  0745  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
  1510  0746  0084               	movwf	4
  1511  0747  1383               	bcf	3,7	;select IRP bank0
  1512  0748  0800               	movf	0,w
  1513  0749  1D03               	btfss	3,2
  1514  074A  2F4C               	goto	u471
  1515  074B  2F4D               	goto	u470
  1516  074C                     u471:	
  1517  074C  2FD9               	goto	l1233
  1518  074D                     u470:	
  1519  074D                     l1217:	
  1520                           
  1521                           ;SW.c: 130:                 {;SW.c: 131:                     SWs_Info[index].sw_state = 
      +                          SW_PRESSED;
  1522  074D  3002               	movlw	2
  1523  074E  00F4               	movwf	??_SW_Update
  1524  074F  3003               	movlw	3
  1525  0750  00F5               	movwf	??_SW_Update+1
  1526  0751  0875               	movf	??_SW_Update+1,w
  1527  0752  00F0               	movwf	___bmul@multiplicand
  1528  0753  0877               	movf	SW_Update@index,w
  1529  0754  120A  118A  240B  120A  118A  	fcall	___bmul
  1530  0759  3E22               	addlw	(low ((_SWs_Info| 0+2)))& (0+255)
  1531  075A  0084               	movwf	4
  1532  075B  0874               	movf	??_SW_Update,w
  1533  075C  1383               	bcf	3,7	;select IRP bank0
  1534  075D  0080               	movwf	0
  1535                           
  1536                           ;SW.c: 132:                 } else
  1537  075E  2FD9               	goto	l1233
  1538  075F                     l1219:	
  1539                           
  1540                           ;SW.c: 139:                 if ((SWs_Info[index].sw_samples[0] == (1)) &&
  1541  075F  3003               	movlw	3
  1542  0760  00F4               	movwf	??_SW_Update
  1543  0761  0874               	movf	??_SW_Update,w
  1544  0762  00F0               	movwf	___bmul@multiplicand
  1545  0763  0877               	movf	SW_Update@index,w
  1546  0764  120A  118A  240B  120A  118A  	fcall	___bmul
  1547  0769  3E20               	addlw	(low (_SWs_Info| 0))& (0+255)
  1548  076A  0084               	movwf	4
  1549  076B  1383               	bcf	3,7	;select IRP bank0
  1550  076C  0300               	decf	0,w
  1551  076D  1D03               	btfss	3,2
  1552  076E  2F70               	goto	u481
  1553  076F  2F71               	goto	u480
  1554  0770                     u481:	
  1555  0770  2FD9               	goto	l1233
  1556  0771                     u480:	
  1557  0771                     l1221:	
  1558  0771  3003               	movlw	3
  1559  0772  00F4               	movwf	??_SW_Update
  1560  0773  0874               	movf	??_SW_Update,w
  1561  0774  00F0               	movwf	___bmul@multiplicand
  1562  0775  0877               	movf	SW_Update@index,w
  1563  0776  120A  118A  240B  120A  118A  	fcall	___bmul
  1564  077B  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
  1565  077C  0084               	movwf	4
  1566  077D  1383               	bcf	3,7	;select IRP bank0
  1567  077E  0300               	decf	0,w
  1568  077F  1D03               	btfss	3,2
  1569  0780  2F82               	goto	u491
  1570  0781  2F83               	goto	u490
  1571  0782                     u491:	
  1572  0782  2FD9               	goto	l1233
  1573  0783                     u490:	
  1574  0783                     l1223:	
  1575                           
  1576                           ;SW.c: 141:                 {;SW.c: 142:                     SWs_Info[index].sw_state = 
      +                          SW_PRE_RELEASED;
  1577  0783  3003               	movlw	3
  1578  0784  00F4               	movwf	??_SW_Update
  1579  0785  3003               	movlw	3
  1580  0786  00F5               	movwf	??_SW_Update+1
  1581  0787  0875               	movf	??_SW_Update+1,w
  1582  0788  00F0               	movwf	___bmul@multiplicand
  1583  0789  0877               	movf	SW_Update@index,w
  1584  078A  120A  118A  240B  120A  118A  	fcall	___bmul
  1585  078F  3E22               	addlw	(low ((_SWs_Info| 0+2)))& (0+255)
  1586  0790  0084               	movwf	4
  1587  0791  0874               	movf	??_SW_Update,w
  1588  0792  1383               	bcf	3,7	;select IRP bank0
  1589  0793  0080               	movwf	0
  1590                           
  1591                           ;SW.c: 143:                 }
  1592  0794  2FD9               	goto	l1233
  1593  0795                     l1225:	
  1594                           
  1595                           ;SW.c: 151:                 if (SWs_Info[index].sw_samples[1] == (1))
  1596  0795  3003               	movlw	3
  1597  0796  00F4               	movwf	??_SW_Update
  1598  0797  0874               	movf	??_SW_Update,w
  1599  0798  00F0               	movwf	___bmul@multiplicand
  1600  0799  0877               	movf	SW_Update@index,w
  1601  079A  120A  118A  240B  120A  118A  	fcall	___bmul
  1602  079F  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
  1603  07A0  0084               	movwf	4
  1604  07A1  1383               	bcf	3,7	;select IRP bank0
  1605  07A2  0300               	decf	0,w
  1606  07A3  1D03               	btfss	3,2
  1607  07A4  2FA6               	goto	u501
  1608  07A5  2FA7               	goto	u500
  1609  07A6                     u501:	
  1610  07A6  2FD9               	goto	l1233
  1611  07A7                     u500:	
  1612  07A7                     l1227:	
  1613                           
  1614                           ;SW.c: 152:                 {;SW.c: 153:                     SWs_Info[index].sw_state = 
      +                          SW_RELEASED;
  1615  07A7  3003               	movlw	3
  1616  07A8  00F4               	movwf	??_SW_Update
  1617  07A9  0874               	movf	??_SW_Update,w
  1618  07AA  00F0               	movwf	___bmul@multiplicand
  1619  07AB  0877               	movf	SW_Update@index,w
  1620  07AC  120A  118A  240B  120A  118A  	fcall	___bmul
  1621  07B1  3E22               	addlw	(low ((_SWs_Info| 0+2)))& (0+255)
  1622  07B2  0084               	movwf	4
  1623  07B3  1383               	bcf	3,7	;select IRP bank0
  1624  07B4  0180               	clrf	0
  1625                           
  1626                           ;SW.c: 154:                 } else
  1627  07B5  2FD9               	goto	l1233
  1628  07B6                     l1231:	
  1629  07B6  3003               	movlw	3
  1630  07B7  00F4               	movwf	??_SW_Update
  1631  07B8  0874               	movf	??_SW_Update,w
  1632  07B9  00F0               	movwf	___bmul@multiplicand
  1633  07BA  0877               	movf	SW_Update@index,w
  1634  07BB  120A  118A  240B  120A  118A  	fcall	___bmul
  1635  07C0  3E22               	addlw	(low ((_SWs_Info| 0+2)))& (0+255)
  1636  07C1  0084               	movwf	4
  1637  07C2  1383               	bcf	3,7	;select IRP bank0
  1638  07C3  0800               	movf	0,w
  1639  07C4  00F5               	movwf	??_SW_Update+1
  1640  07C5  01F6               	clrf	??_SW_Update+2
  1641                           
  1642                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1643                           ; Switch size 1, requested type "simple"
  1644                           ; Number of cases is 1, Range of values is 0 to 0
  1645                           ; switch strategies available:
  1646                           ; Name         Instructions Cycles
  1647                           ; simple_byte            4     3 (average)
  1648                           ; direct_byte           11     8 (fixed)
  1649                           ; jumptable            260     6 (fixed)
  1650                           ;	Chosen strategy is simple_byte
  1651  07C6  0876               	movf	??_SW_Update+2,w
  1652  07C7  3A00               	xorlw	0	; case 0
  1653  07C8  1903               	skipnz
  1654  07C9  2FCB               	goto	l1409
  1655  07CA  2FD9               	goto	l1233
  1656  07CB                     l1409:	
  1657                           
  1658                           ; Switch size 1, requested type "simple"
  1659                           ; Number of cases is 4, Range of values is 0 to 3
  1660                           ; switch strategies available:
  1661                           ; Name         Instructions Cycles
  1662                           ; simple_byte           13     7 (average)
  1663                           ; direct_byte           20     8 (fixed)
  1664                           ; jumptable            260     6 (fixed)
  1665                           ;	Chosen strategy is simple_byte
  1666  07CB  0875               	movf	??_SW_Update+1,w
  1667  07CC  3A00               	xorlw	0	; case 0
  1668  07CD  1903               	skipnz
  1669  07CE  2F07               	goto	l1209
  1670  07CF  3A01               	xorlw	1	; case 1
  1671  07D0  1903               	skipnz
  1672  07D1  2F3B               	goto	l1215
  1673  07D2  3A03               	xorlw	3	; case 2
  1674  07D3  1903               	skipnz
  1675  07D4  2F5F               	goto	l1219
  1676  07D5  3A01               	xorlw	1	; case 3
  1677  07D6  1903               	skipnz
  1678  07D7  2F95               	goto	l1225
  1679  07D8  2FD9               	goto	l1233
  1680  07D9                     l1233:	
  1681                           
  1682                           ;SW.c: 164:     }
  1683  07D9  3001               	movlw	1
  1684  07DA  00F4               	movwf	??_SW_Update
  1685  07DB  0874               	movf	??_SW_Update,w
  1686  07DC  07F7               	addwf	SW_Update@index,f
  1687  07DD                     l1235:	
  1688  07DD  3003               	movlw	3
  1689  07DE  0277               	subwf	SW_Update@index,w
  1690  07DF  1C03               	skipc
  1691  07E0  2FE2               	goto	u511
  1692  07E1  2FE3               	goto	u510
  1693  07E2                     u511:	
  1694  07E2  2E8E               	goto	l1195
  1695  07E3                     u510:	
  1696  07E3                     l55:	
  1697  07E3  0008               	return
  1698  07E4                     __end_of_SW_Update:	
  1699                           
  1700                           	psect	text6
  1701  04F9                     __ptext6:	
  1702 ;; *************** function _SW_Init *****************
  1703 ;; Defined at:
  1704 ;;		line 35 in file "SW.c"
  1705 ;; Parameters:    Size  Location     Type
  1706 ;;		None
  1707 ;; Auto vars:     Size  Location     Type
  1708 ;;  index           1    5[COMMON] unsigned char 
  1709 ;; Return value:  Size  Location     Type
  1710 ;;                  1    wreg      void 
  1711 ;; Registers used:
  1712 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1713 ;; Tracked objects:
  1714 ;;		On entry : 0/0
  1715 ;;		On exit  : 0/0
  1716 ;;		Unchanged: 0/0
  1717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1718 ;;      Params:         0       0       0       0       0
  1719 ;;      Locals:         1       0       0       0       0
  1720 ;;      Temps:          1       0       0       0       0
  1721 ;;      Totals:         2       0       0       0       0
  1722 ;;Total ram usage:        2 bytes
  1723 ;; Hardware stack levels used:    1
  1724 ;; Hardware stack levels required when called:    1
  1725 ;; This function calls:
  1726 ;;		___bmul
  1727 ;; This function is called by:
  1728 ;;		_main
  1729 ;; This function uses a non-reentrant model
  1730 ;;
  1731                           
  1732                           
  1733                           ;psect for function _SW_Init
  1734  04F9                     _SW_Init:	
  1735  04F9                     l1139:	
  1736                           ;incstack = 0
  1737                           ; Regs used in _SW_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1738                           
  1739  04F9                     l1141:	
  1740                           
  1741                           ;SW.c: 41:     ((((TRISB))) = (((TRISB)) & (~(1 << ((0)))))|((1) << ((0))));
  1742  04F9  1683               	bsf	3,5	;RP0=1, select bank1
  1743  04FA  1303               	bcf	3,6	;RP1=0, select bank1
  1744  04FB  0806               	movf	6,w	;volatile
  1745  04FC  39FE               	andlw	254
  1746  04FD  3801               	iorlw	1
  1747  04FE  0086               	movwf	6	;volatile
  1748  04FF                     l1143:	
  1749                           
  1750                           ;SW.c: 42:     ((((TRISB))) = (((TRISB)) & (~(1 << ((1)))))|((1) << ((1))));
  1751  04FF  0806               	movf	6,w	;volatile
  1752  0500  39FD               	andlw	253
  1753  0501  3802               	iorlw	2
  1754  0502  0086               	movwf	6	;volatile
  1755  0503                     l1145:	
  1756                           
  1757                           ;SW.c: 43:     ((((TRISB))) = (((TRISB)) & (~(1 << ((2)))))|((1) << ((2))));
  1758  0503  0806               	movf	6,w	;volatile
  1759  0504  39FB               	andlw	251
  1760  0505  3804               	iorlw	4
  1761  0506  0086               	movwf	6	;volatile
  1762  0507                     l1147:	
  1763                           
  1764                           ;SW.c: 46:     for (index = SW_PLUS; index < (3); index++)
  1765  0507  01F5               	clrf	SW_Init@index
  1766  0508                     l1153:	
  1767                           
  1768                           ;SW.c: 47:     {;SW.c: 49:         SWs_Info[index].sw_samples[0] = (1);
  1769  0508  3003               	movlw	3
  1770  0509  00F4               	movwf	??_SW_Init
  1771  050A  0874               	movf	??_SW_Init,w
  1772  050B  00F0               	movwf	___bmul@multiplicand
  1773  050C  0875               	movf	SW_Init@index,w
  1774  050D  120A  118A  240B  120A  118A  	fcall	___bmul
  1775  0512  3E20               	addlw	(low (_SWs_Info| 0))& (0+255)
  1776  0513  0084               	movwf	4
  1777  0514  1383               	bcf	3,7	;select IRP bank0
  1778  0515  0180               	clrf	0
  1779  0516  0A80               	incf	0,f
  1780                           
  1781                           ;SW.c: 50:         SWs_Info[index].sw_samples[1] = (1);
  1782  0517  3003               	movlw	3
  1783  0518  00F4               	movwf	??_SW_Init
  1784  0519  0874               	movf	??_SW_Init,w
  1785  051A  00F0               	movwf	___bmul@multiplicand
  1786  051B  0875               	movf	SW_Init@index,w
  1787  051C  120A  118A  240B  120A  118A  	fcall	___bmul
  1788  0521  3E21               	addlw	(low ((_SWs_Info| 0+1)))& (0+255)
  1789  0522  0084               	movwf	4
  1790  0523  1383               	bcf	3,7	;select IRP bank0
  1791  0524  0180               	clrf	0
  1792  0525  0A80               	incf	0,f
  1793                           
  1794                           ;SW.c: 53:         SWs_Info[index].sw_state = SW_RELEASED;
  1795  0526  3003               	movlw	3
  1796  0527  00F4               	movwf	??_SW_Init
  1797  0528  0874               	movf	??_SW_Init,w
  1798  0529  00F0               	movwf	___bmul@multiplicand
  1799  052A  0875               	movf	SW_Init@index,w
  1800  052B  120A  118A  240B  120A  118A  	fcall	___bmul
  1801  0530  3E22               	addlw	(low ((_SWs_Info| 0+2)))& (0+255)
  1802  0531  0084               	movwf	4
  1803  0532  1383               	bcf	3,7	;select IRP bank0
  1804  0533  0180               	clrf	0
  1805  0534                     l1155:	
  1806                           
  1807                           ;SW.c: 55:     }
  1808  0534  3001               	movlw	1
  1809  0535  00F4               	movwf	??_SW_Init
  1810  0536  0874               	movf	??_SW_Init,w
  1811  0537  07F5               	addwf	SW_Init@index,f
  1812  0538                     l1157:	
  1813  0538  3003               	movlw	3
  1814  0539  0275               	subwf	SW_Init@index,w
  1815  053A  1C03               	skipc
  1816  053B  2D3D               	goto	u391
  1817  053C  2D3E               	goto	u390
  1818  053D                     u391:	
  1819  053D  2D08               	goto	l1153
  1820  053E                     u390:	
  1821  053E                     l46:	
  1822  053E  0008               	return
  1823  053F                     __end_of_SW_Init:	
  1824                           
  1825                           	psect	text7
  1826  040B                     __ptext7:	
  1827 ;; *************** function ___bmul *****************
  1828 ;; Defined at:
  1829 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\Umul8.c"
  1830 ;; Parameters:    Size  Location     Type
  1831 ;;  multiplier      1    wreg     unsigned char 
  1832 ;;  multiplicand    1    0[COMMON] unsigned char 
  1833 ;; Auto vars:     Size  Location     Type
  1834 ;;  multiplier      1    3[COMMON] unsigned char 
  1835 ;;  product         1    2[COMMON] unsigned char 
  1836 ;; Return value:  Size  Location     Type
  1837 ;;                  1    wreg      unsigned char 
  1838 ;; Registers used:
  1839 ;;		wreg, status,2, status,0
  1840 ;; Tracked objects:
  1841 ;;		On entry : 0/0
  1842 ;;		On exit  : 0/0
  1843 ;;		Unchanged: 0/0
  1844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1845 ;;      Params:         1       0       0       0       0
  1846 ;;      Locals:         2       0       0       0       0
  1847 ;;      Temps:          1       0       0       0       0
  1848 ;;      Totals:         4       0       0       0       0
  1849 ;;Total ram usage:        4 bytes
  1850 ;; Hardware stack levels used:    1
  1851 ;; This function calls:
  1852 ;;		Nothing
  1853 ;; This function is called by:
  1854 ;;		_SW_Init
  1855 ;;		_SW_GetState
  1856 ;;		_SW_Update
  1857 ;; This function uses a non-reentrant model
  1858 ;;
  1859                           
  1860                           
  1861                           ;psect for function ___bmul
  1862  040B                     ___bmul:	
  1863                           
  1864                           ;incstack = 0
  1865                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  1866                           ;___bmul@multiplier stored from wreg
  1867  040B  00F3               	movwf	___bmul@multiplier
  1868  040C                     l1115:	
  1869  040C  01F2               	clrf	___bmul@product
  1870  040D                     l1117:	
  1871  040D  1C73               	btfss	___bmul@multiplier,0
  1872  040E  2C10               	goto	u371
  1873  040F  2C11               	goto	u370
  1874  0410                     u371:	
  1875  0410  2C15               	goto	l1121
  1876  0411                     u370:	
  1877  0411                     l1119:	
  1878  0411  0870               	movf	___bmul@multiplicand,w
  1879  0412  00F1               	movwf	??___bmul
  1880  0413  0871               	movf	??___bmul,w
  1881  0414  07F2               	addwf	___bmul@product,f
  1882  0415                     l1121:	
  1883  0415  1003               	clrc
  1884  0416  0DF0               	rlf	___bmul@multiplicand,f
  1885  0417                     l1123:	
  1886  0417  1003               	clrc
  1887  0418  0CF3               	rrf	___bmul@multiplier,f
  1888  0419  0873               	movf	___bmul@multiplier,w
  1889  041A  1D03               	btfss	3,2
  1890  041B  2C1D               	goto	u381
  1891  041C  2C1E               	goto	u380
  1892  041D                     u381:	
  1893  041D  2C0D               	goto	l1117
  1894  041E                     u380:	
  1895  041E                     l1125:	
  1896  041E  0872               	movf	___bmul@product,w
  1897  041F                     l287:	
  1898  041F  0008               	return
  1899  0420                     __end_of___bmul:	
  1900                           
  1901                           	psect	text8
  1902  0447                     __ptext8:	
  1903 ;; *************** function _SSD_Update *****************
  1904 ;; Defined at:
  1905 ;;		line 59 in file "SSD.c"
  1906 ;; Parameters:    Size  Location     Type
  1907 ;;		None
  1908 ;; Auto vars:     Size  Location     Type
  1909 ;;		None
  1910 ;; Return value:  Size  Location     Type
  1911 ;;                  1    wreg      void 
  1912 ;; Registers used:
  1913 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1914 ;; Tracked objects:
  1915 ;;		On entry : 0/0
  1916 ;;		On exit  : 0/0
  1917 ;;		Unchanged: 0/0
  1918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1919 ;;      Params:         0       0       0       0       0
  1920 ;;      Locals:         0       0       0       0       0
  1921 ;;      Temps:          1       0       0       0       0
  1922 ;;      Totals:         1       0       0       0       0
  1923 ;;Total ram usage:        1 bytes
  1924 ;; Hardware stack levels used:    1
  1925 ;; Hardware stack levels required when called:    2
  1926 ;; This function calls:
  1927 ;;		_SSD_Out
  1928 ;; This function is called by:
  1929 ;;		_main
  1930 ;; This function uses a non-reentrant model
  1931 ;;
  1932                           
  1933                           
  1934                           ;psect for function _SSD_Update
  1935  0447                     _SSD_Update:	
  1936  0447                     l1241:	
  1937                           ;incstack = 0
  1938                           ; Regs used in _SSD_Update: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1939                           
  1940                           
  1941                           ;SSD.c: 61:     static tWord SSD_counter = 0;;SSD.c: 65:     SSD_counter += (5);
  1942  0447  3005               	movlw	5
  1943  0448  1283               	bcf	3,5	;RP0=0, select bank0
  1944  0449  1303               	bcf	3,6	;RP1=0, select bank0
  1945  044A  07AD               	addwf	SSD_Update@SSD_counter,f
  1946  044B  1803               	skipnc
  1947  044C  0AAE               	incf	SSD_Update@SSD_counter+1,f
  1948  044D  3000               	movlw	0
  1949  044E  07AE               	addwf	SSD_Update@SSD_counter+1,f
  1950  044F                     l1243:	
  1951                           
  1952                           ;SSD.c: 67:     if (SSD_counter != (5)){
  1953  044F  3005               	movlw	5
  1954  0450  062D               	xorwf	SSD_Update@SSD_counter,w
  1955  0451  042E               	iorwf	SSD_Update@SSD_counter+1,w
  1956  0452  1903               	btfsc	3,2
  1957  0453  2C55               	goto	u521
  1958  0454  2C56               	goto	u520
  1959  0455                     u521:	
  1960  0455  2C57               	goto	l1247
  1961  0456                     u520:	
  1962  0456  2C73               	goto	l109
  1963  0457                     l1247:	
  1964                           
  1965                           ;SSD.c: 71:     SSD_counter = 0;
  1966  0457  01AD               	clrf	SSD_Update@SSD_counter
  1967  0458  01AE               	clrf	SSD_Update@SSD_counter+1
  1968  0459                     l1249:	
  1969                           
  1970                           ;SSD.c: 74:     SSD_Out(SSD_current, SSD_Values[SSD_current]);
  1971  0459  087C               	movf	_SSD_current,w
  1972  045A  3E35               	addlw	(low (_SSD_Values| 0))& (0+255)
  1973  045B  0084               	movwf	4
  1974  045C  1383               	bcf	3,7	;select IRP bank0
  1975  045D  0800               	movf	0,w
  1976  045E  00F6               	movwf	??_SSD_Update
  1977  045F  0876               	movf	??_SSD_Update,w
  1978  0460  00F4               	movwf	SSD_Out@ssd_symbol
  1979  0461  087C               	movf	_SSD_current,w
  1980  0462  120A  118A  2420  120A  118A  	fcall	_SSD_Out
  1981  0467                     l1251:	
  1982                           
  1983                           ;SSD.c: 76:     if (SSD_current == SSD_THIRD)
  1984  0467  3002               	movlw	2
  1985  0468  067C               	xorwf	_SSD_current,w
  1986  0469  1D03               	btfss	3,2
  1987  046A  2C6C               	goto	u531
  1988  046B  2C6D               	goto	u530
  1989  046C                     u531:	
  1990  046C  2C6F               	goto	l1255
  1991  046D                     u530:	
  1992  046D                     l1253:	
  1993                           
  1994                           ;SSD.c: 77:     {;SSD.c: 78:         SSD_current = SSD_FIRST;
  1995  046D  01FC               	clrf	_SSD_current
  1996                           
  1997                           ;SSD.c: 79:     } else
  1998  046E  2C73               	goto	l109
  1999  046F                     l1255:	
  2000                           
  2001                           ;SSD.c: 80:     {;SSD.c: 81:         SSD_current++;
  2002  046F  3001               	movlw	1
  2003  0470  00F6               	movwf	??_SSD_Update
  2004  0471  0876               	movf	??_SSD_Update,w
  2005  0472  07FC               	addwf	_SSD_current,f
  2006  0473                     l109:	
  2007  0473  0008               	return
  2008  0474                     __end_of_SSD_Update:	
  2009                           
  2010                           	psect	text9
  2011  03DE                     __ptext9:	
  2012 ;; *************** function _SSD_SetValue *****************
  2013 ;; Defined at:
  2014 ;;		line 95 in file "SSD.c"
  2015 ;; Parameters:    Size  Location     Type
  2016 ;;  ssd             1    wreg     enum E852
  2017 ;;  ssd_symbol      1    0[COMMON] enum E861
  2018 ;; Auto vars:     Size  Location     Type
  2019 ;;  ssd             1    2[COMMON] enum E852
  2020 ;; Return value:  Size  Location     Type
  2021 ;;                  1    wreg      void 
  2022 ;; Registers used:
  2023 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2024 ;; Tracked objects:
  2025 ;;		On entry : 0/0
  2026 ;;		On exit  : 0/0
  2027 ;;		Unchanged: 0/0
  2028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2029 ;;      Params:         1       0       0       0       0
  2030 ;;      Locals:         1       0       0       0       0
  2031 ;;      Temps:          1       0       0       0       0
  2032 ;;      Totals:         3       0       0       0       0
  2033 ;;Total ram usage:        3 bytes
  2034 ;; Hardware stack levels used:    1
  2035 ;; This function calls:
  2036 ;;		Nothing
  2037 ;; This function is called by:
  2038 ;;		_main
  2039 ;; This function uses a non-reentrant model
  2040 ;;
  2041                           
  2042                           
  2043                           ;psect for function _SSD_SetValue
  2044  03DE                     _SSD_SetValue:	
  2045                           
  2046                           ;incstack = 0
  2047                           ; Regs used in _SSD_SetValue: [wreg-fsr0h+status,2+status,0]
  2048                           ;SSD_SetValue@ssd stored from wreg
  2049  03DE  00F2               	movwf	SSD_SetValue@ssd
  2050  03DF                     l1317:	
  2051                           
  2052                           ;SSD.c: 95: void SSD_SetValue(tSSD ssd, tSSD_Symbol ssd_symbol);SSD.c: 96: {;SSD.c: 98: 
      +                              SSD_Values[ssd] = ssd_symbol;
  2053  03DF  0870               	movf	SSD_SetValue@ssd_symbol,w
  2054  03E0  00F1               	movwf	??_SSD_SetValue
  2055  03E1  0872               	movf	SSD_SetValue@ssd,w
  2056  03E2  3E35               	addlw	(low (_SSD_Values| 0))& (0+255)
  2057  03E3  0084               	movwf	4
  2058  03E4  0871               	movf	??_SSD_SetValue,w
  2059  03E5  1383               	bcf	3,7	;select IRP bank0
  2060  03E6  0080               	movwf	0
  2061  03E7                     l117:	
  2062  03E7  0008               	return
  2063  03E8                     __end_of_SSD_SetValue:	
  2064                           
  2065                           	psect	text10
  2066  0474                     __ptext10:	
  2067 ;; *************** function _SSD_Init *****************
  2068 ;; Defined at:
  2069 ;;		line 34 in file "SSD.c"
  2070 ;; Parameters:    Size  Location     Type
  2071 ;;		None
  2072 ;; Auto vars:     Size  Location     Type
  2073 ;;		None
  2074 ;; Return value:  Size  Location     Type
  2075 ;;                  1    wreg      void 
  2076 ;; Registers used:
  2077 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2078 ;; Tracked objects:
  2079 ;;		On entry : 0/0
  2080 ;;		On exit  : 0/0
  2081 ;;		Unchanged: 0/0
  2082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2083 ;;      Params:         0       0       0       0       0
  2084 ;;      Locals:         2       0       0       0       0
  2085 ;;      Temps:          1       0       0       0       0
  2086 ;;      Totals:         3       0       0       0       0
  2087 ;;Total ram usage:        3 bytes
  2088 ;; Hardware stack levels used:    1
  2089 ;; Hardware stack levels required when called:    2
  2090 ;; This function calls:
  2091 ;;		_SSD_Out
  2092 ;;		_SSD_SetState
  2093 ;; This function is called by:
  2094 ;;		_main
  2095 ;; This function uses a non-reentrant model
  2096 ;;
  2097                           
  2098                           
  2099                           ;psect for function _SSD_Init
  2100  0474                     _SSD_Init:	
  2101  0474                     l1159:	
  2102                           ;incstack = 0
  2103                           ; Regs used in _SSD_Init: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2104                           
  2105  0474                     l102:	
  2106  0474  1683               	bsf	3,5	;RP0=1, select bank1
  2107  0475  1303               	bcf	3,6	;RP1=0, select bank1
  2108  0476  0188               	clrf	8	;volatile
  2109  0477                     l1163:	
  2110                           
  2111                           ;SSD.c: 39:     SSD_Out(SSD_FIRST, SSD_NULL);
  2112  0477  3003               	movlw	3
  2113  0478  00F6               	movwf	??_SSD_Init
  2114  0479  0876               	movf	??_SSD_Init,w
  2115  047A  00F4               	movwf	SSD_Out@ssd_symbol
  2116  047B  3000               	movlw	0
  2117  047C  120A  118A  2420  120A  118A  	fcall	_SSD_Out
  2118  0481                     l1165:	
  2119                           
  2120                           ;SSD.c: 40:     SSD_Out(SSD_SECOND, SSD_NULL);
  2121  0481  3003               	movlw	3
  2122  0482  00F6               	movwf	??_SSD_Init
  2123  0483  0876               	movf	??_SSD_Init,w
  2124  0484  00F4               	movwf	SSD_Out@ssd_symbol
  2125  0485  3001               	movlw	1
  2126  0486  120A  118A  2420  120A  118A  	fcall	_SSD_Out
  2127  048B                     l1167:	
  2128                           
  2129                           ;SSD.c: 41:     SSD_Out(SSD_THIRD, SSD_NULL);
  2130  048B  3003               	movlw	3
  2131  048C  00F6               	movwf	??_SSD_Init
  2132  048D  0876               	movf	??_SSD_Init,w
  2133  048E  00F4               	movwf	SSD_Out@ssd_symbol
  2134  048F  3002               	movlw	2
  2135  0490  120A  118A  2420  120A  118A  	fcall	_SSD_Out
  2136  0495                     l1169:	
  2137                           
  2138                           ;SSD.c: 45:             ((((TRISB))) = (((TRISB)) & (~(1 << ((7)))))|((0) << ((7))));
  2139  0495  1683               	bsf	3,5	;RP0=1, select bank1
  2140  0496  1303               	bcf	3,6	;RP1=0, select bank1
  2141  0497  0806               	movf	6,w	;volatile
  2142  0498  397F               	andlw	127
  2143  0499  0086               	movwf	6	;volatile
  2144  049A                     l1171:	
  2145                           
  2146                           ;SSD.c: 47:             ((((TRISB))) = (((TRISB)) & (~(1 << ((6)))))|((0) << ((6))));
  2147  049A  0806               	movf	6,w	;volatile
  2148  049B  39BF               	andlw	191
  2149  049C  0086               	movwf	6	;volatile
  2150  049D                     l1173:	
  2151                           
  2152                           ;SSD.c: 49:             ((((TRISB))) = (((TRISB)) & (~(1 << ((5)))))|((0) << ((5))));
  2153  049D  0806               	movf	6,w	;volatile
  2154  049E  39DF               	andlw	223
  2155  049F  0086               	movwf	6	;volatile
  2156  04A0                     l1175:	
  2157                           
  2158                           ;SSD.c: 52:     SSD_SetState(SSD_FIRST, SSD_OFF);
  2159  04A0  01F0               	clrf	SSD_SetState@state
  2160  04A1  3000               	movlw	0
  2161  04A2  120A  118A  24B6  120A  118A  	fcall	_SSD_SetState
  2162  04A7                     l1177:	
  2163                           
  2164                           ;SSD.c: 53:     SSD_SetState(SSD_SECOND, SSD_OFF);
  2165  04A7  01F0               	clrf	SSD_SetState@state
  2166  04A8  3001               	movlw	1
  2167  04A9  120A  118A  24B6  120A  118A  	fcall	_SSD_SetState
  2168  04AE                     l1179:	
  2169                           
  2170                           ;SSD.c: 54:     SSD_SetState(SSD_THIRD, SSD_OFF);
  2171  04AE  01F0               	clrf	SSD_SetState@state
  2172  04AF  3002               	movlw	2
  2173  04B0  120A  118A  24B6  120A  118A  	fcall	_SSD_SetState
  2174  04B5                     l103:	
  2175  04B5  0008               	return
  2176  04B6                     __end_of_SSD_Init:	
  2177                           
  2178                           	psect	text11
  2179  0420                     __ptext11:	
  2180 ;; *************** function _SSD_Out *****************
  2181 ;; Defined at:
  2182 ;;		line 148 in file "SSD.c"
  2183 ;; Parameters:    Size  Location     Type
  2184 ;;  ssd             1    wreg     enum E852
  2185 ;;  ssd_symbol      1    4[COMMON] enum E861
  2186 ;; Auto vars:     Size  Location     Type
  2187 ;;  ssd             1    5[COMMON] enum E852
  2188 ;; Return value:  Size  Location     Type
  2189 ;;                  1    wreg      void 
  2190 ;; Registers used:
  2191 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2192 ;; Tracked objects:
  2193 ;;		On entry : 0/0
  2194 ;;		On exit  : 0/0
  2195 ;;		Unchanged: 0/0
  2196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2197 ;;      Params:         1       0       0       0       0
  2198 ;;      Locals:         1       0       0       0       0
  2199 ;;      Temps:          0       0       0       0       0
  2200 ;;      Totals:         2       0       0       0       0
  2201 ;;Total ram usage:        2 bytes
  2202 ;; Hardware stack levels used:    1
  2203 ;; Hardware stack levels required when called:    1
  2204 ;; This function calls:
  2205 ;;		_SSD_SetState
  2206 ;; This function is called by:
  2207 ;;		_SSD_Init
  2208 ;;		_SSD_Update
  2209 ;; This function uses a non-reentrant model
  2210 ;;
  2211                           
  2212                           
  2213                           ;psect for function _SSD_Out
  2214  0420                     _SSD_Out:	
  2215                           
  2216                           ;incstack = 0
  2217                           ; Regs used in _SSD_Out: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2218                           ;SSD_Out@ssd stored from wreg
  2219  0420  00F5               	movwf	SSD_Out@ssd
  2220  0421                     l1133:	
  2221                           
  2222                           ;SSD.c: 148: static void SSD_Out(tSSD ssd, tSSD_Symbol ssd_symbol);SSD.c: 149: {;SSD.c: 
      +                          151:     SSD_SetState(SSD_FIRST, SSD_OFF);
  2223  0421  01F0               	clrf	SSD_SetState@state
  2224  0422  3000               	movlw	0
  2225  0423  120A  118A  24B6  120A  118A  	fcall	_SSD_SetState
  2226                           
  2227                           ;SSD.c: 152:     SSD_SetState(SSD_SECOND, SSD_OFF);
  2228  0428  01F0               	clrf	SSD_SetState@state
  2229  0429  3001               	movlw	1
  2230  042A  120A  118A  24B6  120A  118A  	fcall	_SSD_SetState
  2231                           
  2232                           ;SSD.c: 153:     SSD_SetState(SSD_THIRD, SSD_OFF);
  2233  042F  01F0               	clrf	SSD_SetState@state
  2234  0430  3002               	movlw	2
  2235  0431  120A  118A  24B6  120A  118A  	fcall	_SSD_SetState
  2236  0436                     l1135:	
  2237                           
  2238                           ;SSD.c: 156:     ((((PORTD))) = (SSD_Data[ssd_symbol]));
  2239  0436  0874               	movf	SSD_Out@ssd_symbol,w
  2240  0437  3E31               	addlw	(low (_SSD_Data| 0))& (0+255)
  2241  0438  0084               	movwf	4
  2242  0439  1383               	bcf	3,7	;select IRP bank0
  2243  043A  0800               	movf	0,w
  2244  043B  1283               	bcf	3,5	;RP0=0, select bank0
  2245  043C  1303               	bcf	3,6	;RP1=0, select bank0
  2246  043D  0088               	movwf	8	;volatile
  2247  043E                     l1137:	
  2248                           
  2249                           ;SSD.c: 160:     SSD_SetState(ssd, SSD_ON);
  2250  043E  01F0               	clrf	SSD_SetState@state
  2251  043F  0AF0               	incf	SSD_SetState@state,f
  2252  0440  0875               	movf	SSD_Out@ssd,w
  2253  0441  120A  118A  24B6  120A  118A  	fcall	_SSD_SetState
  2254  0446                     l138:	
  2255  0446  0008               	return
  2256  0447                     __end_of_SSD_Out:	
  2257                           
  2258                           	psect	text12
  2259  04B6                     __ptext12:	
  2260 ;; *************** function _SSD_SetState *****************
  2261 ;; Defined at:
  2262 ;;		line 127 in file "SSD.c"
  2263 ;; Parameters:    Size  Location     Type
  2264 ;;  ssd             1    wreg     enum E852
  2265 ;;  state           1    0[COMMON] enum E857
  2266 ;; Auto vars:     Size  Location     Type
  2267 ;;  ssd             1    3[COMMON] enum E852
  2268 ;; Return value:  Size  Location     Type
  2269 ;;                  1    wreg      void 
  2270 ;; Registers used:
  2271 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2272 ;; Tracked objects:
  2273 ;;		On entry : 0/0
  2274 ;;		On exit  : 0/0
  2275 ;;		Unchanged: 0/0
  2276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2277 ;;      Params:         1       0       0       0       0
  2278 ;;      Locals:         1       0       0       0       0
  2279 ;;      Temps:          2       0       0       0       0
  2280 ;;      Totals:         4       0       0       0       0
  2281 ;;Total ram usage:        4 bytes
  2282 ;; Hardware stack levels used:    1
  2283 ;; This function calls:
  2284 ;;		Nothing
  2285 ;; This function is called by:
  2286 ;;		_SSD_Init
  2287 ;;		_SSD_Out
  2288 ;; This function uses a non-reentrant model
  2289 ;;
  2290                           
  2291                           
  2292                           ;psect for function _SSD_SetState
  2293  04B6                     _SSD_SetState:	
  2294                           
  2295                           ;incstack = 0
  2296                           ; Regs used in _SSD_SetState: [wreg-fsr0h+status,2+status,0]
  2297                           ;SSD_SetState@ssd stored from wreg
  2298  04B6  00F3               	movwf	SSD_SetState@ssd
  2299  04B7                     l1099:	
  2300                           
  2301                           ;SSD.c: 127: void SSD_SetState(tSSD ssd, tSSD_State state);SSD.c: 128: {;SSD.c: 130:    
      +                           switch (ssd)
  2302  04B7  2CE5               	goto	l1109
  2303  04B8                     l1101:	
  2304                           
  2305                           ;SSD.c: 133:             ((((PORTB))) = (((PORTB)) & (~(1 << ((7)))))|(state << ((7))));
  2306  04B8  0870               	movf	SSD_SetState@state,w
  2307  04B9  00F1               	movwf	??_SSD_SetState
  2308  04BA  3007               	movlw	7
  2309  04BB                     u345:	
  2310  04BB  1003               	clrc
  2311  04BC  0DF1               	rlf	??_SSD_SetState,f
  2312  04BD  3EFF               	addlw	-1
  2313  04BE  1D03               	skipz
  2314  04BF  2CBB               	goto	u345
  2315  04C0  1283               	bcf	3,5	;RP0=0, select bank0
  2316  04C1  1303               	bcf	3,6	;RP1=0, select bank0
  2317  04C2  0806               	movf	6,w	;volatile
  2318  04C3  397F               	andlw	127
  2319  04C4  0471               	iorwf	??_SSD_SetState,w
  2320  04C5  0086               	movwf	6	;volatile
  2321                           
  2322                           ;SSD.c: 134:             break;
  2323  04C6  2CF8               	goto	l135
  2324  04C7                     l1103:	
  2325                           
  2326                           ;SSD.c: 136:             ((((PORTB))) = (((PORTB)) & (~(1 << ((6)))))|(state << ((6))));
  2327  04C7  0870               	movf	SSD_SetState@state,w
  2328  04C8  00F1               	movwf	??_SSD_SetState
  2329  04C9  3006               	movlw	6
  2330  04CA                     u355:	
  2331  04CA  1003               	clrc
  2332  04CB  0DF1               	rlf	??_SSD_SetState,f
  2333  04CC  3EFF               	addlw	-1
  2334  04CD  1D03               	skipz
  2335  04CE  2CCA               	goto	u355
  2336  04CF  1283               	bcf	3,5	;RP0=0, select bank0
  2337  04D0  1303               	bcf	3,6	;RP1=0, select bank0
  2338  04D1  0806               	movf	6,w	;volatile
  2339  04D2  39BF               	andlw	191
  2340  04D3  0471               	iorwf	??_SSD_SetState,w
  2341  04D4  0086               	movwf	6	;volatile
  2342                           
  2343                           ;SSD.c: 137:             break;
  2344  04D5  2CF8               	goto	l135
  2345  04D6                     l1105:	
  2346                           
  2347                           ;SSD.c: 139:             ((((PORTB))) = (((PORTB)) & (~(1 << ((5)))))|(state << ((5))));
  2348  04D6  0870               	movf	SSD_SetState@state,w
  2349  04D7  00F1               	movwf	??_SSD_SetState
  2350  04D8  3005               	movlw	5
  2351  04D9                     u365:	
  2352  04D9  1003               	clrc
  2353  04DA  0DF1               	rlf	??_SSD_SetState,f
  2354  04DB  3EFF               	addlw	-1
  2355  04DC  1D03               	skipz
  2356  04DD  2CD9               	goto	u365
  2357  04DE  1283               	bcf	3,5	;RP0=0, select bank0
  2358  04DF  1303               	bcf	3,6	;RP1=0, select bank0
  2359  04E0  0806               	movf	6,w	;volatile
  2360  04E1  39DF               	andlw	223
  2361  04E2  0471               	iorwf	??_SSD_SetState,w
  2362  04E3  0086               	movwf	6	;volatile
  2363                           
  2364                           ;SSD.c: 140:             break;
  2365  04E4  2CF8               	goto	l135
  2366  04E5                     l1109:	
  2367  04E5  0873               	movf	SSD_SetState@ssd,w
  2368  04E6  00F1               	movwf	??_SSD_SetState
  2369  04E7  01F2               	clrf	??_SSD_SetState+1
  2370                           
  2371                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2372                           ; Switch size 1, requested type "simple"
  2373                           ; Number of cases is 1, Range of values is 0 to 0
  2374                           ; switch strategies available:
  2375                           ; Name         Instructions Cycles
  2376                           ; simple_byte            4     3 (average)
  2377                           ; direct_byte           11     8 (fixed)
  2378                           ; jumptable            260     6 (fixed)
  2379                           ;	Chosen strategy is simple_byte
  2380  04E8  0872               	movf	??_SSD_SetState+1,w
  2381  04E9  3A00               	xorlw	0	; case 0
  2382  04EA  1903               	skipnz
  2383  04EB  2CED               	goto	l1411
  2384  04EC  2CF8               	goto	l135
  2385  04ED                     l1411:	
  2386                           
  2387                           ; Switch size 1, requested type "simple"
  2388                           ; Number of cases is 3, Range of values is 0 to 2
  2389                           ; switch strategies available:
  2390                           ; Name         Instructions Cycles
  2391                           ; simple_byte           10     6 (average)
  2392                           ; direct_byte           17     8 (fixed)
  2393                           ; jumptable            260     6 (fixed)
  2394                           ;	Chosen strategy is simple_byte
  2395  04ED  0871               	movf	??_SSD_SetState,w
  2396  04EE  3A00               	xorlw	0	; case 0
  2397  04EF  1903               	skipnz
  2398  04F0  2CB8               	goto	l1101
  2399  04F1  3A01               	xorlw	1	; case 1
  2400  04F2  1903               	skipnz
  2401  04F3  2CC7               	goto	l1103
  2402  04F4  3A03               	xorlw	3	; case 2
  2403  04F5  1903               	skipnz
  2404  04F6  2CD6               	goto	l1105
  2405  04F7  2CF8               	goto	l135
  2406  04F8                     l135:	
  2407  04F8  0008               	return
  2408  04F9                     __end_of_SSD_SetState:	
  2409  007E                     btemp	set	126	;btemp
  2410  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        7
    BSS         19
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      13
    BANK0            80      0      24
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_SSD_Init
    _main->_VC_Update
    _VC_Update->_SW_GetState
    _SW_GetState->___bmul
    _SW_Update->___bmul
    _SW_Init->___bmul
    _SSD_Update->_SSD_Out
    _SSD_Init->_SSD_Out
    _SSD_Out->_SSD_SetState

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    5812
                                              9 COMMON     2     2      0
                           _SSD_Init
                       _SSD_SetValue
                         _SSD_Update
                            _SW_Init
                          _SW_Update
                        _VC_GetSpeed
                            _VC_Init
                          _VC_Update
 ---------------------------------------------------------------------------------
 (1) _VC_Update                                            3     3      0     702
                                              6 COMMON     3     3      0
                        _SW_GetState
 ---------------------------------------------------------------------------------
 (2) _SW_GetState                                          2     2      0     634
                                              4 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (1) _VC_Init                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _VC_GetSpeed                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SW_Update                                            4     4      0    1077
                                              4 COMMON     4     4      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (1) _SW_Init                                              2     2      0     725
                                              4 COMMON     2     2      0
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1     612
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 (1) _SSD_Update                                           1     1      0     968
                                              6 COMMON     1     1      0
                            _SSD_Out
 ---------------------------------------------------------------------------------
 (1) _SSD_SetValue                                         3     2      1     728
                                              0 COMMON     3     2      1
 ---------------------------------------------------------------------------------
 (1) _SSD_Init                                             3     3      0    1612
                                              6 COMMON     3     3      0
                            _SSD_Out
                       _SSD_SetState
 ---------------------------------------------------------------------------------
 (2) _SSD_Out                                              2     1      1     968
                                              4 COMMON     2     1      1
                       _SSD_SetState
 ---------------------------------------------------------------------------------
 (3) _SSD_SetState                                         4     3      1     620
                                              0 COMMON     4     3      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SSD_Init
     _SSD_Out
       _SSD_SetState
     _SSD_SetState
   _SSD_SetValue
   _SSD_Update
     _SSD_Out
       _SSD_SetState
   _SW_Init
     ___bmul
   _SW_Update
     ___bmul
   _VC_GetSpeed
   _VC_Init
   _VC_Update
     _SW_GetState
       ___bmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      0      18       5       30.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      B       D       1       92.9%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      25      12        0.0%
ABS                  0      0      25       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Wed Jan 15 18:18:00 2020

               _SSD_Values 0035                          pc 0002                 _SSD_Update 0447  
           ___bmul@product 0072                _VC_GetSpeed 03CA                __CFG_CP$OFF 0000  
      __end_of_SW_GetState 03F8                         l29 0677                         l46 053E  
                       l55 07E3                         l49 03F7                         l59 0706  
                       fsr 0004               _SSD_SetValue 03DE               _SSD_SetState 04B6  
                      l102 0474                        l103 04B5                        l117 03E7  
                      l109 0473                        l135 04F8                        l160 05CD  
                      l153 05D7                        l138 0446                        l147 03CE  
                      l175 03CB                        l287 041F                        l849 03CC  
                      l987 03CA                        u400 068A                        u401 0689  
                      u410 06B1                        u411 06B0                        u500 07A7  
                      u420 06CB                        u501 07A6                        u421 06CA  
                      u510 07E3                        u430 06E9                        u511 07E2  
                      u431 06E8                        u520 0456                        u600 05AD  
                      u345 04BB                        u521 0455                        u601 05AC  
                      u530 046D                        u370 0411                        u450 0719  
                      u610 05C2               __CFG_CPD$OFF 0000                        u355 04CA  
                      u531 046C                        u371 0410                        u451 0718  
                      u611 05C1                        u380 041E                        u460 072B  
                      u620 05CA                        u540 054E                        u365 04D9  
                      u381 041D                        u461 072A                        u445 06EE  
                      u621 05C9                        u541 054D                        u390 053E  
                      u470 074D                        u630 05D7                        u550 055E  
                      u391 053D                        u471 074C                        u631 05D6  
                      u551 055D                        u480 0771                        u560 0564  
                      u640 0613                        u481 0770                        u561 0563  
                      u641 0612                        u490 0783                        u570 0575  
                      u650 0639                        u491 0782                        u571 0574  
                      u651 0638                        u580 057A                        u660 065D  
                      u581 0579                        u661 065C                        u590 0589  
                      u591 0588                        u677 05F5                        fsr0 0004  
                      indf 0000        SW_Update@SW_counter 002F               __CFG_FOSC$XT 0000  
              _SSD_current 007C               __CFG_LVP$OFF 0000                       l1101 04B8  
                     l1103 04C7                       l1105 04D6                       l1121 0415  
                     l1201 06C6                       l1123 0417                       l1115 040C  
                     l1211 0719                       l1203 06CB                       l1109 04E5  
                     l1133 0421                       l1125 041E                       l1117 040D  
                     l1141 04F9                       l1221 0771                       l1213 072B  
                     l1205 06E3                       l1135 0436                       l1119 0411  
                     l1143 04FF                       l1223 0783                       l1215 073B  
                     l1207 06E9                       l1231 07B6                       l1311 05D1  
                     l1303 05C3                       l1137 043E                       l1241 0447  
                     l1153 0508                       l1145 0503                       l1225 0795  
                     l1217 074D                       l1233 07D9                       l1209 0707  
                     l1129 03E9                       l1305 05C5                       l1321 05E2  
                     l1411 04ED                       l1171 049A                       l1163 0477  
                     l1251 0467                       l1243 044F                       l1155 0534  
                     l1147 0507                       l1139 04F9                       l1235 07DD  
                     l1227 07A7                       l1219 075F                       l1331 05FF  
                     l1323 05E7                       l1173 049D                       l1165 0481  
                     l1317 03DF                       l1253 046D                       l1157 0538  
                     l1181 067B                       l1309 05CB                       l1341 0639  
                     l1333 0604                       l1325 05EC                       l1175 04A0  
                     l1167 048B                       l1159 0474                       l1255 046F  
                     l1247 0457                       l1183 067B                       l1407 0597  
                     l1271 055E                       l1263 054F                       l1343 0653  
                     l1335 0609                       l1327 05F1                       l1319 05D8  
                     l1177 04A7                       l1169 0495                       l1249 0459  
                     l1409 07CB                       l1185 0683                       l1257 053F  
                     l1345 065D                       l1337 0613                       l1329 05FA  
                     l1099 04B7                       l1179 04AE                       l1195 068E  
                     l1283 057B                       l1275 0565                       l1291 058F  
                     l1259 0547                       l1339 062F                       l1197 06AC  
                     l1189 068B                       l1285 057E                       l1277 056A  
                     l1293 05A2                       l1269 0553                       l1199 06B1  
                     l1295 05AD                       l1287 0589                       l1279 0575  
                     l1297 05B3                       l1299 05B9               __CFG_WRT$OFF 0000  
                     _main 05D8                       btemp 007E            __end_of_SSD_Out 0447  
          __end_of_VC_Init 03CF                       start 0000            __end_of_SW_Init 053F  
        ___bmul@multiplier 0073                      ?_main 0070              __CFG_WDTE$OFF 0000  
                    _PORTB 0006                      _PORTD 0008                      _TRISB 0086  
                    _TRISD 0088           __end_of_SSD_Init 04B6             __CFG_BOREN$OFF 0000  
                    pclath 000A                      status 0003                      wtemp0 007E  
              _SW_GetState 03E8         __size_of_VC_Update 0099            __initialization 07E4  
             __end_of_main 067B                ?_SSD_Update 0070                     ??_main 0079  
       __size_of_SW_Update 0169             SW_Update@index 0077                  ??_SSD_Out 0075  
                ??_VC_Init 0070                  ??_SW_Init 0074             __CFG_PWRTE$OFF 0000  
                   ___bmul 040B          __end_of_VC_Update 05D8        __size_of_SSD_Update 002D  
  __end_of__initialization 07FC          __end_of_SW_Update 07E4             VC_Update@Index 0078  
      ___bmul@multiplicand 0070             __pcstackCOMMON 0070               __pidataBANK0 03CF  
             ?_VC_GetSpeed 0070                  ?_SSD_Init 0070     SSD_SetValue@ssd_symbol 0070  
VC_Update@PRESSURE_counter 0029              SW_GetState@sw 0075        VC_Update@VC_counter 002B  
               __pbssBANK0 0020                 __pmaintext 05D8                    ?___bmul 0070  
               ??_SSD_Init 0076                    _SSD_Out 0420                    _VC_Init 03CC  
          SSD_SetValue@ssd 0072                _TargetSpeed 007B                    _SW_Init 04F9  
          SSD_SetState@ssd 0073               ?_SW_GetState 0070            __size_of___bmul 0015  
             ??_SSD_Update 0076                    __ptext1 053F                    __ptext2 03E8  
                  __ptext3 03CC                    __ptext4 03CA                    __ptext5 067B  
                  __ptext6 04F9                    __ptext7 040B                    __ptext8 0447  
                  __ptext9 03DE                    clrloop0 03D7       end_of_initialization 07FC  
       __end_of_SSD_Update 0474       __size_of_VC_GetSpeed 0002                  _VC_Update 053F  
                _SW_Update 067B             __end_of___bmul 0420              ?_SSD_SetValue 0070  
            ?_SSD_SetState 0070          __size_of_SSD_Init 0042        start_initialization 07E4  
        SSD_SetState@state 0070                 ?_VC_Update 0070                   ??___bmul 0071  
     __size_of_SW_GetState 0010                 init_fetch0 03F8                 ?_SW_Update 0070  
              __pdataBANK0 0031             ??_SSD_SetValue 0071             ??_SSD_SetState 0071  
              __pbssCOMMON 007B                  ___latbits 0002      SSD_Update@SSD_counter 002D  
                 ?_SSD_Out 0074                   ?_VC_Init 0070                   ?_SW_Init 0070  
             SW_Init@index 0075                ??_VC_Update 0076                  clear_ram0 03D6  
              ??_SW_Update 0074                   _SSD_Data 0031                   _SSD_Init 0474  
                 _SWs_Info 0020           __size_of_SSD_Out 0027           __size_of_VC_Init 0003  
     __end_of_SSD_SetValue 03E8       __end_of_SSD_SetState 04F9           __size_of_SW_Init 0046  
               SSD_Out@ssd 0075              ??_VC_GetSpeed 0070                   __ptext10 0474  
                 __ptext11 0420                   __ptext12 04B6          SSD_Out@ssd_symbol 0074  
            __size_of_main 00A3        __end_of_VC_GetSpeed 03CC                   init_ram0 03FC  
            ??_SW_GetState 0074      __size_of_SSD_SetValue 000A      __size_of_SSD_SetState 0043  
